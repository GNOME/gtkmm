/* Copyright (C) 2012 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

_CONFIGINCLUDE(gtkmmconfig.h)

#include <gtkmm/window.h>
#include <giomm/actiongroup.h>
#include <giomm/actionmap.h>
#include <gtkmm/application.h>

_DEFS(gtkmm,gtk)
_PINCLUDE(gtkmm/private/window_p.h)

namespace Gtk
{
class GTKMM_API ShortcutsWindow;

/** A Gtk::Window subclass with Gtk::Application support.
 *
 * %ApplicationWindow is a Gtk::Window subclass that offers some
 * extra functionality for better integration with Gtk::Application
 * features.  Notably, it can handle both the application menu as well
 * as the menubar. See set_app_menu() and set_menubar().
 *
 * This class derives from Gio::ActionGroup and Gio::ActionMap,
 * to let you add window-specific actions that will be exported by the
 * associated Gtk::Application, together with its application-wide
 * actions.  Window-specific actions are prefixed with the "win."
 * prefix and application-wide actions are prefixed with the "app."
 * prefix.  Actions must be addressed with the prefixed name when
 * referring to them from a Gio::MenuModel, or in activate_action().
 * Gio::ActionGroup::activate_action() does not accept prefixes.
 *
 * Note that widgets that are placed inside a %Gtk::ApplicationWindow
 * can also activate these actions, if they implement the
 * Gtk::Actionable interface.
 *
 * As with Gtk::Application, the GDK lock will be acquired when
 * processing actions arriving from other processes and should therefore
 * be held when activating actions locally (if GDK threads are enabled).
 *
 * The settings Gtk::Settings::property_gtk_shell_shows_app_menu() and
 * Gtk::Settings::property_gtk_shell_shows_menubar() tell GTK whether the
 * desktop environment is showing the application menu and menubar
 * models outside the application as part of the desktop shell.
 * For instance, on OS X, both menus will be displayed remotely;
 * on Windows neither will be. gnome-shell (starting with version 3.4)
 * will display the application menu, but not the menubar.
 *
 * If the desktop environment does not display the menubar, then
 * %Gtk::ApplicationWindow will automatically show a menubar for it.
 * This behaviour can be overridden with property_show_menubar().
 * If the desktop environment does not display the application
 * menu, then it will automatically be included in the menubar.
 */
class GTKMM_API ApplicationWindow
: public Gtk::Window,
  public Gio::ActionGroup,
  public Gio::ActionMap
{
  _CLASS_GTKOBJECT(ApplicationWindow, GtkApplicationWindow, GTK_APPLICATION_WINDOW, Gtk::Window, GtkWindow, , , GTKMM_API)
  _IMPLEMENTS_INTERFACE(Gio::ActionGroup)
  _IMPLEMENTS_INTERFACE(Gio::ActionMap)
  _UNMANAGEABLE
public:
  // Disambiguate calls to activate_action().
  // g_action_group_activate_action() and gtk_widget_activate_action() are
  // very similar, but gtk_widget_activate_action() requires a "win." prefix.
  // If you prefer g_action_group_activate_action(), call
  // Gio::ActionGroup::activate_action().
  // https://discourse.gnome.org/t/which-activate-action-shall-be-chosen-in-gtkapplicationwindow/10555/2
  using Widget::activate_action;

  _CTOR_DEFAULT
  explicit ApplicationWindow(const Glib::RefPtr<Application>& application);
dnl // Don't ignore gtk_application_window_new(). h2def.py erroneously classifies
dnl // it as a GtkApplication method, because its first parameter is a GtkApplication*.
dnl //_IGNORE(gtk_application_window_new)

  _WRAP_METHOD(void set_show_menubar(bool show_menubar = true), gtk_application_window_set_show_menubar)
  _WRAP_METHOD(bool get_show_menubar() const, gtk_application_window_get_show_menubar)

  _WRAP_METHOD(guint get_id() const, gtk_application_window_get_id)

  _WRAP_METHOD(void set_help_overlay(ShortcutsWindow& help_overlay), gtk_application_window_set_help_overlay)
  /** Undoes the effect of a previous call to set_help_overlay().
   * @newin{3,20}
   */
  void unset_help_overlay();
  _WRAP_METHOD(ShortcutsWindow* get_help_overlay(), gtk_application_window_get_help_overlay)
  _WRAP_METHOD(const ShortcutsWindow* get_help_overlay() const, gtk_application_window_get_help_overlay, constversion)

  _WRAP_PROPERTY("show-menubar", bool)
};

} // namespace Gtk
