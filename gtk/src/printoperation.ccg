/* Copyright (C) 2006 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <gtk/gtk.h>

using Result = Gtk::PrintOperation::Result;

extern "C"
{
// This Signal Proxy allows the C++ coder to specify a sigc::slot instead of a static function.
static void
SignalProxy_PrintSetupDone_gtk_callback(GtkPageSetup* page_setup, gpointer data)
{
  const auto the_slot = static_cast<Gtk::SlotPrintSetupDone*>(data);

  try
  {
    auto ps = Glib::wrap(page_setup);
    (*the_slot)(ps);
  }
  catch (...)
  {
    Glib::exception_handlers_invoke();
  }

  delete the_slot;
}
} // extern "C"

namespace Gtk
{

PrintOperation::Result
PrintOperation::run(Action action)
{
  GError* gerror = nullptr;
  Result res =
    (Result)gtk_print_operation_run(this->gobj(), (GtkPrintOperationAction)action, nullptr, &gerror);

  if (res == PrintOperation::Result::ERROR)
  {
    gtk_print_operation_get_error(this->gobj(), &gerror);
    ::Glib::Error::throw_exception(gerror);
  }

  return res;
}

Glib::RefPtr<PageSetup>
run_page_setup_dialog(Window& parent,
                      const Glib::RefPtr<const PageSetup>& page_setup,
                      const Glib::RefPtr<const PrintSettings>& print_settings)
{
  // Specify the exact type with template specialization, to avoid possible
  // ambiguities between the const and non-const versions of unwrap() reported
  // by Sun's compiler (specifying unwrap<const Object> was reported
  // not to work):
  return Glib::wrap(
    gtk_print_run_page_setup_dialog(
      parent.gobj(),
      const_cast<GtkPageSetup*>(Glib::unwrap<PageSetup>(page_setup)),
      const_cast<GtkPrintSettings*>(Glib::unwrap<PrintSettings>(print_settings))));

}

Glib::RefPtr<PageSetup>
run_page_setup_dialog(Window& parent,
                      const Glib::RefPtr<const PrintSettings>& print_settings)
{
  // Specify the exact type with template specialization, to avoid possible
  // ambiguities between the const and non-const versions of unwrap() reported
  // by Sun's compiler (specifying unwrap<const Object> was reported
  // not to work):
  return Glib::wrap(
    gtk_print_run_page_setup_dialog(
      parent.gobj(),
      nullptr,
      const_cast<GtkPrintSettings*>(Glib::unwrap<PrintSettings>(print_settings))));

}

void
run_page_setup_dialog_async(Window& parent,
                            const Glib::RefPtr<const PageSetup>& page_setup,
                            const Glib::RefPtr<const PrintSettings>& print_settings,
                            const SlotPrintSetupDone& slot)
{
  auto slot_copy = new SlotPrintSetupDone(slot);

  // Specify the exact type with template specialization, to avoid possible
  // ambiguities between the const and non-const versions of unwrap() reported
  // by Sun's compiler (specifying unwrap<const Object> was reported
  // not to work):
  gtk_print_run_page_setup_dialog_async(
    parent.gobj(),
    const_cast<GtkPageSetup*>(Glib::unwrap<PageSetup>(page_setup)),
    const_cast<GtkPrintSettings*>(Glib::unwrap<PrintSettings>(print_settings)),
    &SignalProxy_PrintSetupDone_gtk_callback,
    slot_copy);
}

void
run_page_setup_dialog_async(Window& parent,
                            const Glib::RefPtr<const PrintSettings>& print_settings,
                            const SlotPrintSetupDone& slot)
{
  auto slot_copy = new SlotPrintSetupDone(slot);

  // Specify the exact type with template specialization, to avoid possible
  // ambiguities between the const and non-const versions of unwrap() reported
  // by Sun's compiler (specifying unwrap<const Object> was reported
  // not to work):
  gtk_print_run_page_setup_dialog_async(
    parent.gobj(),
    nullptr,
    const_cast<GtkPrintSettings*>(Glib::unwrap<PrintSettings>(print_settings)),
    &SignalProxy_PrintSetupDone_gtk_callback,
    slot_copy);
}

} // namespace Gtk
