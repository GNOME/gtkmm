/* Copyright (C) 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see <https://www.gnu.org/licenses/>.
 */

#include <gtkmm/checkbutton.h>
#include <gtkmm/radiobuttongroup.h>
_DEFS(gtkmm,gtk)
_PINCLUDE(gtkmm/private/checkbutton_p.h)


namespace Gtk
{

/** A choice from multiple check buttons.
 *
 * A single radio button performs the same basic function as a Gtk::CheckButton,
 * as its position in the object hierarchy reflects. It is only when multiple
 * radio buttons are grouped together that they become a different user
 * interface component in their own right.
 *
 * Every radio button is a member of some group of radio buttons. When one is
 * selected, all other radio buttons in the same group are deselected. A
 * %Gtk::RadioButton is one way of giving the user a choice from many options.
 *
 * After constructing the first %RadioButton in a group, use get_group() and
 * provide this Group to the constructors ot the other RadioButtons in the same
 * group, or use join_group(). To remove a %Gtk::RadioButton from one group and
 * make it part of a new one, use set_group() or join_group().
 *
 * The RadioButton widget looks like this:
 * @image html radiobutton1.png
 *
 * @ingroup Widgets
 */
class GTKMM_API RadioButton : public CheckButton
{
  _CLASS_GTKOBJECT(RadioButton,GtkRadioButton,GTK_RADIO_BUTTON,Gtk::CheckButton,GtkCheckButton,,,GTKMM_API)
  _IGNORE(gtk_radio_button_new_from_widget, gtk_radio_button_new_with_mnemonic_from_widget, gtk_radio_button_new_with_label_from_widget)
public:
  using Group = RadioButtonGroup;

  RadioButton();
  explicit RadioButton(const Glib::ustring& label, bool mnemonic = false);

  /** Create an empty RadioButton belonging to the specified group,
   * into which you can add() a widget.
   * If you wish to add a Gtk::Label,
   * you may want to
   * use the Gtk::RadioButton(const Group& group, const Glib::ustring& label, bool mnemonic)
   * constructor directly instead.
   */
  explicit RadioButton(Group& group);

  /** Create a button belonging to the specified group, with a label inside.
   * You won't be able to add a widget to this button
   * since it already contains a Gtk::Label.
   */
  RadioButton(Group& group, const Glib::ustring& label, bool mnemonic = false);


  /** Get the radio button's group.
   * This group may be passed to the constructors of other radio buttons, or used with set_group().
   *
   * @result The group to which the radio button belongs.
   */
  _WRAP_METHOD(Group get_group(), gtk_radio_button_get_group)

  /** Set the radio button's group.
   * You can obtain a suitable group from another radio button by using get_group().
   *
   * @param group The group to which the radio button should belong.
   */
  void set_group(Group& group);

  /** Remove the radio button from the group.
   */
  void reset_group();
  _IGNORE(gtk_radio_button_set_group)

  _WRAP_METHOD(void join_group(RadioButton& group_source), gtk_radio_button_join_group)

  _WRAP_SIGNAL(void group_changed(), "group_changed")

  /// Note that %property_group() corresponds to join_group(), rather than to get_group() and set_group().
  _WRAP_PROPERTY("group", RadioButton*, newin "3,22")
};

} //namespace Gtk
