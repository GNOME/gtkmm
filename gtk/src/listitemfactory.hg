/* Copyright (C) 2020 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */

_CONFIGINCLUDE(gtkmmconfig.h)

#include <glibmm/object.h>

_DEFS(gtkmm,gtk)
_PINCLUDE(glibmm/private/object_p.h)

namespace Gtk
{

/** Mapping list items to widgets.
 *
 * %Gtk::ListItemFactory is one of the core concepts of handling list widgets.
 * It is the object tasked with creating widgets for items taken from a
 * Gio::ListModel when the views need them and updating them as the items
 * displayed by the view change.
 *
 * A view is usually only able to display anything after both a factory
 * and a model have been set on the view. So it is important that you do
 * not skip this step when setting up your first view.
 *
 * Because views do not display the whole list at once but only a few
 * items, they only need to maintain a few widgets at a time. They will
 * instruct the %Gtk::ListItemFactory to create these widgets and bind them
 * to the items that are currently displayed.
 * As the list model changes or the user scrolls to the list, the items will
 * change and the view will instruct the factory to bind the widgets to those
 * new items.
 *
 * The actual widgets used for displaying those widgets is provided by you.
 *
 * When the factory needs widgets created, it will create a Gtk::ListItem and
 * hand it to your code to set up a widget for. This list item will provide
 * various properties with information about what item to display and provide
 * you with some opportunities to configure its behavior. See the Gtk::ListItem
 * documentation for further details.
 *
 * Various implementations of %Gtk::ListItemFactory exist to allow you different
 * ways to provide those widgets. The most common implementations are
 * Gtk::BuilderListItemFactory which takes a Gtk::Builder .ui file and then creates
 * widgets and manages everything automatically from the information in that file
 * and Gtk::SignalListItemFactory which allows you to connect to signals with your
 * own code and retain full control over how the widgets are setup and managed.
 *
 * A %Gtk::ListItemFactory is supposed to be final - that means its behavior should
 * not change and the first widget created from it should behave the same way as
 * the last widget created from it.
 * If you intend to do changes to the behavior, it is recommended that you create
 * a new %Gtk::ListItemFactory which will allow the views to recreate its widgets.
 *
 * Once you have chosen your factory and created it, you need to set it on the
 * view widget you want to use it with, such as via Gtk::ListView::set_factory().
 * Reusing factories across different views is allowed, but very uncommon.
 *
 * @ingroup ListView
 * @newin{3,98}
 */
class GTKMM_API ListItemFactory : public Glib::Object
{
  _CLASS_GOBJECT(ListItemFactory, GtkListItemFactory, GTK_LIST_ITEM_FACTORY, Glib::Object, GObject, , , GTKMM_API)
};

} // namespace Gtk
