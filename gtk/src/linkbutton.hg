/*
 * Copyright (C) 2006 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <gtkmm/button.h>
_DEFS(gtkmm,gtk)
_PINCLUDE(gtkmm/private/button_p.h)


namespace Gtk
{

/** Create buttons bound to a URL.
 *
 * A Gtk::LinkButton is a Gtk::Button with a hyperlink, similar to the one
 * used by web browsers, which triggers an action when clicked. It is useful
 * to show quick links to resources.
 *
 * The URI bound to a Gtk::LinkButton can be set specifically using set_uri(),
 * and retrieved using get_uri().
 * By default, Gtk::LinkButton calls Gtk::FileLauncher::launch() when the button is clicked.
 * This behaviour can be overridden by connecting to the activate_link signal and
 * returning true from the signal handler.
 *
 * The LinkButton widget looks like this:
 * @image html linkbutton1.png
 *
 * @newin{2,10}
 * @ingroup Widgets
 */
class GTKMM_API LinkButton : public Button
{
  _CLASS_GTKOBJECT(LinkButton, GtkLinkButton, GTK_LINK_BUTTON, Gtk::Button, GtkButton, , , GTKMM_API)
public:
  _CTOR_DEFAULT
  explicit LinkButton(const Glib::ustring& uri);
  _IGNORE(gtk_link_button_new)
  _WRAP_CTOR(LinkButton(const Glib::ustring& uri, const Glib::ustring& label),gtk_link_button_new_with_label)

  _WRAP_METHOD(Glib::ustring get_uri() const, gtk_link_button_get_uri)
  _WRAP_METHOD(void set_uri(const Glib::ustring& uri), gtk_link_button_set_uri)

  _WRAP_METHOD(bool get_visited() const, gtk_link_button_get_visited)
  _WRAP_METHOD(void set_visited(bool visited = true), gtk_link_button_set_visited)

  _WRAP_PROPERTY("uri", Glib::ustring)
  _WRAP_PROPERTY("visited", bool)

  // no_default_handler because GtkLinkButtonClass is private.
  _WRAP_SIGNAL(bool activate_link(), "activate-link", no_default_handler)
};


} // namespace Gtk
