/*
 * Copyright (C) 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <gtkmm/widget.h>
_DEFS(gtkmm,gtk)
_PINCLUDE(gtkmm/private/widget_p.h)

#include <gdkmm/gltypes.h>

namespace Gtk
{

/** A widget providing an opengl rendering area
 *
 * @ingroup Widgets
 */
class GLArea : public Widget
{
  _CLASS_GTKOBJECT(GLArea,GtkGLArea,GTK_GL_AREA,Gtk::Widget,GtkWidget)
public:

  _CTOR_DEFAULT

  _WRAP_METHOD(Glib::RefPtr<const Gdk::GLContext> get_context(), gtk_gl_area_get_context, refreturn)
  _WRAP_METHOD(void make_current(), gtk_gl_area_make_current)
  _WRAP_METHOD(void queue_render(), gtk_gl_area_queue_render)
  _WRAP_METHOD(void attach_buffers(), gtk_gl_area_attach_buffers)
  _WRAP_METHOD(void set_error(const GError *), gtk_gl_area_set_error)
  _WRAP_METHOD(GError* get_error(), gtk_gl_area_get_error)
  _WRAP_METHOD(void set_has_alpha(bool has_alpha), gtk_gl_area_set_has_alpha)
  _WRAP_METHOD(bool get_has_alpha(), gtk_gl_area_get_has_alpha)
  _WRAP_METHOD(void set_has_depth_buffer(bool has_depth_buffer), gtk_gl_area_set_has_depth_buffer)
  _WRAP_METHOD(bool get_has_depth_buffer(), gtk_gl_area_get_has_depth_buffer)
  _WRAP_METHOD(void set_has_stencil_buffer(bool has_stencil_buffer), gtk_gl_area_set_has_stencil_buffer)
  _WRAP_METHOD(bool get_has_stencil_buffer(), gtk_gl_area_get_has_stencil_buffer)
  _WRAP_METHOD(void set_auto_render(bool auto_render), gtk_gl_area_set_auto_render)
  _WRAP_METHOD(bool get_auto_render(), gtk_gl_area_get_auto_render)
  _WRAP_METHOD(void get_required_version(int& major, int& minor), gtk_gl_area_get_required_version)
  _WRAP_METHOD(void set_required_version(int major, int minor), gtk_gl_area_set_required_version)

  _WRAP_PROPERTY("auto-render", bool)
  _WRAP_PROPERTY("context", Glib::RefPtr<Gdk::GLContext>)
  _WRAP_PROPERTY("has-alpha", bool)
  _WRAP_PROPERTY("has-depth-buffer", bool)
  _WRAP_PROPERTY("has-stencil-buffer", bool)

#m4 _CONVERSION(`Glib::RefPtr<Gdk::GLContext>', `GdkGLContext*', Glib::unwrap($3))
  _WRAP_SIGNAL(Glib::RefPtr<Gdk::GLContext> create_context(), "create_context")
#m4 _CONVERSION(`GdkGLContext*', `const Glib::RefPtr<Gdk::GLContext>&', Glib::wrap($3, true))
  _WRAP_SIGNAL(bool render(const Glib::RefPtr<Gdk::GLContext>& context), render)
  _WRAP_SIGNAL(void resize(int width, int height), "resize")

};

} //namespace Gtk
