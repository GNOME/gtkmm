/* Copyright (C) 2003 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see <https://www.gnu.org/licenses/>.
 */

#include <gtk/gtk.h> //For gtk_file_filter_flags_get_type().

static gboolean SignalProxy_Custom_gtk_callback(const GtkFileFilterInfo* filter_info, gpointer data)
{
  auto the_slot = static_cast<Gtk::FileFilter::SlotCustom*>(data);

  try
  {
    //Create a suitable C++ instance to pass to the C++ method:
    Gtk::FileFilter::Info cppInfo;
    cppInfo.contains = (Gtk::FileFilterFlags)filter_info->contains;
    cppInfo.filename = Glib::convert_const_gchar_ptr_to_ustring(filter_info->filename);
    cppInfo.uri = Glib::convert_const_gchar_ptr_to_ustring(filter_info->uri);
    cppInfo.display_name = Glib::convert_const_gchar_ptr_to_ustring(filter_info->display_name);
    cppInfo.mime_type = Glib::convert_const_gchar_ptr_to_ustring(filter_info->mime_type);

    return (*the_slot)(cppInfo);
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
    return false; //arbitrary default;
  }
}

static void SignalProxy_Custom_gtk_callback_destroy(void* data)
{
  delete static_cast<Gtk::FileFilter::SlotCustom*>(data);
}


namespace Gtk
{

void FileFilter::add_custom(FileFilterFlags needed, const SlotCustom& slot)
{
  //Create a copy of the slot. A pointer to this will be passed through the callback's data parameter.
  //It will be deleted when SignalProxy_Custom::gtk_callback_destroy() is called.
  auto slot_copy = new SlotCustom(slot);

  gtk_file_filter_add_custom(gobj(), (GtkFileFilterFlags)needed,
                             &SignalProxy_Custom_gtk_callback,
                             slot_copy,
                             &SignalProxy_Custom_gtk_callback_destroy);
}

} // namespace Gtk
