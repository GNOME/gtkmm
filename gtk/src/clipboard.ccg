/* Copyright (C) 2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see <https://www.gnu.org/licenses/>.
 */

#include <glibmm/vectorutils.h>

#include <gdkmm/types.h>

#include <gtkmm/textbuffer.h>
#include <gtkmm/selectiondata_private.h>
#include <glibmm/utility.h> //For make_unique_ptr_gfree<>.
#include <gtk/gtk.h>

namespace
{

// SignalProxy_GetClear:
// This Signal Proxy allows the C++ coder to specify a sigc::slot instead of a static function.
class SignalProxy_GetClear
{
public:
  SignalProxy_GetClear(const Gtk::Clipboard::SlotGet& slot_get,
                       const Gtk::Clipboard::SlotClear& slot_clear);

  static void gtk_callback_get(GtkClipboard* clipboard, GtkSelectionData* selection_data,
                               unsigned int info, void* data);
  static void gtk_callback_clear(GtkClipboard* clipboard, void* data);

  Gtk::Clipboard::SlotGet   slot_get_;
  Gtk::Clipboard::SlotClear slot_clear_;
};

SignalProxy_GetClear::SignalProxy_GetClear(const Gtk::Clipboard::SlotGet& slot_get,
                                           const Gtk::Clipboard::SlotClear& slot_clear)
:
  slot_get_   (slot_get),
  slot_clear_ (slot_clear)
{}

static void SignalProxy_GetClear_gtk_callback_get(GtkClipboard*, GtkSelectionData* selection_data,
                                            unsigned int info, void* data)
{
  const auto self = static_cast<SignalProxy_GetClear*>(data);

  try
  {
    Gtk::SelectionData_WithoutOwnership cppSelectionData(selection_data);
    (self->slot_get_)(cppSelectionData, info);
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }
}

static void SignalProxy_GetClear_gtk_callback_clear(GtkClipboard*, void* data)
{
  const auto self = static_cast<SignalProxy_GetClear*>(data);

  try
  {
    (self->slot_clear_)();
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }

  delete self; // After this callback has been called, none of the 2 callbacks will be called again.

  //This might leak the last SignalProxy_GetClear(), but only the last one,
  //because clear() is called when set() is called again.
}

} //anonymous namespace


static void SignalProxy_Received_gtk_callback(GtkClipboard*, GtkSelectionData* selection_data, void* data)
{
  auto the_slot = static_cast<Gtk::Clipboard::SlotReceived*>(data);

  try
  {
    Gtk::SelectionData cppSelectionData(selection_data, true /*take_copy=true*/);
    (*the_slot)(cppSelectionData);
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }

  delete the_slot;
}

static void SignalProxy_TargetsReceived_gtk_callback(GtkClipboard*, GdkAtom* atoms,
                                                     gint n_atoms, gpointer data)
{
  Gtk::Clipboard::SlotTargetsReceived *const
    slot = static_cast<Gtk::Clipboard::SlotTargetsReceived*>(data);

  try
  {
    // TODO: check if the ownership is good.
    (*slot) (Glib::ArrayHandler<Glib::ustring, Gdk::AtomUstringTraits>::array_to_vector(atoms, n_atoms > 0 ? n_atoms : 0, Glib::OWNERSHIP_NONE));
  }
  catch (...)
  {
    Glib::exception_handlers_invoke();
  }
  delete slot; // the callback is only used once
}


static void SignalProxy_TextReceived_gtk_callback(GtkClipboard*, const char* text, void* data)
{
  auto the_slot = static_cast<Gtk::Clipboard::SlotTextReceived*>(data);

  try
  {
    (*the_slot)((text) ? Glib::ustring(text) : Glib::ustring());
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }

  delete the_slot; // the callback is only used once
}

static void SignalProxy_RichTextReceived_gtk_callback(GtkClipboard*, GdkAtom format,
                                                      const guint8* text, gsize length, void* data)
{
  Gtk::Clipboard::SlotRichTextReceived *const
    slot = static_cast<Gtk::Clipboard::SlotRichTextReceived*>(data);

  try
  {
    (*slot)(Glib::convert_return_gchar_ptr_to_ustring(gdk_atom_name(format)),
            (text) ? std::string(reinterpret_cast<const char*>(text), length) : std::string());
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }
  delete slot; // the callback is only used once
}

static void SignalProxy_UrisReceived_gtk_callback(GtkClipboard*, gchar** uris, void* data)
{
  auto the_slot = static_cast<Gtk::Clipboard::SlotUrisReceived*>(data);

  try
  {
    // TODO: check if the ownetship is good. krnowak.
    //Handle: Does this take ownership? It should probalby copy. murrayc.
    (*the_slot)( Glib::ArrayHandler<Glib::ustring>::array_to_vector(uris, Glib::OWNERSHIP_NONE) );
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }

  delete the_slot; // the callback is only used once
}

static void SignalProxy_ImageReceived_gtk_callback(GtkClipboard*, GdkPixbuf* image, void* data)
{
  auto the_slot = static_cast<Gtk::Clipboard::SlotImageReceived*>(data);

  try
  {
    (*the_slot)(Glib::wrap(image, true /* take_ref */));
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
  }

  delete the_slot; // the callback is only used once
}


namespace Gtk
{

bool Clipboard::set(const std::vector<TargetEntry>& targets,
                    const SlotGet& slot_get, const SlotClear& slot_clear)
{
  // Create a signal proxy. A pointer to this will be passed through the callback's data parameter.
  const auto pSignalProxy = new SignalProxy_GetClear(slot_get, slot_clear);

  return gtk_clipboard_set_with_data(
      gobj(),
      Glib::ArrayHandler<TargetEntry, TargetEntryTraits>::vector_to_array(targets).data (),
      targets.size(),
      &SignalProxy_GetClear_gtk_callback_get,
      &SignalProxy_GetClear_gtk_callback_clear,
      pSignalProxy);
}

void Clipboard::set_text(const Glib::ustring& text)
{
  gtk_clipboard_set_text(gobj(), text.c_str(), text.bytes());
}


void Clipboard::request_contents(const Glib::ustring& target, const SlotReceived& slot)
{
  // Create a copy of the slot. A pointer to this will be passed through the callback's data parameter.
  auto slot_copy = new SlotReceived(slot);

  gtk_clipboard_request_contents(gobj(), gdk_atom_intern(target.c_str(), FALSE),
      &SignalProxy_Received_gtk_callback, slot_copy);
}

void Clipboard::request_text(const SlotTextReceived& slot)
{
  // Create a copy of the slot. A pointer to this will be passed through the callback's data parameter.
  auto slot_copy = new SlotTextReceived(slot);

  gtk_clipboard_request_text(gobj(),
      &SignalProxy_TextReceived_gtk_callback, slot_copy);
}

void Clipboard::request_rich_text(const Glib::RefPtr<TextBuffer>& buffer, const SlotRichTextReceived& slot)
{
  // Create a copy of the slot. A pointer to this will be passed through the callback's data parameter.
  auto slot_copy = new SlotRichTextReceived(slot);

  gtk_clipboard_request_rich_text(gobj(), buffer->gobj(),
      &SignalProxy_RichTextReceived_gtk_callback, slot_copy);
}

void Clipboard::request_uris(const SlotUrisReceived& slot)
{
  // Create a copy of the slot. A pointer to this will be passed through the callback's data parameter.
  auto slot_copy = new SlotUrisReceived(slot);

  gtk_clipboard_request_uris(gobj(), &SignalProxy_UrisReceived_gtk_callback, slot_copy);
}

void Clipboard::request_image(const SlotImageReceived& slot)
{
  // Create a copy of the slot. A pointer to this will be passed through the callback's data parameter.
  auto slot_copy = new SlotImageReceived(slot);

  gtk_clipboard_request_image(gobj(),
      &SignalProxy_ImageReceived_gtk_callback, slot_copy);
}

void Clipboard::request_targets(const SlotTargetsReceived& slot)
{
  // Create a copy of the slot. A pointer to this will be passed through the callback's data parameter.
  auto slot_copy = new SlotTargetsReceived(slot);

  gtk_clipboard_request_targets(gobj(), &SignalProxy_TargetsReceived_gtk_callback, slot_copy);
}

SelectionData Clipboard::wait_for_contents(const Glib::ustring& target) const
{
  //gtk_clipboard_wait_for_contents returns a newly-allocated GtkSelectionData, or NULL.
  auto cData = gtk_clipboard_wait_for_contents( const_cast<GtkClipboard*>(gobj()), gdk_atom_intern(target.c_str(), FALSE) );
  return SelectionData(cData, false /* take_copy */);
}

std::vector<Glib::ustring> Clipboard::wait_for_targets() const
{
  GdkAtom* atoms (nullptr);
  int n_targets (0);

  if (!gtk_clipboard_wait_for_targets(const_cast<GtkClipboard*>(gobj()), &atoms, &n_targets))
  {
    n_targets = 0;
  }

  return Glib::ArrayHandler<Glib::ustring, Gdk::AtomUstringTraits>::array_to_vector(atoms, n_targets, Glib::OWNERSHIP_SHALLOW);
}

void Clipboard::set_can_store(const std::vector<TargetEntry>& targets)
{
  gtk_clipboard_set_can_store( gobj(), Glib::ArrayHandler<TargetEntry, TargetEntryTraits>::vector_to_array(targets).data (), targets.size() );
}

void Clipboard::set_can_store()
{
  gtk_clipboard_set_can_store( gobj(), nullptr, 0 /* See C docs */ );
}

std::string Clipboard::wait_for_rich_text(const Glib::RefPtr<TextBuffer>& buffer, std::string& format)
{
  std::string result;

  GdkAtom format_atom = GDK_NONE;
  gsize length = 0;
  guint8* text = gtk_clipboard_wait_for_rich_text(const_cast<GtkClipboard*>(gobj()), buffer->gobj(), &format_atom, &length);
  if(text && length)
  {
    gchar* format_atom_name = gdk_atom_name(format_atom);
    if(format_atom_name)
      format = Glib::make_unique_ptr_gfree(format_atom_name).get(); //This frees the buffer.

    result = std::string((char*)text, length);
    g_free(text);
  }

  return result;
}

} //namespace Gtk
