/* Copyright (C) 2006 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <glibmm/vectorutils.h>
#include <gtkmm/papersize.h>

#include <gtk/gtkunixprint.h>

extern "C"
{
// This Signal Proxy allows the C++ coder to specify a sigc::slot instead of a static function.
static gboolean SignalProxy_Custom_gtk_callback(GtkPrinter* gtk_printer, gpointer data)
{
  const auto the_slot = static_cast<Gtk::SlotPrinterEnumerator*>(data);

  try
  {
    // Create a suitable C++ instance to pass to the C++ method;
    auto printer = Glib::wrap(gtk_printer, true);

    return (*the_slot)(printer);
  }
  catch(...)
  {
    Glib::exception_handlers_invoke();
    return false; // arbitrary default;
  }
}

static void SignalProxy_Custom_gtk_callback_destroy(void* data)
{
  delete static_cast<Gtk::SlotPrinterEnumerator*>(data);
}
} // extern "C"

namespace Gtk
{

bool Printer::equal(const Glib::RefPtr<Printer>& other) const
{
  return (static_cast<bool>(gtk_printer_compare(const_cast<GtkPrinter*>(this->gobj()),
                                                const_cast<GtkPrinter*>(other->gobj()))));
}

void enumerate_printers(const SlotPrinterEnumerator& slot, bool wait)
{
  // Create a copy of the slot. A pointer to this will be passed through the callback's data parameter.
  // It will be deleted when SignalProxy_Custom_gtk_callback_destroy() is called.
  auto slot_copy = new SlotPrinterEnumerator(slot);

  gtk_enumerate_printers(&SignalProxy_Custom_gtk_callback,
                         slot_copy,
                         &SignalProxy_Custom_gtk_callback_destroy,
                         static_cast<int>(wait));
}

} // namespace Gtk
