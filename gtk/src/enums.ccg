/* Copyright (C) 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see <https://www.gnu.org/licenses/>.
 */

#include <gtkmm/enums.h>
#include <gtkmm/settings.h>

// static
GType Glib::Value<Gtk::IconSize>::value_type()
{
  return gtk_icon_size_get_type();
}

namespace Gtk
{

// static
bool IconSize::lookup(IconSize size, int& width, int& height)
{
  return gtk_icon_size_lookup((GtkIconSize) int(size), &width, &height);
}

#ifndef GTKMM_DISABLE_DEPRECATED
G_GNUC_BEGIN_IGNORE_DEPRECATIONS
// static
bool IconSize::lookup(IconSize size, int& width, int& height, const Glib::RefPtr<Gtk::Settings>& settings)
{
  return gtk_icon_size_lookup_for_settings(Glib::unwrap(settings), (GtkIconSize) int(size), &width, &height);
}
G_GNUC_END_IGNORE_DEPRECATIONS
#endif //GTKMM_DISABLE_DEPRECATED

#ifndef GTKMM_DISABLE_DEPRECATED
G_GNUC_BEGIN_IGNORE_DEPRECATIONS
// static
IconSize IconSize::register_new(const Glib::ustring& name, int width, int height)
{
  const int size = gtk_icon_size_register(name.c_str(), width, height);
  return IconSize(size);
}
G_GNUC_END_IGNORE_DEPRECATIONS
#endif //GTKMM_DISABLE_DEPRECATED

#ifndef GTKMM_DISABLE_DEPRECATED
G_GNUC_BEGIN_IGNORE_DEPRECATIONS
// static
void IconSize::register_alias(const Glib::ustring& alias, IconSize target)
{
  gtk_icon_size_register_alias(alias.c_str(), (GtkIconSize) int(target));
}
G_GNUC_END_IGNORE_DEPRECATIONS
#endif //GTKMM_DISABLE_DEPRECATED

#ifndef GTKMM_DISABLE_DEPRECATED
G_GNUC_BEGIN_IGNORE_DEPRECATIONS
// static
IconSize IconSize::from_name(const Glib::ustring& name)
{
  const int size = gtk_icon_size_from_name(name.c_str());
  return IconSize(size);
}
G_GNUC_END_IGNORE_DEPRECATIONS
#endif //GTKMM_DISABLE_DEPRECATED

#ifndef GTKMM_DISABLE_DEPRECATED
G_GNUC_BEGIN_IGNORE_DEPRECATIONS
// static
Glib::ustring IconSize::get_name(IconSize size)
{
  return gtk_icon_size_get_name((GtkIconSize) int(size));
}
G_GNUC_END_IGNORE_DEPRECATIONS
#endif //GTKMM_DISABLE_DEPRECATED

float _gtkmm_align_float_from_enum(Align value)
{
  //Choose the float alignment value appropriate for this human-readable enum value:
  switch(value)
  {
    case ALIGN_START:
      return 0.0; break;
    case ALIGN_CENTER:
      return 0.5; break;
    case ALIGN_END:
      return 1.0; break;
    default:
      return _gtkmm_align_float_from_enum(ALIGN_START); break;
  }
}

} //namespace Gtk
