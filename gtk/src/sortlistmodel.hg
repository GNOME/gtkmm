/* Copyright (C) 2020 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */

_CONFIGINCLUDE(gtkmmconfig.h)

#include <giomm/listmodel.h>
#include <gtkmm/sorter.h>
#include <gtk/gtk.h>

_DEFS(gtkmm,gtk)
_PINCLUDE(glibmm/private/object_p.h)

namespace Gtk
{

/** A list model that sorts its items.
 *
 * %Gtk::SortListModel is a list model that takes a list model and
 * sorts its elements according to a Gtk::Sorter.
 *
 * The model can be set up to do incremental sorting, so that
 * sorting long lists doesn't block the UI. See set_incremental()
 * for details.
 *
 * %Gtk::SortListModel is a generic model and because of that it
 * cannot take advantage of any external knowledge when sorting.
 * If you run into performance issues with %Gtk::SortListModel, it
 * is strongly recommended that you write your own sorting list
 * model.
 *
 * @see Gio::ListModel, Gtk::Sorter
 * @newin{3,98}
 */
class GTKMM_API SortListModel : public Glib::Object, public Gio::ListModel
{
  _CLASS_GOBJECT(SortListModel, GtkSortListModel, GTK_SORT_LIST_MODEL, Glib::Object, GObject, , , GTKMM_API)
  _IMPLEMENTS_INTERFACE(Gio::ListModel)
  _STRUCT_NOT_HIDDEN

protected:
  _WRAP_CTOR(SortListModel(const Glib::RefPtr<Gio::ListModel>& model, const Glib::RefPtr<Sorter>& sorter), gtk_sort_list_model_new)

public:
  _WRAP_CREATE(const Glib::RefPtr<Gio::ListModel>& model, const Glib::RefPtr<Sorter>& sorter)

  _WRAP_METHOD(void set_sorter(const Glib::RefPtr<Sorter>& sorter), gtk_sort_list_model_set_sorter)
  _WRAP_METHOD(Glib::RefPtr<Sorter> get_sorter(), gtk_sort_list_model_get_sorter, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Sorter> get_sorter() const, gtk_sort_list_model_get_sorter, refreturn, constversion)

  _WRAP_METHOD(void set_model(const Glib::RefPtr<Gio::ListModel>& model), gtk_sort_list_model_set_model)
  _WRAP_METHOD(Glib::RefPtr<Gio::ListModel> get_model(), gtk_sort_list_model_get_model, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Gio::ListModel> get_model() const, gtk_sort_list_model_get_model, refreturn, constversion)

  _WRAP_METHOD(void set_incremental(bool incremental = true), gtk_sort_list_model_set_incremental)
  _WRAP_METHOD(bool get_incremental() const, gtk_sort_list_model_get_incremental)

  _WRAP_METHOD(guint get_pending() const, gtk_sort_list_model_get_pending)

  _WRAP_PROPERTY("incremental", bool)
  _WRAP_PROPERTY("model", Glib::RefPtr<Gio::ListModel>)
  _WRAP_PROPERTY("pending", guint)
  _WRAP_PROPERTY("sorter", Glib::RefPtr<Sorter>)
};

} // namespace Gtk
