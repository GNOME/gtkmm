/* Copyright (C) 2003 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see <https://www.gnu.org/licenses/>.
 */

#include <glibmm/vectorutils.h>

#include <gtk/gtk.h>
#include <gtkmm/window.h>
#include <glibmm/init.h>
#include <giomm/init.h>
#include <pangomm/wrap_init.h>
#ifdef GTKMM_ATKMM_ENABLED
#include <atkmm/wrap_init.h>
#endif //GTKMM_ATKMM_ENABLED
#include <gdkmm/wrap_init.h>
#include <gtkmm/wrap_init.h>

namespace
{

static void init_gtkmm_internals()
{
  static bool init_done = false;

  if(!init_done)
  {
    Glib::init();
    Gio::init();

    // Populate the map of GTypes to C++ wrap_new() functions.
    Pango::wrap_init();
#ifdef GTKMM_ATKMM_ENABLED
    Atk::wrap_init();
#endif //GTKMM_ATKMM_ENABLED
    Gdk::wrap_init();
    Gtk::wrap_init();

    init_done = true;
  }
}

} // anonymous namespace

namespace Gtk
{

const Glib::Class& Application::custom_class_init()
{
  init_gtkmm_internals();
  return application_class_.init();
}

Application::Application(const Glib::ustring& application_id, Gio::ApplicationFlags flags)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  //Note that GApplication complains about "" but allows nullptr, so we avoid passing "".
  Glib::ObjectBase(nullptr),
  Gio::Application(Glib::ConstructParams(custom_class_init(), "application_id", (application_id.empty() ? nullptr : application_id.c_str()), "flags", GApplicationFlags(flags), nullptr)),
  m_argc(0),
  m_argv(nullptr)
{
  gtk_init(nullptr, nullptr);
}

Application::Application(int& argc, char**& argv, const Glib::ustring& application_id, Gio::ApplicationFlags flags)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  //Note that GApplication complains about "" but allows nullptr, so we avoid passing "".
  Glib::ObjectBase(nullptr),
  Gio::Application(Glib::ConstructParams(custom_class_init(), "application_id", (application_id.empty() ? nullptr : application_id.c_str()), "flags", GApplicationFlags(flags), nullptr)),
  m_argc(argc),
  m_argv(argv)
{
  gtk_init(&argc, &argv);
}

Glib::RefPtr<Application> Application::create(const Glib::ustring& application_id, Gio::ApplicationFlags flags)
{
  return Glib::RefPtr<Application>( new Application(application_id, flags) );
}

Glib::RefPtr<Application> Application::create(int& argc, char**& argv, const Glib::ustring& application_id, Gio::ApplicationFlags flags)
{
  return Glib::RefPtr<Application>( new Application(argc, argv, application_id, flags) );
}

void Application::on_window_hide(Window* window)
{
  //Tell GtkApplication to forget the window.
  //This can cause run() to return, if it is the last window.
  //Otherwise, GtkApplication waits for the window to be _destroyed_,
  //which is just not something that it should care about:
  //See https://bugzilla.gnome.org/show_bug.cgi?id=639931
  if(window && window->get_application()) //We check that it's still in an application anyway.
    remove_window(*window);
}

void Application::add_window(Window& window)
{
  //Respond to window hiding, not destruction:
  //See https://bugzilla.gnome.org/show_bug.cgi?id=639931
  window.signal_hide().connect(
    sigc::bind(
      sigc::mem_fun(*this, &Application::on_window_hide),
      &window));

  gtk_application_add_window(gobj(), (window).gobj());
}

int Application::run(int argc, char** argv)
{
  return Gio::Application::run(argc, argv);
}

int Application::run(Window& window, int argc, char** argv)
{
  //We cannot add and show the window until the GApplication::activate signal
  //has been emitted, or we will crash because the application has not been
  //registered. (At least if window is an ApplicationWindow.)
  signal_activate().connect(
    sigc::bind(
      sigc::mem_fun(*this, &Application::on_activate_add_and_show_main_window),
      &window));

  const auto result = Gio::Application::run(argc, argv);
  return result;
}


int Application::run(Window& window)
{
  //We cannot add and show the window until the GApplication::activate signal
  //has been emitted, or we will crash because the application has not been
  //registered. (At least if window is an ApplicationWindow.)
  signal_activate().connect(
    sigc::bind(
      sigc::mem_fun(*this, &Application::on_activate_add_and_show_main_window),
      &window));

  const auto result = Gio::Application::run(m_argc, m_argv);
  return result;
}

int Application::run()
{
  const auto result = Gio::Application::run(m_argc, m_argv);
  return result;
}

void Application::on_activate_add_and_show_main_window(Window* window)
{
  if(window)
  {
    add_window(*window);
    window->show();
  }
}

void Application::set_accel_for_action(const Glib::ustring& detailed_action_name, const Glib::ustring& accel)
{
  std::vector<Glib::ustring> vec;
  vec.push_back(accel);
  set_accels_for_action(detailed_action_name, vec);
}

void Application::unset_accels_for_action(const Glib::ustring& detailed_action_name)
{
  //gtk_application_set_accels_for_action() can take an empty array, but not NULL.
  //See https://bugzilla.gnome.org/show_bug.cgi?id=708905#c10
  std::vector<Glib::ustring> vec;
  set_accels_for_action(detailed_action_name, vec);
}

} // namespace Gtk
