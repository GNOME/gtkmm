/* Copyright (C) 1998-2015 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see <https://www.gnu.org/licenses/>.
 */

#include <vector>

#include <gtkmm/widget.h>

_DEFS(gtkmm,gtk)
_PINCLUDE(glibmm/private/object_p.h)

namespace Gtk
{

class GTKMM_API Window;

/** Limit the effect of grabs
 */
class GTKMM_API WindowGroup : public Glib::Object
{
  _CLASS_GOBJECT(WindowGroup, GtkWindowGroup, GTK_WINDOW_GROUP, Glib::Object, GObject, , , GTKMM_API)

protected:
  _CTOR_DEFAULT()

public:
  _WRAP_CREATE()

  _WRAP_METHOD(void add_window(Window& window), gtk_window_group_add_window)
  _WRAP_METHOD(void remove_window(Window& window), gtk_window_group_remove_window)


#m4 _CONVERSION(`GList*',`std::vector<Window*>',`Glib::ListHandler<Window*>::list_to_vector($3, Glib::OWNERSHIP_SHALLOW)')
  _WRAP_METHOD(std::vector<Window*> list_windows(), gtk_window_group_list_windows)

#m4 _CONVERSION(`GList*',`std::vector<const Window*>',`Glib::ListHandler<const Window*>::list_to_vector($3, Glib::OWNERSHIP_SHALLOW)')
  _WRAP_METHOD(std::vector<const Window*> list_windows() const, gtk_window_group_list_windows)

  _WRAP_METHOD(Widget* get_current_grab(), gtk_window_group_get_current_grab)
  _WRAP_METHOD(const Widget* get_current_grab() const, gtk_window_group_get_current_grab, constversion)

  _WRAP_METHOD(Widget* get_current_grab(const Glib::RefPtr<const Gdk::Device>& device), gtk_window_group_get_current_device_grab)
  _WRAP_METHOD(const Widget* get_current_grab(const Glib::RefPtr<const Gdk::Device>& device) const, gtk_window_group_get_current_device_grab, constversion)
};

} // namespace Gtk
