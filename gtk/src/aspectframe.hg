/* Copyright (C) 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see <https://www.gnu.org/licenses/>.
 */

#include <gtkmm/frame.h>
_DEFS(gtkmm,gtk)
_PINCLUDE(gtkmm/private/frame_p.h)

namespace Gtk
{

/** A frame that constrains its child to a particular aspect ratio.
 *
 * The Gtk::AspectFrame is useful when you want pack a widget so that it can
 * resize but always retains the same aspect ratio.  For instance, one might
 * be drawing a small preview of a larger image. Because it derives from
 * Gtk::Frame, it can draw a label and a frame around the child. The frame
 * will be "shrink-wrapped" to the size of the child.
 *
 * @ingroup Widgets
 * @ingroup Containers
 */
class GTKMM_API AspectFrame : public Frame
{
  _CLASS_GTKOBJECT(AspectFrame,GtkAspectFrame,GTK_ASPECT_FRAME,Gtk::Frame,GtkFrame,,,GTKMM_API)

public:

  /** Constructor to create a new AspectFrame object.
   * @param label Label text.
   * @param xalign Horizontal alignment of the child within the allocation of this
   * AspectFrame.  For possible values, see Gtk::Align.
   * @param yalign Vertical alignment of the child within the allocation of this
   * AspectFrame. For possible values, see Gtk::Align.
   * @param ratio The desired aspect ratio.
   * @param obey_child If <tt>true</tt>, @a ratio  is ignored and the aspect ratio
   * is taken from the requisition of the child.
   */
  _WRAP_CTOR(AspectFrame(const Glib::ustring& label = Glib::ustring(),
    Align xalign = Gtk::ALIGN_CENTER, Align yalign = Gtk::ALIGN_CENTER,
    float ratio = 1.0, bool obey_child = false), gtk_aspect_frame_new)

  /** Constructor to create a new AspectFrame object.
   * @param label Label text.
   * @param xalign Horizontal alignment of the child within the allocation of this
   * AspectFrame.  This ranges from 0.0 (left aligned) to 1.0 (right aligned).
   * @param yalign Vertical alignment of the child within the allocation of this
   * AspectFrame. This ranges from 0.0 (top aligned) to 1.0 (bottom aligned).
   * @param ratio The desired aspect ratio.
   * @param obey_child If <tt>true</tt>, @a ratio  is ignored and the aspect ratio
   * is taken from the requisition of the child.
   */
  _WRAP_CTOR(AspectFrame(const Glib::ustring& label,
    float xalign, float yalign,
    float ratio = 1.0, bool obey_child = false), gtk_aspect_frame_new)

  //TODO: Is "obey_child = true" a good default?
  /** Set the properties of this AspectFrame.
   * @param xalign Horizontal alignment of the child within the allocation of this
   * AspectFrame.  This ranges from 0.0 (left aligned) to 1.0 (right aligned).
   * @param yalign Vertical alignment of the child within the allocation of this
   * AspectFrame.  This ranges from 0.0 (top aligned) to 1.0 (bottom aligned).
   * @param ratio The desired aspect ratio.
   * @param obey_child If <tt>true</tt>, @a ratio  is ignored and the aspect ratio
   * is taken from the requisition of the child.
   */
  _WRAP_METHOD(void set(float xalign, float yalign, float ratio, bool obey_child = true), gtk_aspect_frame_set)

  /** Set the properties of this AspectFrame.
   * @param xalign Horizontal alignment of the child within the allocation of this
   * AspectFrame.  For possible values, see Gtk::Align.
   * @param yalign Vertical alignment of the child within the allocation of this
   * AspectFrame.  For possible values, see Gtk::Align.
   * @param ratio The desired aspect ratio.
   * @param obey_child If <tt>true</tt>, @a ratio  is ignored and the aspect ratio
   * is taken from the requisition of the child.
   */
  _WRAP_METHOD(void set(Align xalign, Align yalign, float ratio, bool obey_child = true), gtk_aspect_frame_set)

  _WRAP_PROPERTY("xalign", float)
  _WRAP_PROPERTY("yalign", float)
  _WRAP_PROPERTY("ratio", float)
  _WRAP_PROPERTY("obey-child", bool)
};

} //namespace Gtk
