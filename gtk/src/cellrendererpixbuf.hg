/* Copyright (C) 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see <https://www.gnu.org/licenses/>.
 */

#include <gtkmm/cellrenderer.h>
#include <glibmm/value.h>
#include <giomm/icon.h>
_DEFS(gtkmm,gtk)
_PINCLUDE(gtkmm/private/cellrenderer_p.h)

extern "C"
{
GType cairo_gobject_surface_get_type();
}

namespace Glib
{
//TODO: If we decide to allow adding ABI to gtkmm-3, make this specialization
// more like the one in gtkmm-4, gdk/gdkmm/value_cairo.h.
/** Specialization of Glib::Value<> for Cairo::RefPtr<Cairo::Surface>.
 * Needed for Gtk::CellRendererPixbuf::property_surface().
 */
template <>
class GTKMM_API Value<::Cairo::RefPtr<::Cairo::Surface>> : public ValueBase_Boxed
{
public:
  using T = ::Cairo::Surface;
  using CppType = ::Cairo::RefPtr<T>;
  using CType = T::cobject;

  static GType value_type() { return cairo_gobject_surface_get_type(); }

  void set(const CppType& data) { set_boxed(data->cobj()); }

  CppType get() const
  {
    CType* CObj = static_cast<CType*>(get_boxed());
    T* CppObj = new T(CObj, false); // false == take reference
    return CppType(CppObj);
  }
};

} // namespace Glib

namespace Gtk
{

/** Renders a pixbuf in a cell.
 * A CellRendererPixbuf can be used to render an image in a cell. It allows you to render either a
 * given Pixbuf (set via the pixbuf property) or a stock icon (set via the stock_id property).
 *
 * To support the tree view, CellRendererPixbuf also supports rendering two alternative pixbufs, when
 * the is_expanded property is true. If the is_expanded property is true and the pixbuf_expander_open
 * property is set to a pixbuf, it renders that pixbuf. If the is_expanded property is false and the *
 * pixbuf_expander_closed property is set to a pixbuf, it renders that one.
 *
 * @ingroup TreeView
 */
class GTKMM_API CellRendererPixbuf : public CellRenderer
{
  _CLASS_GTKOBJECT(CellRendererPixbuf,GtkCellRendererPixbuf,GTK_CELL_RENDERER_PIXBUF,Gtk::CellRenderer,GtkCellRenderer,,,GTKMM_API)
public:

  _CTOR_DEFAULT

  _WRAP_PROPERTY("pixbuf", Glib::RefPtr<Gdk::Pixbuf>)
  _WRAP_PROPERTY("pixbuf_expander_open", Glib::RefPtr<Gdk::Pixbuf>)
  _WRAP_PROPERTY("pixbuf_expander_closed", Glib::RefPtr<Gdk::Pixbuf>)
  _WRAP_PROPERTY("stock_id", Glib::ustring, deprecated "Use property_icon_name() instead.")
  _WRAP_PROPERTY("stock_size", guint)
  _WRAP_PROPERTY("stock_detail", Glib::ustring)
  _WRAP_PROPERTY("icon-name", Glib::ustring)
  _WRAP_PROPERTY("follow-state", bool, deprecated "Cell renderers always follow state.")
  _WRAP_PROPERTY("gicon", Glib::RefPtr<Gio::Icon>)
  _WRAP_PROPERTY("surface", ::Cairo::RefPtr< ::Cairo::Surface>)

  Glib::PropertyProxy_Base _property_renderable() override;
};

} //namespace Gtk
