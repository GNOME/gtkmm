;; From GtkAboutDialog

(define-signal activate-link
  (of-object "GtkAboutDialog")
  (return-type "gboolean")
  (flags "Run Last")
  (parameters
    '("const-gchar*" "p0")
  )
)

(define-property program-name
  (of-object "GtkAboutDialog")
  (prop-type "GParamString")
  (docs "The name of the program. If this is not set, it defaults to g_get_application_name()")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property version
  (of-object "GtkAboutDialog")
  (prop-type "GParamString")
  (docs "The version of the program")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property copyright
  (of-object "GtkAboutDialog")
  (prop-type "GParamString")
  (docs "Copyright information for the program")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property comments
  (of-object "GtkAboutDialog")
  (prop-type "GParamString")
  (docs "Comments about the program")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property website
  (of-object "GtkAboutDialog")
  (prop-type "GParamString")
  (docs "The URL for the link to the website of the program")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property website-label
  (of-object "GtkAboutDialog")
  (prop-type "GParamString")
  (docs "The label for the link to the website of the program")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property license
  (of-object "GtkAboutDialog")
  (prop-type "GParamString")
  (docs "The license of the program")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property system-information
  (of-object "GtkAboutDialog")
  (prop-type "GParamString")
  (docs "Information about the system on which the program is running")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property authors
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoxed")
  (docs "List of authors of the program")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property documenters
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoxed")
  (docs "List of people documenting the program")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property translator-credits
  (of-object "GtkAboutDialog")
  (prop-type "GParamString")
  (docs "Credits to the translators. This string should be marked as translatable")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property artists
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoxed")
  (docs "List of people who have contributed artwork to the program")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property logo
  (of-object "GtkAboutDialog")
  (prop-type "GParamObject")
  (docs "A logo for the about box.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property logo-icon-name
  (of-object "GtkAboutDialog")
  (prop-type "GParamString")
  (docs "A named icon to use as the logo for the about box.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property wrap-license
  (of-object "GtkAboutDialog")
  (prop-type "GParamBoolean")
  (docs "Whether to wrap the license text.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property license-type
  (of-object "GtkAboutDialog")
  (prop-type "GParamEnum")
  (docs "The license type of the program")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_LICENSE_UNKNOWN")
)

;; From GtkAccessible

(define-property accessible-role
  (of-object "GtkAccessible")
  (prop-type "GParamEnum")
  (docs "The role of the accessible object")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_ACCESSIBLE_ROLE_NONE")
)

;; From GtkActionable

(define-property action-name
  (of-object "GtkActionable")
  (prop-type "GParamString")
  (docs "The name of the associated action, like “app.quit”")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property action-target
  (of-object "GtkActionable")
  (prop-type "GParamVariant")
  (docs "The parameter for action invocations")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkActionBar

(define-property revealed
  (of-object "GtkActionBar")
  (prop-type "GParamBoolean")
  (docs "Controls whether the action bar shows its contents or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

;; From GtkAdjustment

(define-signal changed
  (of-object "GtkAdjustment")
  (return-type "void")
  (flags "Run First, No Recurse")
)

(define-signal value-changed
  (of-object "GtkAdjustment")
  (return-type "void")
  (flags "Run First, No Recurse")
)

(define-property value
  (of-object "GtkAdjustment")
  (prop-type "GParamDouble")
  (docs "The value of the adjustment")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property lower
  (of-object "GtkAdjustment")
  (prop-type "GParamDouble")
  (docs "The minimum value of the adjustment")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property upper
  (of-object "GtkAdjustment")
  (prop-type "GParamDouble")
  (docs "The maximum value of the adjustment")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property step-increment
  (of-object "GtkAdjustment")
  (prop-type "GParamDouble")
  (docs "The step increment of the adjustment")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property page-increment
  (of-object "GtkAdjustment")
  (prop-type "GParamDouble")
  (docs "The page increment of the adjustment")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property page-size
  (of-object "GtkAdjustment")
  (prop-type "GParamDouble")
  (docs "The page size of the adjustment")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

;; From GtkAlternativeTrigger

(define-property first
  (of-object "GtkAlternativeTrigger")
  (prop-type "GParamObject")
  (docs "The first trigger to check")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property second
  (of-object "GtkAlternativeTrigger")
  (prop-type "GParamObject")
  (docs "The second trigger to check")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From GtkAppChooser

(define-property content-type
  (of-object "GtkAppChooser")
  (prop-type "GParamString")
  (docs "The content type used by the open with object")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "")
)

;; From GtkAppChooserButton

(define-signal changed
  (of-object "GtkAppChooserButton")
  (return-type "void")
  (flags "Run Last")
)

(define-signal custom-item-activated
  (of-object "GtkAppChooserButton")
  (return-type "void")
  (flags "Run First")
  (detailed #t)
  (parameters
    '("const-gchar*" "p0")
  )
)

(define-property show-dialog-item
  (of-object "GtkAppChooserButton")
  (prop-type "GParamBoolean")
  (docs "Whether the combobox should include an item that triggers a GtkAppChooserDialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property show-default-item
  (of-object "GtkAppChooserButton")
  (prop-type "GParamBoolean")
  (docs "Whether the combobox should show the default application on top")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property heading
  (of-object "GtkAppChooserButton")
  (prop-type "GParamString")
  (docs "The text to show at the top of the dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property modal
  (of-object "GtkAppChooserButton")
  (prop-type "GParamBoolean")
  (docs "Whether the dialog should be modal")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

;; From GtkAppChooserDialog

(define-property gfile
  (of-object "GtkAppChooserDialog")
  (prop-type "GParamObject")
  (docs "The GFile used by the app chooser dialog")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property heading
  (of-object "GtkAppChooserDialog")
  (prop-type "GParamString")
  (docs "The text to show at the top of the dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

;; From GtkAppChooserWidget

(define-signal application-selected
  (of-object "GtkAppChooserWidget")
  (return-type "void")
  (flags "Run First")
  (parameters
    '("GAppInfo*" "p0")
  )
)

(define-signal application-activated
  (of-object "GtkAppChooserWidget")
  (return-type "void")
  (flags "Run First")
  (parameters
    '("GAppInfo*" "p0")
  )
)

(define-property show-default
  (of-object "GtkAppChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget should show the default application")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property show-recommended
  (of-object "GtkAppChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget should show recommended applications")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property show-fallback
  (of-object "GtkAppChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget should show fallback applications")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property show-other
  (of-object "GtkAppChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget should show other applications")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property show-all
  (of-object "GtkAppChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget should show all applications")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property default-text
  (of-object "GtkAppChooserWidget")
  (prop-type "GParamString")
  (docs "The default text appearing when there are no applications")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

;; From GtkApplication

(define-signal window-added
  (of-object "GtkApplication")
  (return-type "void")
  (flags "Run First")
  (parameters
    '("GtkWindow*" "p0")
  )
)

(define-signal window-removed
  (of-object "GtkApplication")
  (return-type "void")
  (flags "Run First")
  (parameters
    '("GtkWindow*" "p0")
  )
)

(define-signal query-end
  (of-object "GtkApplication")
  (return-type "void")
  (flags "Run First")
)

(define-property register-session
  (of-object "GtkApplication")
  (prop-type "GParamBoolean")
  (docs "Register with the session manager")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property screensaver-active
  (of-object "GtkApplication")
  (prop-type "GParamBoolean")
  (docs "Whether the screensaver is active")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property menubar
  (of-object "GtkApplication")
  (prop-type "GParamObject")
  (docs "The GMenuModel for the menubar")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property active-window
  (of-object "GtkApplication")
  (prop-type "GParamObject")
  (docs "The window which most recently had focus")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From GtkApplicationWindow

(define-property show-menubar
  (of-object "GtkApplicationWindow")
  (prop-type "GParamBoolean")
  (docs "TRUE if the window should show a menubar at the top of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkAspectFrame

(define-property xalign
  (of-object "GtkAspectFrame")
  (prop-type "GParamFloat")
  (docs "X alignment of the child")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0.5")
)

(define-property yalign
  (of-object "GtkAspectFrame")
  (prop-type "GParamFloat")
  (docs "Y alignment of the child")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0.5")
)

(define-property ratio
  (of-object "GtkAspectFrame")
  (prop-type "GParamFloat")
  (docs "Aspect ratio if obey_child is FALSE")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "1")
)

(define-property obey-child
  (of-object "GtkAspectFrame")
  (prop-type "GParamBoolean")
  (docs "Force aspect ratio to match that of the frame’s child")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property child
  (of-object "GtkAspectFrame")
  (prop-type "GParamObject")
  (docs "The child widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkAssistant

(define-signal close
  (of-object "GtkAssistant")
  (return-type "void")
  (flags "Run Last")
)

(define-signal cancel
  (of-object "GtkAssistant")
  (return-type "void")
  (flags "Run Last")
)

(define-signal prepare
  (of-object "GtkAssistant")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkWidget*" "p0")
  )
)

(define-signal apply
  (of-object "GtkAssistant")
  (return-type "void")
  (flags "Run Last")
)

(define-signal escape
  (of-object "GtkAssistant")
  (return-type "void")
  (flags "Run First, Action")
)

(define-property use-header-bar
  (of-object "GtkAssistant")
  (prop-type "GParamInt")
  (docs "Use Header Bar for actions.")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "-1")
)

(define-property pages
  (of-object "GtkAssistant")
  (prop-type "GParamObject")
  (docs "The pages of the assistant.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From GtkAssistantPage

(define-property child
  (of-object "GtkAssistantPage")
  (prop-type "GParamObject")
  (docs "The content the assistant page")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property page-type
  (of-object "GtkAssistantPage")
  (prop-type "GParamEnum")
  (docs "The type of the assistant page")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_ASSISTANT_PAGE_CONTENT")
)

(define-property title
  (of-object "GtkAssistantPage")
  (prop-type "GParamString")
  (docs "The title of the assistant page")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property complete
  (of-object "GtkAssistantPage")
  (prop-type "GParamBoolean")
  (docs "Whether all required fields on the page have been filled out")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkBoolFilter

(define-property expression
  (of-object "GtkBoolFilter")
  (prop-type "GtkParamSpecExpression")
  (docs "Expression to evaluate")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property invert
  (of-object "GtkBoolFilter")
  (prop-type "GParamBoolean")
  (docs "If the expression result should be inverted")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkBox

(define-property spacing
  (of-object "GtkBox")
  (prop-type "GParamInt")
  (docs "The amount of space between children")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property homogeneous
  (of-object "GtkBox")
  (prop-type "GParamBoolean")
  (docs "Whether the children should all be the same size")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property baseline-position
  (of-object "GtkBox")
  (prop-type "GParamEnum")
  (docs "The position of the baseline aligned widgets if extra space is available")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_BASELINE_POSITION_CENTER")
)

;; From GtkBoxLayout

(define-property homogeneous
  (of-object "GtkBoxLayout")
  (prop-type "GParamBoolean")
  (docs "Distribute space homogeneously")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property spacing
  (of-object "GtkBoxLayout")
  (prop-type "GParamInt")
  (docs "Spacing between widgets")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property baseline-position
  (of-object "GtkBoxLayout")
  (prop-type "GParamEnum")
  (docs "The position of the baseline aligned widgets if extra space is available")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_BASELINE_POSITION_CENTER")
)

;; From GtkBuilder

(define-property current-object
  (of-object "GtkBuilder")
  (prop-type "GParamObject")
  (docs "The object the builder is evaluating for")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property scope
  (of-object "GtkBuilder")
  (prop-type "GParamObject")
  (docs "The scope the builder is operating in")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property translation-domain
  (of-object "GtkBuilder")
  (prop-type "GParamString")
  (docs "The translation domain used by gettext")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

;; From GtkButton

(define-signal activate
  (of-object "GtkButton")
  (return-type "void")
  (flags "Run First, Action")
)

(define-signal clicked
  (of-object "GtkButton")
  (return-type "void")
  (flags "Run First, Action")
)

(define-property label
  (of-object "GtkButton")
  (prop-type "GParamString")
  (docs "Text of the label widget inside the button, if the button contains a label widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property has-frame
  (of-object "GtkButton")
  (prop-type "GParamBoolean")
  (docs "Whether the button has a frame")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property use-underline
  (of-object "GtkButton")
  (prop-type "GParamBoolean")
  (docs "If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property icon-name
  (of-object "GtkButton")
  (prop-type "GParamString")
  (docs "The name of the icon used to automatically populate the button")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property child
  (of-object "GtkButton")
  (prop-type "GParamObject")
  (docs "The child widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkCalendar

(define-signal day-selected
  (of-object "GtkCalendar")
  (return-type "void")
  (flags "Run First")
)

(define-signal prev-month
  (of-object "GtkCalendar")
  (return-type "void")
  (flags "Run First")
)

(define-signal next-month
  (of-object "GtkCalendar")
  (return-type "void")
  (flags "Run First")
)

(define-signal prev-year
  (of-object "GtkCalendar")
  (return-type "void")
  (flags "Run First")
)

(define-signal next-year
  (of-object "GtkCalendar")
  (return-type "void")
  (flags "Run First")
)

(define-property year
  (of-object "GtkCalendar")
  (prop-type "GParamInt")
  (docs "The selected year")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "1")
)

(define-property month
  (of-object "GtkCalendar")
  (prop-type "GParamInt")
  (docs "The selected month (as a number between 0 and 11)")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property day
  (of-object "GtkCalendar")
  (prop-type "GParamInt")
  (docs "The selected day (as a number between 1 and 31, or 0 to unselect the currently selected day)")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property show-heading
  (of-object "GtkCalendar")
  (prop-type "GParamBoolean")
  (docs "If TRUE, a heading is displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property show-day-names
  (of-object "GtkCalendar")
  (prop-type "GParamBoolean")
  (docs "If TRUE, day names are displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property show-week-numbers
  (of-object "GtkCalendar")
  (prop-type "GParamBoolean")
  (docs "If TRUE, week numbers are displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkCheckButton

(define-signal toggled
  (of-object "GtkCheckButton")
  (return-type "void")
  (flags "Run First")
)

(define-property active
  (of-object "GtkCheckButton")
  (prop-type "GParamBoolean")
  (docs "If the toggle button should be pressed in")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property group
  (of-object "GtkCheckButton")
  (prop-type "GParamObject")
  (docs "The check button whose group this widget belongs to.")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property label
  (of-object "GtkCheckButton")
  (prop-type "GParamString")
  (docs "Text of the label widget inside the button, if the button contains a label widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property inconsistent
  (of-object "GtkCheckButton")
  (prop-type "GParamBoolean")
  (docs "If the check button is in an “in between” state")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property use-underline
  (of-object "GtkCheckButton")
  (prop-type "GParamBoolean")
  (docs "If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkCellArea

(define-signal apply-attributes
  (of-object "GtkCellArea")
  (return-type "void")
  (flags "Run First")
  (parameters
    '("GtkTreeModel*" "p0")
    '("GtkTreeIter*" "p1")
    '("gboolean" "p2")
    '("gboolean" "p3")
  )
)

(define-signal add-editable
  (of-object "GtkCellArea")
  (return-type "void")
  (flags "Run First")
  (parameters
    '("GtkCellRenderer*" "p0")
    '("GtkCellEditable*" "p1")
    '("GdkRectangle*" "p2")
    '("const-gchar*" "p3")
  )
)

(define-signal remove-editable
  (of-object "GtkCellArea")
  (return-type "void")
  (flags "Run First")
  (parameters
    '("GtkCellRenderer*" "p0")
    '("GtkCellEditable*" "p1")
  )
)

(define-signal focus-changed
  (of-object "GtkCellArea")
  (return-type "void")
  (flags "Run First")
  (parameters
    '("GtkCellRenderer*" "p0")
    '("const-gchar*" "p1")
  )
)

(define-property focus-cell
  (of-object "GtkCellArea")
  (prop-type "GParamObject")
  (docs "The cell which currently has focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property edited-cell
  (of-object "GtkCellArea")
  (prop-type "GParamObject")
  (docs "The cell which is currently being edited")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property edit-widget
  (of-object "GtkCellArea")
  (prop-type "GParamObject")
  (docs "The widget currently editing the edited cell")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From GtkCellAreaBox

(define-property spacing
  (of-object "GtkCellAreaBox")
  (prop-type "GParamInt")
  (docs "Space which is inserted between cells")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

;; From GtkCellAreaContext

(define-property area
  (of-object "GtkCellAreaContext")
  (prop-type "GParamObject")
  (docs "The Cell Area this context was created for")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property minimum-width
  (of-object "GtkCellAreaContext")
  (prop-type "GParamInt")
  (docs "Minimum cached width")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "-1")
)

(define-property natural-width
  (of-object "GtkCellAreaContext")
  (prop-type "GParamInt")
  (docs "Minimum cached width")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "-1")
)

(define-property minimum-height
  (of-object "GtkCellAreaContext")
  (prop-type "GParamInt")
  (docs "Minimum cached height")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "-1")
)

(define-property natural-height
  (of-object "GtkCellAreaContext")
  (prop-type "GParamInt")
  (docs "Minimum cached height")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "-1")
)

;; From GtkCellEditable

(define-signal editing-done
  (of-object "GtkCellEditable")
  (return-type "void")
  (flags "Run Last")
)

(define-signal remove-widget
  (of-object "GtkCellEditable")
  (return-type "void")
  (flags "Run Last")
)

(define-property editing-canceled
  (of-object "GtkCellEditable")
  (prop-type "GParamBoolean")
  (docs "Indicates that editing has been canceled")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkCellLayout

;; From GtkCellRenderer

(define-signal editing-canceled
  (of-object "GtkCellRenderer")
  (return-type "void")
  (flags "Run First")
)

(define-signal editing-started
  (of-object "GtkCellRenderer")
  (return-type "void")
  (flags "Run First")
  (parameters
    '("GtkCellEditable*" "p0")
    '("const-gchar*" "p1")
  )
)

(define-property mode
  (of-object "GtkCellRenderer")
  (prop-type "GParamEnum")
  (docs "Editable mode of the CellRenderer")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_CELL_RENDERER_MODE_INERT")
)

(define-property visible
  (of-object "GtkCellRenderer")
  (prop-type "GParamBoolean")
  (docs "Display the cell")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property sensitive
  (of-object "GtkCellRenderer")
  (prop-type "GParamBoolean")
  (docs "Display the cell sensitive")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property xalign
  (of-object "GtkCellRenderer")
  (prop-type "GParamFloat")
  (docs "The x-align")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0.5")
)

(define-property yalign
  (of-object "GtkCellRenderer")
  (prop-type "GParamFloat")
  (docs "The y-align")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0.5")
)

(define-property xpad
  (of-object "GtkCellRenderer")
  (prop-type "GParamUInt")
  (docs "The xpad")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property ypad
  (of-object "GtkCellRenderer")
  (prop-type "GParamUInt")
  (docs "The ypad")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property width
  (of-object "GtkCellRenderer")
  (prop-type "GParamInt")
  (docs "The fixed width")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property height
  (of-object "GtkCellRenderer")
  (prop-type "GParamInt")
  (docs "The fixed height")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property is-expander
  (of-object "GtkCellRenderer")
  (prop-type "GParamBoolean")
  (docs "Row has children")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property is-expanded
  (of-object "GtkCellRenderer")
  (prop-type "GParamBoolean")
  (docs "Row is an expander row, and is expanded")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property cell-background
  (of-object "GtkCellRenderer")
  (prop-type "GParamString")
  (docs "Cell background color as a string")
  (readable #f)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property cell-background-rgba
  (of-object "GtkCellRenderer")
  (prop-type "GParamBoxed")
  (docs "Cell background color as a GdkRGBA")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cell-background-set
  (of-object "GtkCellRenderer")
  (prop-type "GParamBoolean")
  (docs "Whether the cell background color is set")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property editing
  (of-object "GtkCellRenderer")
  (prop-type "GParamBoolean")
  (docs "Whether the cell renderer is currently in editing mode")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkCellRendererAccel

(define-signal accel-edited
  (of-object "GtkCellRendererAccel")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("const-gchar*" "p0")
    '("guint" "p1")
    '("GdkModifierType" "p2")
    '("guint" "p3")
  )
)

(define-signal accel-cleared
  (of-object "GtkCellRendererAccel")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("const-gchar*" "p0")
  )
)

(define-property accel-key
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamUInt")
  (docs "The keyval of the accelerator")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property accel-mods
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamFlags")
  (docs "The modifier mask of the accelerator")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property keycode
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamUInt")
  (docs "The hardware keycode of the accelerator")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property accel-mode
  (of-object "GtkCellRendererAccel")
  (prop-type "GParamEnum")
  (docs "The type of accelerators")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_CELL_RENDERER_ACCEL_MODE_GTK")
)

;; From GtkCellRendererCombo

(define-signal changed
  (of-object "GtkCellRendererCombo")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("const-gchar*" "p0")
    '("GtkTreeIter*" "p1")
  )
)

(define-property model
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamObject")
  (docs "The model containing the possible values for the combo box")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property text-column
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamInt")
  (docs "A column in the data source model to get the strings from")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property has-entry
  (of-object "GtkCellRendererCombo")
  (prop-type "GParamBoolean")
  (docs "If FALSE, don’t allow to enter strings other than the chosen ones")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

;; From GtkCellRendererProgress

(define-property value
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamInt")
  (docs "Value of the progress bar")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property text
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamString")
  (docs "Text on the progress bar")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property pulse
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamInt")
  (docs "Set this to positive values to indicate that some progress is made, but you don’t know how much.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property text-xalign
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamFloat")
  (docs "The horizontal text alignment, from 0 (left) to 1 (right). Reversed for RTL layouts.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0.5")
)

(define-property text-yalign
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamFloat")
  (docs "The vertical text alignment, from 0 (top) to 1 (bottom).")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0.5")
)

(define-property inverted
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamBoolean")
  (docs "Invert the direction in which the progress bar grows")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkCellRendererText

(define-signal edited
  (of-object "GtkCellRendererText")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("const-gchar*" "p0")
    '("const-gchar*" "p1")
  )
)

(define-property text
  (of-object "GtkCellRendererText")
  (prop-type "GParamString")
  (docs "Text to render")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property markup
  (of-object "GtkCellRendererText")
  (prop-type "GParamString")
  (docs "Marked up text to render")
  (readable #f)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property attributes
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoxed")
  (docs "A list of style attributes to apply to the text of the renderer")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property single-paragraph-mode
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether to keep all text in a single paragraph")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property width-chars
  (of-object "GtkCellRendererText")
  (prop-type "GParamInt")
  (docs "The desired width of the label, in characters")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property max-width-chars
  (of-object "GtkCellRendererText")
  (prop-type "GParamInt")
  (docs "The maximum width of the cell, in characters")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property wrap-width
  (of-object "GtkCellRendererText")
  (prop-type "GParamInt")
  (docs "The width at which the text is wrapped")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property alignment
  (of-object "GtkCellRendererText")
  (prop-type "GParamEnum")
  (docs "How to align the lines")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "PANGO_ALIGN_LEFT")
)

(define-property placeholder-text
  (of-object "GtkCellRendererText")
  (prop-type "GParamString")
  (docs "Text rendered when an editable cell is empty")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property background
  (of-object "GtkCellRendererText")
  (prop-type "GParamString")
  (docs "Background color as a string")
  (readable #f)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property foreground
  (of-object "GtkCellRendererText")
  (prop-type "GParamString")
  (docs "Foreground color as a string")
  (readable #f)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property background-rgba
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoxed")
  (docs "Background color as a GdkRGBA")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property foreground-rgba
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoxed")
  (docs "Foreground color as a GdkRGBA")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property font
  (of-object "GtkCellRendererText")
  (prop-type "GParamString")
  (docs "Font description as a string, e.g. “Sans Italic 12”")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property font-desc
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoxed")
  (docs "Font description as a PangoFontDescription struct")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property family
  (of-object "GtkCellRendererText")
  (prop-type "GParamString")
  (docs "Name of the font family, e.g. Sans, Helvetica, Times, Monospace")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property style
  (of-object "GtkCellRendererText")
  (prop-type "GParamEnum")
  (docs "Font style")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "PANGO_STYLE_NORMAL")
)

(define-property variant
  (of-object "GtkCellRendererText")
  (prop-type "GParamEnum")
  (docs "Font variant")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "PANGO_VARIANT_NORMAL")
)

(define-property weight
  (of-object "GtkCellRendererText")
  (prop-type "GParamInt")
  (docs "Font weight")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "400")
)

(define-property stretch
  (of-object "GtkCellRendererText")
  (prop-type "GParamEnum")
  (docs "Font stretch")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "PANGO_STRETCH_NORMAL")
)

(define-property size
  (of-object "GtkCellRendererText")
  (prop-type "GParamInt")
  (docs "Font size")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property size-points
  (of-object "GtkCellRendererText")
  (prop-type "GParamDouble")
  (docs "Font size in points")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property scale
  (of-object "GtkCellRendererText")
  (prop-type "GParamDouble")
  (docs "Font scaling factor")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "1")
)

(define-property editable
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether the text can be modified by the user")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property strikethrough
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether to strike through the text")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property underline
  (of-object "GtkCellRendererText")
  (prop-type "GParamEnum")
  (docs "Style of underline for this text")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "PANGO_UNDERLINE_NONE")
)

(define-property rise
  (of-object "GtkCellRendererText")
  (prop-type "GParamInt")
  (docs "Offset of text above the baseline (below the baseline if rise is negative)")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property language
  (of-object "GtkCellRendererText")
  (prop-type "GParamString")
  (docs "The language this text is in, as an ISO code. Pango can use this as a hint when rendering the text. If you don’t understand this parameter, you probably don’t need it")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property ellipsize
  (of-object "GtkCellRendererText")
  (prop-type "GParamEnum")
  (docs "The preferred place to ellipsize the string, if the cell renderer does not have enough room to display the entire string")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "PANGO_ELLIPSIZE_NONE")
)

(define-property wrap-mode
  (of-object "GtkCellRendererText")
  (prop-type "GParamEnum")
  (docs "How to break the string into multiple lines, if the cell renderer does not have enough room to display the entire string")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "PANGO_WRAP_CHAR")
)

(define-property background-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the background color")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property foreground-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the foreground color")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property family-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font family")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property style-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font style")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property variant-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font variant")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property weight-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font weight")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property stretch-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font stretch")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property size-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font size")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property scale-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag scales the font size by a factor")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property editable-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects text editability")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property strikethrough-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects strikethrough")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property underline-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects underlining")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property rise-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the rise")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property language-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the language the text is rendered as")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property ellipsize-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the ellipsize mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property align-set
  (of-object "GtkCellRendererText")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the alignment mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkCellRendererToggle

(define-signal toggled
  (of-object "GtkCellRendererToggle")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("const-gchar*" "p0")
  )
)

(define-property activatable
  (of-object "GtkCellRendererToggle")
  (prop-type "GParamBoolean")
  (docs "The toggle button can be activated")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property active
  (of-object "GtkCellRendererToggle")
  (prop-type "GParamBoolean")
  (docs "The toggle state of the button")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property radio
  (of-object "GtkCellRendererToggle")
  (prop-type "GParamBoolean")
  (docs "Draw the toggle button as a radio button")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property inconsistent
  (of-object "GtkCellRendererToggle")
  (prop-type "GParamBoolean")
  (docs "The inconsistent state of the button")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkCellRendererPixbuf

(define-property pixbuf
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamObject")
  (docs "The pixbuf to render")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property pixbuf-expander-open
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamObject")
  (docs "Pixbuf for open expander")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pixbuf-expander-closed
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamObject")
  (docs "Pixbuf for closed expander")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property texture
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamObject")
  (docs "The texture to render")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-size
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamEnum")
  (docs "The GtkIconSize value that specifies the size of the rendered icon")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_ICON_SIZE_INHERIT")
)

(define-property icon-name
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamString")
  (docs "The name of the icon from the icon theme")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property gicon
  (of-object "GtkCellRendererPixbuf")
  (prop-type "GParamObject")
  (docs "The GIcon being displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkCellRendererProgress

(define-property value
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamInt")
  (docs "Value of the progress bar")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property text
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamString")
  (docs "Text on the progress bar")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property pulse
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamInt")
  (docs "Set this to positive values to indicate that some progress is made, but you don’t know how much.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property text-xalign
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamFloat")
  (docs "The horizontal text alignment, from 0 (left) to 1 (right). Reversed for RTL layouts.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0.5")
)

(define-property text-yalign
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamFloat")
  (docs "The vertical text alignment, from 0 (top) to 1 (bottom).")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0.5")
)

(define-property inverted
  (of-object "GtkCellRendererProgress")
  (prop-type "GParamBoolean")
  (docs "Invert the direction in which the progress bar grows")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkCellRendererSpin

(define-property adjustment
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamObject")
  (docs "The adjustment that holds the value of the spin button")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property climb-rate
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamDouble")
  (docs "The acceleration rate when you hold down a button")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property digits
  (of-object "GtkCellRendererSpin")
  (prop-type "GParamUInt")
  (docs "The number of decimal places to display")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

;; From GtkCellRendererSpinner

(define-property active
  (of-object "GtkCellRendererSpinner")
  (prop-type "GParamBoolean")
  (docs "Whether the spinner is active (ie. shown) in the cell")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property pulse
  (of-object "GtkCellRendererSpinner")
  (prop-type "GParamUInt")
  (docs "Pulse of the spinner")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property size
  (of-object "GtkCellRendererSpinner")
  (prop-type "GParamEnum")
  (docs "The GtkIconSize value that specifies the size of the rendered spinner")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_ICON_SIZE_INHERIT")
)

;; From GtkCenterBox

(define-property baseline-position
  (of-object "GtkCenterBox")
  (prop-type "GParamEnum")
  (docs "The position of the baseline aligned widgets if extra space is available")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_BASELINE_POSITION_CENTER")
)

;; From GtkColorButton

(define-signal color-set
  (of-object "GtkColorButton")
  (return-type "void")
  (flags "Run First")
)

(define-property title
  (of-object "GtkColorButton")
  (prop-type "GParamString")
  (docs "The title of the color selection dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "Pick a Color")
)

(define-property show-editor
  (of-object "GtkColorButton")
  (prop-type "GParamBoolean")
  (docs "Whether to show the color editor right away")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property modal
  (of-object "GtkColorButton")
  (prop-type "GParamBoolean")
  (docs "Whether the dialog is modal")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

;; From GtkColorChooser

(define-signal color-activated
  (of-object "GtkColorChooser")
  (return-type "void")
  (flags "Run First")
  (parameters
    '("const-GdkRGBA*" "p0")
  )
)

(define-property rgba
  (of-object "GtkColorChooser")
  (prop-type "GParamBoxed")
  (docs "Current color, as a GdkRGBA")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-alpha
  (of-object "GtkColorChooser")
  (prop-type "GParamBoolean")
  (docs "Whether alpha should be shown")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

;; From GtkColorChooserDialog

(define-property show-editor
  (of-object "GtkColorChooserDialog")
  (prop-type "GParamBoolean")
  (docs "Show editor")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkColumnView

(define-signal activate
  (of-object "GtkColumnView")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("guint" "p0")
  )
)

(define-property columns
  (of-object "GtkColumnView")
  (prop-type "GParamObject")
  (docs "List of columns")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property model
  (of-object "GtkColumnView")
  (prop-type "GParamObject")
  (docs "Model for the items displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-row-separators
  (of-object "GtkColumnView")
  (prop-type "GParamBoolean")
  (docs "Show separators between rows")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property show-column-separators
  (of-object "GtkColumnView")
  (prop-type "GParamBoolean")
  (docs "Show separators between columns")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property sorter
  (of-object "GtkColumnView")
  (prop-type "GParamObject")
  (docs "Sorter with sorting choices of the user")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property single-click-activate
  (of-object "GtkColumnView")
  (prop-type "GParamBoolean")
  (docs "Activate rows on single click")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property reorderable
  (of-object "GtkColumnView")
  (prop-type "GParamBoolean")
  (docs "Whether columns are reorderable")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property enable-rubberband
  (of-object "GtkColumnView")
  (prop-type "GParamBoolean")
  (docs "Allow selecting items by dragging with the mouse")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkColumnViewColumn

(define-property column-view
  (of-object "GtkColumnViewColumn")
  (prop-type "GParamObject")
  (docs "Column view this column is a part of")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property factory
  (of-object "GtkColumnViewColumn")
  (prop-type "GParamObject")
  (docs "Factory for populating list items")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property title
  (of-object "GtkColumnViewColumn")
  (prop-type "GParamString")
  (docs "Title displayed in the header")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property sorter
  (of-object "GtkColumnViewColumn")
  (prop-type "GParamObject")
  (docs "Sorter for sorting items according to this column")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible
  (of-object "GtkColumnViewColumn")
  (prop-type "GParamBoolean")
  (docs "Whether this column is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property header-menu
  (of-object "GtkColumnViewColumn")
  (prop-type "GParamObject")
  (docs "Menu to use on the title of this column")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resizable
  (of-object "GtkColumnViewColumn")
  (prop-type "GParamBoolean")
  (docs "Whether this column is resizable")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property expand
  (of-object "GtkColumnViewColumn")
  (prop-type "GParamBoolean")
  (docs "column gets share of extra width")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property fixed-width
  (of-object "GtkColumnViewColumn")
  (prop-type "GParamInt")
  (docs "Fixed width of this column")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

;; From GtkComboBox

(define-signal changed
  (of-object "GtkComboBox")
  (return-type "void")
  (flags "Run Last")
)

(define-signal move-active
  (of-object "GtkComboBox")
  (return-type "void")
  (flags "Run Last, Action")
  (parameters
    '("GtkScrollType" "p0")
  )
)

(define-signal popup
  (of-object "GtkComboBox")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal popdown
  (of-object "GtkComboBox")
  (return-type "gboolean")
  (flags "Run Last, Action")
)

(define-signal format-entry-text
  (of-object "GtkComboBox")
  (return-type "gchar*")
  (flags "Run Last")
  (parameters
    '("const-gchar*" "p0")
  )
)

(define-property model
  (of-object "GtkComboBox")
  (prop-type "GParamObject")
  (docs "The model for the combo box")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property active
  (of-object "GtkComboBox")
  (prop-type "GParamInt")
  (docs "The item which is currently active")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property has-frame
  (of-object "GtkComboBox")
  (prop-type "GParamBoolean")
  (docs "Whether the combo box draws a frame around the child")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property popup-shown
  (of-object "GtkComboBox")
  (prop-type "GParamBoolean")
  (docs "Whether the combo’s dropdown is shown")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property button-sensitivity
  (of-object "GtkComboBox")
  (prop-type "GParamEnum")
  (docs "Whether the dropdown button is sensitive when the model is empty")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_SENSITIVITY_AUTO")
)

(define-property has-entry
  (of-object "GtkComboBox")
  (prop-type "GParamBoolean")
  (docs "Whether combo box has an entry")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "FALSE")
)

(define-property entry-text-column
  (of-object "GtkComboBox")
  (prop-type "GParamInt")
  (docs "The column in the combo box’s model to associate with strings from the entry if the combo was created with #GtkComboBox:has-entry = %TRUE")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property popup-fixed-width
  (of-object "GtkComboBox")
  (prop-type "GParamBoolean")
  (docs "Whether the popup’s width should be a fixed width matching the allocated width of the combo box")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property id-column
  (of-object "GtkComboBox")
  (prop-type "GParamInt")
  (docs "The column in the combo box’s model that provides string IDs for the values in the model")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property active-id
  (of-object "GtkComboBox")
  (prop-type "GParamString")
  (docs "The value of the id column for the active row")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property child
  (of-object "GtkComboBox")
  (prop-type "GParamObject")
  (docs "The child_widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkConstraint

(define-property target
  (of-object "GtkConstraint")
  (prop-type "GParamObject")
  (docs "The target of the constraint")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property target-attribute
  (of-object "GtkConstraint")
  (prop-type "GParamEnum")
  (docs "The attribute of the target set by the constraint")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "GTK_CONSTRAINT_ATTRIBUTE_NONE")
)

(define-property relation
  (of-object "GtkConstraint")
  (prop-type "GParamEnum")
  (docs "The relation between the source and target attributes")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "GTK_CONSTRAINT_RELATION_EQ")
)

(define-property source
  (of-object "GtkConstraint")
  (prop-type "GParamObject")
  (docs "The source of the constraint")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property source-attribute
  (of-object "GtkConstraint")
  (prop-type "GParamEnum")
  (docs "The attribute of the source widget set by the constraint")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "GTK_CONSTRAINT_ATTRIBUTE_NONE")
)

(define-property multiplier
  (of-object "GtkConstraint")
  (prop-type "GParamDouble")
  (docs "The multiplication factor to be applied to the source attribute")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "1")
)

(define-property constant
  (of-object "GtkConstraint")
  (prop-type "GParamDouble")
  (docs "The constant to be added to the source attribute")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "0")
)

(define-property strength
  (of-object "GtkConstraint")
  (prop-type "GParamInt")
  (docs "The strength of the constraint")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "1001001000")
)

;; From GtkConstraintGuide

(define-property min-width
  (of-object "GtkConstraintGuide")
  (prop-type "GParamInt")
  (docs "Minimum width")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property min-height
  (of-object "GtkConstraintGuide")
  (prop-type "GParamInt")
  (docs "Minimum height")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property nat-width
  (of-object "GtkConstraintGuide")
  (prop-type "GParamInt")
  (docs "Natural width")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property nat-height
  (of-object "GtkConstraintGuide")
  (prop-type "GParamInt")
  (docs "Natural height")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property max-width
  (of-object "GtkConstraintGuide")
  (prop-type "GParamInt")
  (docs "Maximum width")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "2147483647")
)

(define-property max-height
  (of-object "GtkConstraintGuide")
  (prop-type "GParamInt")
  (docs "Maximum height")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "2147483647")
)

(define-property strength
  (of-object "GtkConstraintGuide")
  (prop-type "GParamEnum")
  (docs "The strength to use for natural size")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_CONSTRAINT_STRENGTH_MEDIUM")
)

(define-property name
  (of-object "GtkConstraintGuide")
  (prop-type "GParamString")
  (docs "A name to use in debug message")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

;; From GtkCellView

(define-property model
  (of-object "GtkCellView")
  (prop-type "GParamObject")
  (docs "The model for cell view")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cell-area
  (of-object "GtkCellView")
  (prop-type "GParamObject")
  (docs "The GtkCellArea used to layout cells")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property cell-area-context
  (of-object "GtkCellView")
  (prop-type "GParamObject")
  (docs "The GtkCellAreaContext used to compute the geometry of the cell view")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property draw-sensitive
  (of-object "GtkCellView")
  (prop-type "GParamBoolean")
  (docs "Whether to force cells to be drawn in a sensitive state")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property fit-model
  (of-object "GtkCellView")
  (prop-type "GParamBoolean")
  (docs "Whether to request enough space for every row in the model")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkCssProvider

(define-signal parsing-error
  (of-object "GtkCssProvider")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkCssSection*" "p0")
    '("const-GError*" "p1")
  )
)

;; From GtkDialog

(define-signal response
  (of-object "GtkDialog")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("gint" "p0")
  )
)

(define-signal close
  (of-object "GtkDialog")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-property use-header-bar
  (of-object "GtkDialog")
  (prop-type "GParamInt")
  (docs "Use Header Bar for actions.")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "-1")
)

;; From GtkDirectoryList

(define-property attributes
  (of-object "GtkDirectoryList")
  (prop-type "GParamString")
  (docs "Attributes to query")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property error
  (of-object "GtkDirectoryList")
  (prop-type "GParamBoxed")
  (docs "Error encountered while loading files")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property file
  (of-object "GtkDirectoryList")
  (prop-type "GParamObject")
  (docs "The file to query")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property io-priority
  (of-object "GtkDirectoryList")
  (prop-type "GParamInt")
  (docs "Priority used when loading")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property loading
  (of-object "GtkDirectoryList")
  (prop-type "GParamBoolean")
  (docs "TRUE if files are being loaded")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property monitored
  (of-object "GtkDirectoryList")
  (prop-type "GParamBoolean")
  (docs "TRUE if the directory is monitored for changes")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

;; From GtkDragIcon

(define-property child
  (of-object "GtkDragIcon")
  (prop-type "GParamObject")
  (docs "The widget to display as drag icon.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkDragSource

(define-signal prepare
  (of-object "GtkDragSource")
  (return-type "GdkContentProvider*")
  (flags "Run Last")
  (parameters
    '("gdouble" "p0")
    '("gdouble" "p1")
  )
)

(define-signal drag-begin
  (of-object "GtkDragSource")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GdkDrag*" "p0")
  )
)

(define-signal drag-end
  (of-object "GtkDragSource")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GdkDrag*" "p0")
    '("gboolean" "p1")
  )
)

(define-signal drag-cancel
  (of-object "GtkDragSource")
  (return-type "gboolean")
  (flags "Run Last")
  (parameters
    '("GdkDrag*" "p0")
    '("GdkDragCancelReason" "p1")
  )
)

(define-property content
  (of-object "GtkDragSource")
  (prop-type "GParamObject")
  (docs "The content provider for the dragged data")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property actions
  (of-object "GtkDragSource")
  (prop-type "GParamFlags")
  (docs "Supported actions")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GDK_ACTION_COPY")
)

;; From GtkDrawingArea

(define-signal resize
  (of-object "GtkDrawingArea")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("gint" "p0")
    '("gint" "p1")
  )
)

(define-property content-width
  (of-object "GtkDrawingArea")
  (prop-type "GParamInt")
  (docs "Desired width for displayed content")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property content-height
  (of-object "GtkDrawingArea")
  (prop-type "GParamInt")
  (docs "Desired height for displayed content")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

;; From GtkDropControllerMotion

(define-signal enter
  (of-object "GtkDropControllerMotion")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("gdouble" "p0")
    '("gdouble" "p1")
  )
)

(define-signal leave
  (of-object "GtkDropControllerMotion")
  (return-type "void")
  (flags "Run Last")
)

(define-signal motion
  (of-object "GtkDropControllerMotion")
  (return-type "void")
  (flags "Run First")
  (parameters
    '("gdouble" "p0")
    '("gdouble" "p1")
  )
)

(define-property contains-pointer
  (of-object "GtkDropControllerMotion")
  (prop-type "GParamBoolean")
  (docs "Whether the pointer is in the controllers widget or a descendant")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property drop
  (of-object "GtkDropControllerMotion")
  (prop-type "GParamObject")
  (docs "The ongoing drop operation")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property is-pointer
  (of-object "GtkDropControllerMotion")
  (prop-type "GParamBoolean")
  (docs "Whether the pointer is in the controllers widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkDropDown

(define-property factory
  (of-object "GtkDropDown")
  (prop-type "GParamObject")
  (docs "Factory for populating list items")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property list-factory
  (of-object "GtkDropDown")
  (prop-type "GParamObject")
  (docs "Factory for populating list items")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property model
  (of-object "GtkDropDown")
  (prop-type "GParamObject")
  (docs "Model for the displayed items")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property selected
  (of-object "GtkDropDown")
  (prop-type "GParamUInt")
  (docs "Position of the selected item")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "4294967295")
)

(define-property selected-item
  (of-object "GtkDropDown")
  (prop-type "GParamObject")
  (docs "The selected item")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property enable-search
  (of-object "GtkDropDown")
  (prop-type "GParamBoolean")
  (docs "Whether to show a search entry in the popup")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property expression
  (of-object "GtkDropDown")
  (prop-type "GtkParamSpecExpression")
  (docs "Expression to determine strings to search for")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkDropTarget

(define-signal drop
  (of-object "GtkDropTarget")
  (return-type "gboolean")
  (flags "Run Last")
  (parameters
    '("const-GValue*" "p0")
    '("gdouble" "p1")
    '("gdouble" "p2")
  )
)

(define-signal enter
  (of-object "GtkDropTarget")
  (return-type "GdkDragAction")
  (flags "Run Last")
  (parameters
    '("gdouble" "p0")
    '("gdouble" "p1")
  )
)

(define-signal leave
  (of-object "GtkDropTarget")
  (return-type "void")
  (flags "Run Last")
)

(define-signal motion
  (of-object "GtkDropTarget")
  (return-type "GdkDragAction")
  (flags "Run Last")
  (parameters
    '("gdouble" "p0")
    '("gdouble" "p1")
  )
)

(define-signal accept
  (of-object "GtkDropTarget")
  (return-type "gboolean")
  (flags "Run Last")
  (parameters
    '("GdkDrop*" "p0")
  )
)

(define-property actions
  (of-object "GtkDropTarget")
  (prop-type "GParamFlags")
  (docs "The actions supported by this drop target")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property drop
  (of-object "GtkDropTarget")
  (prop-type "GParamObject")
  (docs "Current drop")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property formats
  (of-object "GtkDropTarget")
  (prop-type "GParamBoxed")
  (docs "The supported formats")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property preload
  (of-object "GtkDropTarget")
  (prop-type "GParamBoolean")
  (docs "Whether drop data should be preloaded while hovering")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property value
  (of-object "GtkDropTarget")
  (prop-type "GParamBoxed")
  (docs "The value for this drop operation")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From GtkDropTargetAsync

(define-signal drop
  (of-object "GtkDropTargetAsync")
  (return-type "gboolean")
  (flags "Run Last")
  (parameters
    '("GdkDrop*" "p0")
    '("gdouble" "p1")
    '("gdouble" "p2")
  )
)

(define-signal accept
  (of-object "GtkDropTargetAsync")
  (return-type "gboolean")
  (flags "Run Last")
  (parameters
    '("GdkDrop*" "p0")
  )
)

(define-signal drag-enter
  (of-object "GtkDropTargetAsync")
  (return-type "GdkDragAction")
  (flags "Run Last")
  (parameters
    '("GdkDrop*" "p0")
    '("gdouble" "p1")
    '("gdouble" "p2")
  )
)

(define-signal drag-motion
  (of-object "GtkDropTargetAsync")
  (return-type "GdkDragAction")
  (flags "Run Last")
  (parameters
    '("GdkDrop*" "p0")
    '("gdouble" "p1")
    '("gdouble" "p2")
  )
)

(define-signal drag-leave
  (of-object "GtkDropTargetAsync")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GdkDrop*" "p0")
  )
)

(define-property actions
  (of-object "GtkDropTargetAsync")
  (prop-type "GParamFlags")
  (docs "Actions")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property formats
  (of-object "GtkDropTargetAsync")
  (prop-type "GParamBoxed")
  (docs "Formats")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkEditable

(define-signal changed
  (of-object "GtkEditable")
  (return-type "void")
  (flags "Run Last")
)

(define-signal insert-text
  (of-object "GtkEditable")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("const-gchar*" "p0")
    '("gint" "p1")
    '("gpointer" "p2")
  )
)

(define-signal delete-text
  (of-object "GtkEditable")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("gint" "p0")
    '("gint" "p1")
  )
)

(define-property cursor-position
  (of-object "GtkEditable")
  (prop-type "GParamInt")
  (docs "The current position of the insertion cursor in chars")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "0")
)

(define-property editable
  (of-object "GtkEditable")
  (prop-type "GParamBoolean")
  (docs "Whether the entry contents can be edited")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property enable-undo
  (of-object "GtkEditable")
  (prop-type "GParamBoolean")
  (docs "If undo/redo should be enabled for the editable")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property max-width-chars
  (of-object "GtkEditable")
  (prop-type "GParamInt")
  (docs "The desired maximum width of the entry, in characters")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property selection-bound
  (of-object "GtkEditable")
  (prop-type "GParamInt")
  (docs "The position of the opposite end of the selection from the cursor in chars")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "0")
)

(define-property text
  (of-object "GtkEditable")
  (prop-type "GParamString")
  (docs "The contents of the entry")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property width-chars
  (of-object "GtkEditable")
  (prop-type "GParamInt")
  (docs "Number of characters to leave space for in the entry")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property xalign
  (of-object "GtkEditable")
  (prop-type "GParamFloat")
  (docs "The horizontal alignment, from 0 (left) to 1 (right). Reversed for RTL layouts.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

;; From GtkEditableLabel

(define-property editing
  (of-object "GtkEditableLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is in editing mode")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkEmojiChooser

(define-signal emoji-picked
  (of-object "GtkEmojiChooser")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("const-gchar*" "p0")
  )
)

;; From GtkEntry

(define-signal activate
  (of-object "GtkEntry")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal icon-press
  (of-object "GtkEntry")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkEntryIconPosition" "p0")
  )
)

(define-signal icon-release
  (of-object "GtkEntry")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkEntryIconPosition" "p0")
  )
)

(define-property buffer
  (of-object "GtkEntry")
  (prop-type "GParamObject")
  (docs "Text buffer object which actually stores entry text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property max-length
  (of-object "GtkEntry")
  (prop-type "GParamInt")
  (docs "Maximum number of characters for this entry. Zero if no maximum")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property visibility
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "FALSE displays the “invisible char” instead of the actual text (password mode)")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property has-frame
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "FALSE removes outside bevel from entry")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property invisible-char
  (of-object "GtkEntry")
  (prop-type "GParamUnichar")
  (docs "The character to use when masking entry contents (in “password mode”)")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "42")
)

(define-property activates-default
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "Whether to activate the default widget (such as the default button in a dialog) when Enter is pressed")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property scroll-offset
  (of-object "GtkEntry")
  (prop-type "GParamInt")
  (docs "Number of pixels of the entry scrolled off the screen to the left")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "0")
)

(define-property truncate-multiline
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "Whether to truncate multiline pastes to one line.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property overwrite-mode
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "Whether new text overwrites existing text")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property text-length
  (of-object "GtkEntry")
  (prop-type "GParamUInt")
  (docs "Length of the text currently in the entry")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "0")
)

(define-property invisible-char-set
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "Whether the invisible character has been set")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property progress-fraction
  (of-object "GtkEntry")
  (prop-type "GParamDouble")
  (docs "The current fraction of the task that’s been completed")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property progress-pulse-step
  (of-object "GtkEntry")
  (prop-type "GParamDouble")
  (docs "The fraction of total entry width to move the progress bouncing block for each call to gtk_entry_progress_pulse()")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property primary-icon-paintable
  (of-object "GtkEntry")
  (prop-type "GParamObject")
  (docs "Primary paintable for the entry")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property secondary-icon-paintable
  (of-object "GtkEntry")
  (prop-type "GParamObject")
  (docs "Secondary paintable for the entry")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property primary-icon-name
  (of-object "GtkEntry")
  (prop-type "GParamString")
  (docs "Icon name for primary icon")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property secondary-icon-name
  (of-object "GtkEntry")
  (prop-type "GParamString")
  (docs "Icon name for secondary icon")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property primary-icon-gicon
  (of-object "GtkEntry")
  (prop-type "GParamObject")
  (docs "GIcon for primary icon")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property secondary-icon-gicon
  (of-object "GtkEntry")
  (prop-type "GParamObject")
  (docs "GIcon for secondary icon")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property primary-icon-storage-type
  (of-object "GtkEntry")
  (prop-type "GParamEnum")
  (docs "The representation being used for primary icon")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "GTK_IMAGE_EMPTY")
)

(define-property secondary-icon-storage-type
  (of-object "GtkEntry")
  (prop-type "GParamEnum")
  (docs "The representation being used for secondary icon")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "GTK_IMAGE_EMPTY")
)

(define-property primary-icon-activatable
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "Whether the primary icon is activatable")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property secondary-icon-activatable
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "Whether the secondary icon is activatable")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property primary-icon-sensitive
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "Whether the primary icon is sensitive")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property secondary-icon-sensitive
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "Whether the secondary icon is sensitive")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property primary-icon-tooltip-text
  (of-object "GtkEntry")
  (prop-type "GParamString")
  (docs "The contents of the tooltip on the primary icon")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property secondary-icon-tooltip-text
  (of-object "GtkEntry")
  (prop-type "GParamString")
  (docs "The contents of the tooltip on the secondary icon")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property primary-icon-tooltip-markup
  (of-object "GtkEntry")
  (prop-type "GParamString")
  (docs "The contents of the tooltip on the primary icon")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property secondary-icon-tooltip-markup
  (of-object "GtkEntry")
  (prop-type "GParamString")
  (docs "The contents of the tooltip on the secondary icon")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property im-module
  (of-object "GtkEntry")
  (prop-type "GParamString")
  (docs "Which IM module should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property placeholder-text
  (of-object "GtkEntry")
  (prop-type "GParamString")
  (docs "Show text in the entry when it’s empty and unfocused")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property completion
  (of-object "GtkEntry")
  (prop-type "GParamObject")
  (docs "The auxiliary completion object")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property input-purpose
  (of-object "GtkEntry")
  (prop-type "GParamEnum")
  (docs "Purpose of the text field")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_INPUT_PURPOSE_FREE_FORM")
)

(define-property input-hints
  (of-object "GtkEntry")
  (prop-type "GParamFlags")
  (docs "Hints for the text field behaviour")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_INPUT_HINT_NONE")
)

(define-property attributes
  (of-object "GtkEntry")
  (prop-type "GParamBoxed")
  (docs "A list of style attributes to apply to the text of the entry")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tabs
  (of-object "GtkEntry")
  (prop-type "GParamBoxed")
  (docs "A list of tabstop locations to apply to the text of the entry")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property extra-menu
  (of-object "GtkEntry")
  (prop-type "GParamObject")
  (docs "Model menu to append to the context menu")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-emoji-icon
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "Whether to show an icon for Emoji")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property enable-emoji-completion
  (of-object "GtkEntry")
  (prop-type "GParamBoolean")
  (docs "Whether to suggest Emoji replacements")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkEntryCompletion

(define-signal insert-prefix
  (of-object "GtkEntryCompletion")
  (return-type "gboolean")
  (flags "Run Last")
  (parameters
    '("const-gchar*" "p0")
  )
)

(define-signal match-selected
  (of-object "GtkEntryCompletion")
  (return-type "gboolean")
  (flags "Run Last")
  (parameters
    '("GtkTreeModel*" "p0")
    '("GtkTreeIter*" "p1")
  )
)

(define-signal cursor-on-match
  (of-object "GtkEntryCompletion")
  (return-type "gboolean")
  (flags "Run Last")
  (parameters
    '("GtkTreeModel*" "p0")
    '("GtkTreeIter*" "p1")
  )
)

(define-signal no-matches
  (of-object "GtkEntryCompletion")
  (return-type "void")
  (flags "Run Last")
)

(define-property model
  (of-object "GtkEntryCompletion")
  (prop-type "GParamObject")
  (docs "The model to find matches in")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property minimum-key-length
  (of-object "GtkEntryCompletion")
  (prop-type "GParamInt")
  (docs "Minimum length of the search key in order to look up matches")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "1")
)

(define-property text-column
  (of-object "GtkEntryCompletion")
  (prop-type "GParamInt")
  (docs "The column of the model containing the strings.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property inline-completion
  (of-object "GtkEntryCompletion")
  (prop-type "GParamBoolean")
  (docs "Whether the common prefix should be inserted automatically")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property popup-completion
  (of-object "GtkEntryCompletion")
  (prop-type "GParamBoolean")
  (docs "Whether the completions should be shown in a popup window")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property popup-set-width
  (of-object "GtkEntryCompletion")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the popup window will have the same size as the entry")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property popup-single-match
  (of-object "GtkEntryCompletion")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the popup window will appear for a single match.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property inline-selection
  (of-object "GtkEntryCompletion")
  (prop-type "GParamBoolean")
  (docs "Your description here")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property cell-area
  (of-object "GtkEntryCompletion")
  (prop-type "GParamObject")
  (docs "The GtkCellArea used to layout cells")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From GtkEntryBuffer

(define-signal inserted-text
  (of-object "GtkEntryBuffer")
  (return-type "void")
  (flags "Run First")
  (parameters
    '("guint" "p0")
    '("const-gchar*" "p1")
    '("guint" "p2")
  )
)

(define-signal deleted-text
  (of-object "GtkEntryBuffer")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("guint" "p0")
    '("guint" "p1")
  )
)

(define-property text
  (of-object "GtkEntryBuffer")
  (prop-type "GParamString")
  (docs "The contents of the buffer")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property length
  (of-object "GtkEntryBuffer")
  (prop-type "GParamUInt")
  (docs "Length of the text currently in the buffer")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "0")
)

(define-property max-length
  (of-object "GtkEntryBuffer")
  (prop-type "GParamInt")
  (docs "Maximum number of characters for this entry. Zero if no maximum")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

;; From GtkEventController

(define-property widget
  (of-object "GtkEventController")
  (prop-type "GParamObject")
  (docs "Widget the gesture relates to")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property propagation-phase
  (of-object "GtkEventController")
  (prop-type "GParamEnum")
  (docs "Propagation phase at which this controller is run")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_PHASE_BUBBLE")
)

(define-property propagation-limit
  (of-object "GtkEventController")
  (prop-type "GParamEnum")
  (docs "Propagation limit for events handled by this controller")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_LIMIT_SAME_NATIVE")
)

(define-property name
  (of-object "GtkEventController")
  (prop-type "GParamString")
  (docs "Name for this controller")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

;; From GtkEventControllerFocus

(define-signal enter
  (of-object "GtkEventControllerFocus")
  (return-type "void")
  (flags "Run Last")
)

(define-signal leave
  (of-object "GtkEventControllerFocus")
  (return-type "void")
  (flags "Run Last")
)

(define-property is-focus
  (of-object "GtkEventControllerFocus")
  (prop-type "GParamBoolean")
  (docs "Whether the focus is in the controllers widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property contains-focus
  (of-object "GtkEventControllerFocus")
  (prop-type "GParamBoolean")
  (docs "Whether the focus is in a descendant of the controllers widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkEventControllerKey

(define-signal modifiers
  (of-object "GtkEventControllerKey")
  (return-type "gboolean")
  (flags "Run Last")
  (parameters
    '("GdkModifierType" "p0")
  )
)

(define-signal key-pressed
  (of-object "GtkEventControllerKey")
  (return-type "gboolean")
  (flags "Run Last")
  (parameters
    '("guint" "p0")
    '("guint" "p1")
    '("GdkModifierType" "p2")
  )
)

(define-signal key-released
  (of-object "GtkEventControllerKey")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("guint" "p0")
    '("guint" "p1")
    '("GdkModifierType" "p2")
  )
)

(define-signal im-update
  (of-object "GtkEventControllerKey")
  (return-type "void")
  (flags "Run Last")
)

;; From GtkEventControllerMotion

(define-signal enter
  (of-object "GtkEventControllerMotion")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("gdouble" "p0")
    '("gdouble" "p1")
  )
)

(define-signal leave
  (of-object "GtkEventControllerMotion")
  (return-type "void")
  (flags "Run Last")
)

(define-signal motion
  (of-object "GtkEventControllerMotion")
  (return-type "void")
  (flags "Run First")
  (parameters
    '("gdouble" "p0")
    '("gdouble" "p1")
  )
)

(define-property is-pointer
  (of-object "GtkEventControllerMotion")
  (prop-type "GParamBoolean")
  (docs "Whether the pointer is in the controllers widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property contains-pointer
  (of-object "GtkEventControllerMotion")
  (prop-type "GParamBoolean")
  (docs "Whether the pointer is in the controllers widget or a descendant")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkEventControllerScroll

(define-signal scroll-begin
  (of-object "GtkEventControllerScroll")
  (return-type "void")
  (flags "Run First")
)

(define-signal scroll
  (of-object "GtkEventControllerScroll")
  (return-type "gboolean")
  (flags "Run Last")
  (parameters
    '("gdouble" "p0")
    '("gdouble" "p1")
  )
)

(define-signal scroll-end
  (of-object "GtkEventControllerScroll")
  (return-type "void")
  (flags "Run First")
)

(define-signal decelerate
  (of-object "GtkEventControllerScroll")
  (return-type "void")
  (flags "Run First")
  (parameters
    '("gdouble" "p0")
    '("gdouble" "p1")
  )
)

(define-property flags
  (of-object "GtkEventControllerScroll")
  (prop-type "GParamFlags")
  (docs "Flags")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_EVENT_CONTROLLER_SCROLL_NONE")
)

;; From GtkExpander

(define-signal activate
  (of-object "GtkExpander")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-property expanded
  (of-object "GtkExpander")
  (prop-type "GParamBoolean")
  (docs "Whether the expander has been opened to reveal the child widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property label
  (of-object "GtkExpander")
  (prop-type "GParamString")
  (docs "Text of the expander’s label")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property use-underline
  (of-object "GtkExpander")
  (prop-type "GParamBoolean")
  (docs "If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property use-markup
  (of-object "GtkExpander")
  (prop-type "GParamBoolean")
  (docs "The text of the label includes XML markup. See pango_parse_markup()")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property label-widget
  (of-object "GtkExpander")
  (prop-type "GParamObject")
  (docs "A widget to display in place of the usual expander label")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resize-toplevel
  (of-object "GtkExpander")
  (prop-type "GParamBoolean")
  (docs "Whether the expander will resize the toplevel window upon expanding and collapsing")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property child
  (of-object "GtkExpander")
  (prop-type "GParamObject")
  (docs "The child widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkFileFilter

(define-property name
  (of-object "GtkFileFilter")
  (prop-type "GParamString")
  (docs "The human-readable name for this filter")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

;; From GtkFileChooser

(define-property action
  (of-object "GtkFileChooser")
  (prop-type "GParamEnum")
  (docs "The type of operation that the file selector is performing")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_FILE_CHOOSER_ACTION_OPEN")
)

(define-property create-folders
  (of-object "GtkFileChooser")
  (prop-type "GParamBoolean")
  (docs "Whether a file chooser not in open mode will offer the user to create new folders.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property filter
  (of-object "GtkFileChooser")
  (prop-type "GParamObject")
  (docs "The current filter for selecting which files are displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property filters
  (of-object "GtkFileChooser")
  (prop-type "GParamObject")
  (docs "List model of filters")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property select-multiple
  (of-object "GtkFileChooser")
  (prop-type "GParamBoolean")
  (docs "Whether to allow multiple files to be selected")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property shortcut-folders
  (of-object "GtkFileChooser")
  (prop-type "GParamObject")
  (docs "List model of shortcut folders")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From GtkFileChooserDialog

;; From GtkFileChooserNative

(define-property accept-label
  (of-object "GtkFileChooserNative")
  (prop-type "GParamString")
  (docs "The label on the accept button")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property cancel-label
  (of-object "GtkFileChooserNative")
  (prop-type "GParamString")
  (docs "The label on the cancel button")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

;; From GtkFileChooserWidget

(define-signal location-popup
  (of-object "GtkFileChooserWidget")
  (return-type "void")
  (flags "Run First, Action")
  (parameters
    '("const-gchar*" "p0")
  )
)

(define-signal location-popup-on-paste
  (of-object "GtkFileChooserWidget")
  (return-type "void")
  (flags "Run First, Action")
)

(define-signal location-toggle-popup
  (of-object "GtkFileChooserWidget")
  (return-type "void")
  (flags "Run First, Action")
)

(define-signal up-folder
  (of-object "GtkFileChooserWidget")
  (return-type "void")
  (flags "Run First, Action")
)

(define-signal down-folder
  (of-object "GtkFileChooserWidget")
  (return-type "void")
  (flags "Run First, Action")
)

(define-signal home-folder
  (of-object "GtkFileChooserWidget")
  (return-type "void")
  (flags "Run First, Action")
)

(define-signal desktop-folder
  (of-object "GtkFileChooserWidget")
  (return-type "void")
  (flags "Run First, Action")
)

(define-signal quick-bookmark
  (of-object "GtkFileChooserWidget")
  (return-type "void")
  (flags "Run First, Action")
  (parameters
    '("gint" "p0")
  )
)

(define-signal show-hidden
  (of-object "GtkFileChooserWidget")
  (return-type "void")
  (flags "Run First, Action")
)

(define-signal search-shortcut
  (of-object "GtkFileChooserWidget")
  (return-type "void")
  (flags "Run First, Action")
)

(define-signal recent-shortcut
  (of-object "GtkFileChooserWidget")
  (return-type "void")
  (flags "Run First, Action")
)

(define-signal places-shortcut
  (of-object "GtkFileChooserWidget")
  (return-type "void")
  (flags "Run First, Action")
)

(define-property search-mode
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamBoolean")
  (docs "Search mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property subtitle
  (of-object "GtkFileChooserWidget")
  (prop-type "GParamString")
  (docs "Subtitle")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "")
)

;; From GtkFilter

(define-signal changed
  (of-object "GtkFilter")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkFilterChange" "p0")
  )
)

;; From GtkFilterListModel

(define-property filter
  (of-object "GtkFilterListModel")
  (prop-type "GParamObject")
  (docs "The filter set for this model")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property incremental
  (of-object "GtkFilterListModel")
  (prop-type "GParamBoolean")
  (docs "Filter items incrementally")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property model
  (of-object "GtkFilterListModel")
  (prop-type "GParamObject")
  (docs "The model being filtered")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pending
  (of-object "GtkFilterListModel")
  (prop-type "GParamUInt")
  (docs "Number of items not yet filtered")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "0")
)

;; From GtkFixed

;; From GtkFlattenListModel

(define-property model
  (of-object "GtkFlattenListModel")
  (prop-type "GParamObject")
  (docs "The model being flattened")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkFlowBox

(define-signal child-activated
  (of-object "GtkFlowBox")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkFlowBoxChild*" "p0")
  )
)

(define-signal selected-children-changed
  (of-object "GtkFlowBox")
  (return-type "void")
  (flags "Run First")
)

(define-signal activate-cursor-child
  (of-object "GtkFlowBox")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal toggle-cursor-child
  (of-object "GtkFlowBox")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal move-cursor
  (of-object "GtkFlowBox")
  (return-type "gboolean")
  (flags "Run Last, Action")
  (parameters
    '("GtkMovementStep" "p0")
    '("gint" "p1")
    '("gboolean" "p2")
    '("gboolean" "p3")
  )
)

(define-signal select-all
  (of-object "GtkFlowBox")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal unselect-all
  (of-object "GtkFlowBox")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-property homogeneous
  (of-object "GtkFlowBox")
  (prop-type "GParamBoolean")
  (docs "Whether the children should all be the same size")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property column-spacing
  (of-object "GtkFlowBox")
  (prop-type "GParamUInt")
  (docs "The amount of horizontal space between two children")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property row-spacing
  (of-object "GtkFlowBox")
  (prop-type "GParamUInt")
  (docs "The amount of vertical space between two children")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property min-children-per-line
  (of-object "GtkFlowBox")
  (prop-type "GParamUInt")
  (docs "The minimum number of children to allocate consecutively in the given orientation.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property max-children-per-line
  (of-object "GtkFlowBox")
  (prop-type "GParamUInt")
  (docs "The maximum amount of children to request space for consecutively in the given orientation.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "7")
)

(define-property selection-mode
  (of-object "GtkFlowBox")
  (prop-type "GParamEnum")
  (docs "The selection mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_SELECTION_SINGLE")
)

(define-property activate-on-single-click
  (of-object "GtkFlowBox")
  (prop-type "GParamBoolean")
  (docs "Activate row on a single click")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property accept-unpaired-release
  (of-object "GtkFlowBox")
  (prop-type "GParamBoolean")
  (docs "Accept an unpaired release event")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkFlowBoxChild

(define-signal activate
  (of-object "GtkFlowBoxChild")
  (return-type "void")
  (flags "Run First, Action")
)

(define-property child
  (of-object "GtkFlowBoxChild")
  (prop-type "GParamObject")
  (docs "The child widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkFontButton

(define-signal font-set
  (of-object "GtkFontButton")
  (return-type "void")
  (flags "Run First")
)

(define-property title
  (of-object "GtkFontButton")
  (prop-type "GParamString")
  (docs "The title of the font chooser dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "Pick a Font")
)

(define-property modal
  (of-object "GtkFontButton")
  (prop-type "GParamBoolean")
  (docs "Whether the dialog is modal")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property use-font
  (of-object "GtkFontButton")
  (prop-type "GParamBoolean")
  (docs "Whether the label is drawn in the selected font")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property use-size
  (of-object "GtkFontButton")
  (prop-type "GParamBoolean")
  (docs "Whether the label is drawn with the selected font size")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkFontChooser

(define-signal font-activated
  (of-object "GtkFontChooser")
  (return-type "void")
  (flags "Run First")
  (parameters
    '("const-gchar*" "p0")
  )
)

(define-property font
  (of-object "GtkFontChooser")
  (prop-type "GParamString")
  (docs "Font description as a string, e.g. “Sans Italic 12”")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "Sans 10")
)

(define-property font-desc
  (of-object "GtkFontChooser")
  (prop-type "GParamBoxed")
  (docs "Font description as a PangoFontDescription struct")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property font-features
  (of-object "GtkFontChooser")
  (prop-type "GParamString")
  (docs "Font features as a string")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "")
)

(define-property language
  (of-object "GtkFontChooser")
  (prop-type "GParamString")
  (docs "Language for which features have been selected")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property level
  (of-object "GtkFontChooser")
  (prop-type "GParamFlags")
  (docs "Whether to select family, face or font")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_FONT_CHOOSER_LEVEL_STYLE | GTK_FONT_CHOOSER_LEVEL_SIZE")
)

(define-property preview-text
  (of-object "GtkFontChooser")
  (prop-type "GParamString")
  (docs "The text to display in order to demonstrate the selected font")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "The quick brown fox jumps over the lazy dog.")
)

(define-property show-preview-entry
  (of-object "GtkFontChooser")
  (prop-type "GParamBoolean")
  (docs "Whether the preview text entry is shown or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

;; From GtkFontChooserDialog

;; From GtkFontChooserWidget

(define-property tweak-action
  (of-object "GtkFontChooserWidget")
  (prop-type "GParamObject")
  (docs "The toggle action to switch to the tweak page")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From GtkFrame

(define-property label
  (of-object "GtkFrame")
  (prop-type "GParamString")
  (docs "Text of the frame’s label")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property label-xalign
  (of-object "GtkFrame")
  (prop-type "GParamFloat")
  (docs "The horizontal alignment of the label")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property label-widget
  (of-object "GtkFrame")
  (prop-type "GParamObject")
  (docs "A widget to display in place of the usual frame label")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkFrame")
  (prop-type "GParamObject")
  (docs "The child widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkGesture

(define-signal update
  (of-object "GtkGesture")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GdkEventSequence*" "p0")
  )
)

(define-signal cancel
  (of-object "GtkGesture")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GdkEventSequence*" "p0")
  )
)

(define-signal begin
  (of-object "GtkGesture")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GdkEventSequence*" "p0")
  )
)

(define-signal end
  (of-object "GtkGesture")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GdkEventSequence*" "p0")
  )
)

(define-signal sequence-state-changed
  (of-object "GtkGesture")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GdkEventSequence*" "p0")
    '("GtkEventSequenceState" "p1")
  )
)

(define-property n-points
  (of-object "GtkGesture")
  (prop-type "GParamUInt")
  (docs "Number of points needed to trigger the gesture")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "1")
)

;; From GtkGestureClick

(define-signal pressed
  (of-object "GtkGestureClick")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("gint" "p0")
    '("gdouble" "p1")
    '("gdouble" "p2")
  )
)

(define-signal released
  (of-object "GtkGestureClick")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("gint" "p0")
    '("gdouble" "p1")
    '("gdouble" "p2")
  )
)

(define-signal stopped
  (of-object "GtkGestureClick")
  (return-type "void")
  (flags "Run Last")
)

(define-signal unpaired-release
  (of-object "GtkGestureClick")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("gdouble" "p0")
    '("gdouble" "p1")
    '("guint" "p2")
    '("GdkEventSequence*" "p3")
  )
)

;; From GtkGestureDrag

(define-signal drag-begin
  (of-object "GtkGestureDrag")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("gdouble" "p0")
    '("gdouble" "p1")
  )
)

(define-signal drag-end
  (of-object "GtkGestureDrag")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("gdouble" "p0")
    '("gdouble" "p1")
  )
)

(define-signal drag-update
  (of-object "GtkGestureDrag")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("gdouble" "p0")
    '("gdouble" "p1")
  )
)

;; From GtkGestureLongPress

(define-signal cancelled
  (of-object "GtkGestureLongPress")
  (return-type "void")
  (flags "Run Last")
)

(define-signal pressed
  (of-object "GtkGestureLongPress")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("gdouble" "p0")
    '("gdouble" "p1")
  )
)

(define-property delay-factor
  (of-object "GtkGestureLongPress")
  (prop-type "GParamDouble")
  (docs "Factor by which to modify the default timeout")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "1")
)

;; From GtkGesturePan

(define-signal pan
  (of-object "GtkGesturePan")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkPanDirection" "p0")
    '("gdouble" "p1")
  )
)

(define-property orientation
  (of-object "GtkGesturePan")
  (prop-type "GParamEnum")
  (docs "Allowed orientations")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_ORIENTATION_HORIZONTAL")
)

;; From GtkGestureRotate

(define-signal angle-changed
  (of-object "GtkGestureRotate")
  (return-type "void")
  (flags "Run First")
  (parameters
    '("gdouble" "p0")
    '("gdouble" "p1")
  )
)

;; From GtkGestureSingle

(define-property touch-only
  (of-object "GtkGestureSingle")
  (prop-type "GParamBoolean")
  (docs "Whether the gesture handles only touch events")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property exclusive
  (of-object "GtkGestureSingle")
  (prop-type "GParamBoolean")
  (docs "Whether the gesture is exclusive")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property button
  (of-object "GtkGestureSingle")
  (prop-type "GParamUInt")
  (docs "Button number to listen to")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "1")
)

;; From GtkGestureStylus

(define-signal motion
  (of-object "GtkGestureStylus")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("gdouble" "p0")
    '("gdouble" "p1")
  )
)

(define-signal proximity
  (of-object "GtkGestureStylus")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("gdouble" "p0")
    '("gdouble" "p1")
  )
)

(define-signal down
  (of-object "GtkGestureStylus")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("gdouble" "p0")
    '("gdouble" "p1")
  )
)

(define-signal up
  (of-object "GtkGestureStylus")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("gdouble" "p0")
    '("gdouble" "p1")
  )
)

;; From GtkGestureSwipe

(define-signal swipe
  (of-object "GtkGestureSwipe")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("gdouble" "p0")
    '("gdouble" "p1")
  )
)

;; From GtkGestureZoom

(define-signal scale-changed
  (of-object "GtkGestureZoom")
  (return-type "void")
  (flags "Run First")
  (parameters
    '("gdouble" "p0")
  )
)

;; From GtkGLArea

(define-signal render
  (of-object "GtkGLArea")
  (return-type "gboolean")
  (flags "Run Last")
  (parameters
    '("GdkGLContext*" "p0")
  )
)

(define-signal resize
  (of-object "GtkGLArea")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("gint" "p0")
    '("gint" "p1")
  )
)

(define-signal create-context
  (of-object "GtkGLArea")
  (return-type "GdkGLContext*")
  (flags "Run Last")
)

(define-property context
  (of-object "GtkGLArea")
  (prop-type "GParamObject")
  (docs "The GL context")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property has-depth-buffer
  (of-object "GtkGLArea")
  (prop-type "GParamBoolean")
  (docs "Whether a depth buffer is allocated")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property has-stencil-buffer
  (of-object "GtkGLArea")
  (prop-type "GParamBoolean")
  (docs "Whether a stencil buffer is allocated")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property use-es
  (of-object "GtkGLArea")
  (prop-type "GParamBoolean")
  (docs "Whether the context uses OpenGL or OpenGL ES")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property auto-render
  (of-object "GtkGLArea")
  (prop-type "GParamBoolean")
  (docs "Whether the GtkGLArea renders on each redraw")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

;; From GtkGrid

(define-property row-spacing
  (of-object "GtkGrid")
  (prop-type "GParamInt")
  (docs "The amount of space between two consecutive rows")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property column-spacing
  (of-object "GtkGrid")
  (prop-type "GParamInt")
  (docs "The amount of space between two consecutive columns")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property row-homogeneous
  (of-object "GtkGrid")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the rows are all the same height")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property column-homogeneous
  (of-object "GtkGrid")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the columns are all the same width")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property baseline-row
  (of-object "GtkGrid")
  (prop-type "GParamInt")
  (docs "The row to align the to the baseline when valign is GTK_ALIGN_BASELINE")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

;; From GtkGridLayout

(define-property row-spacing
  (of-object "GtkGridLayout")
  (prop-type "GParamInt")
  (docs "The amount of space between two consecutive rows")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property column-spacing
  (of-object "GtkGridLayout")
  (prop-type "GParamInt")
  (docs "The amount of space between two consecutive columns")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property row-homogeneous
  (of-object "GtkGridLayout")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the rows are all the same height")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property column-homogeneous
  (of-object "GtkGridLayout")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the columns are all the same width")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property baseline-row
  (of-object "GtkGridLayout")
  (prop-type "GParamInt")
  (docs "The row to align the to the baseline when valign is GTK_ALIGN_BASELINE")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

;; From GtkGridLayoutChild

(define-property column
  (of-object "GtkGridLayoutChild")
  (prop-type "GParamInt")
  (docs "The column to place the child in")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property row
  (of-object "GtkGridLayoutChild")
  (prop-type "GParamInt")
  (docs "The row to place the child in")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property column-span
  (of-object "GtkGridLayoutChild")
  (prop-type "GParamInt")
  (docs "The number of columns that a child spans")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "1")
)

(define-property row-span
  (of-object "GtkGridLayoutChild")
  (prop-type "GParamInt")
  (docs "The number of rows that a child spans")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "1")
)

;; From GtkGridView

(define-signal activate
  (of-object "GtkGridView")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("guint" "p0")
  )
)

(define-property factory
  (of-object "GtkGridView")
  (prop-type "GParamObject")
  (docs "Factory for populating list items")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property max-columns
  (of-object "GtkGridView")
  (prop-type "GParamUInt")
  (docs "Maximum number of columns per row")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "7")
)

(define-property min-columns
  (of-object "GtkGridView")
  (prop-type "GParamUInt")
  (docs "Minimum number of columns per row")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "1")
)

(define-property model
  (of-object "GtkGridView")
  (prop-type "GParamObject")
  (docs "Model for the items displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property single-click-activate
  (of-object "GtkGridView")
  (prop-type "GParamBoolean")
  (docs "Activate rows on single click")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property enable-rubberband
  (of-object "GtkGridView")
  (prop-type "GParamBoolean")
  (docs "Allow selecting items by dragging with the mouse")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkHeaderBar

(define-property title-widget
  (of-object "GtkHeaderBar")
  (prop-type "GParamObject")
  (docs "Title widget to display")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-title-buttons
  (of-object "GtkHeaderBar")
  (prop-type "GParamBoolean")
  (docs "Whether to show title buttons")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property decoration-layout
  (of-object "GtkHeaderBar")
  (prop-type "GParamString")
  (docs "The layout for window decorations")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

;; From GtkImage

(define-property paintable
  (of-object "GtkImage")
  (prop-type "GParamObject")
  (docs "A GdkPaintable to display")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property file
  (of-object "GtkImage")
  (prop-type "GParamString")
  (docs "Filename to load and display")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property icon-size
  (of-object "GtkImage")
  (prop-type "GParamEnum")
  (docs "Symbolic size to use for icon set or named icon")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_ICON_SIZE_INHERIT")
)

(define-property pixel-size
  (of-object "GtkImage")
  (prop-type "GParamInt")
  (docs "Pixel size to use for named icon")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property icon-name
  (of-object "GtkImage")
  (prop-type "GParamString")
  (docs "The name of the icon from the icon theme")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property storage-type
  (of-object "GtkImage")
  (prop-type "GParamEnum")
  (docs "The representation being used for image data")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "GTK_IMAGE_EMPTY")
)

(define-property gicon
  (of-object "GtkImage")
  (prop-type "GParamObject")
  (docs "The GIcon being displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resource
  (of-object "GtkImage")
  (prop-type "GParamString")
  (docs "The resource path being displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property use-fallback
  (of-object "GtkImage")
  (prop-type "GParamBoolean")
  (docs "Whether to use icon names fallback")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkInfoBar

(define-signal response
  (of-object "GtkInfoBar")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("gint" "p0")
  )
)

(define-signal close
  (of-object "GtkInfoBar")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-property message-type
  (of-object "GtkInfoBar")
  (prop-type "GParamEnum")
  (docs "The type of message")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_MESSAGE_INFO")
)

(define-property show-close-button
  (of-object "GtkInfoBar")
  (prop-type "GParamBoolean")
  (docs "Whether to include a standard close button")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property revealed
  (of-object "GtkInfoBar")
  (prop-type "GParamBoolean")
  (docs "Controls whether the info bar shows its contents or not")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

;; From GtkIconPaintable

(define-property file
  (of-object "GtkIconPaintable")
  (prop-type "GParamObject")
  (docs "The file representing the icon")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property icon-name
  (of-object "GtkIconPaintable")
  (prop-type "GParamString")
  (docs "The icon name chosen during lookup")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "")
)

(define-property is-symbolic
  (of-object "GtkIconPaintable")
  (prop-type "GParamBoolean")
  (docs "If the icon is symbolic")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "FALSE")
)

;; From GtkIconTheme

(define-signal changed
  (of-object "GtkIconTheme")
  (return-type "void")
  (flags "Run Last")
)

(define-property display
  (of-object "GtkIconTheme")
  (prop-type "GParamObject")
  (docs "Display")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-names
  (of-object "GtkIconTheme")
  (prop-type "GParamBoxed")
  (docs "Supported icon names")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property search-path
  (of-object "GtkIconTheme")
  (prop-type "GParamBoxed")
  (docs "Search path")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property resource-path
  (of-object "GtkIconTheme")
  (prop-type "GParamBoxed")
  (docs "Resource path")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property theme-name
  (of-object "GtkIconTheme")
  (prop-type "GParamString")
  (docs "Theme name")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

;; From GtkIconView

(define-signal move-cursor
  (of-object "GtkIconView")
  (return-type "gboolean")
  (flags "Run Last, Action")
  (parameters
    '("GtkMovementStep" "p0")
    '("gint" "p1")
    '("gboolean" "p2")
    '("gboolean" "p3")
  )
)

(define-signal select-all
  (of-object "GtkIconView")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal unselect-all
  (of-object "GtkIconView")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal item-activated
  (of-object "GtkIconView")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkTreePath*" "p0")
  )
)

(define-signal selection-changed
  (of-object "GtkIconView")
  (return-type "void")
  (flags "Run First")
)

(define-signal select-cursor-item
  (of-object "GtkIconView")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal toggle-cursor-item
  (of-object "GtkIconView")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal activate-cursor-item
  (of-object "GtkIconView")
  (return-type "gboolean")
  (flags "Run Last, Action")
)

(define-property pixbuf-column
  (of-object "GtkIconView")
  (prop-type "GParamInt")
  (docs "Model column used to retrieve the icon pixbuf from")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property text-column
  (of-object "GtkIconView")
  (prop-type "GParamInt")
  (docs "Model column used to retrieve the text from")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property markup-column
  (of-object "GtkIconView")
  (prop-type "GParamInt")
  (docs "Model column used to retrieve the text if using Pango markup")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property selection-mode
  (of-object "GtkIconView")
  (prop-type "GParamEnum")
  (docs "The selection mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_SELECTION_SINGLE")
)

(define-property item-orientation
  (of-object "GtkIconView")
  (prop-type "GParamEnum")
  (docs "How the text and icon of each item are positioned relative to each other")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_ORIENTATION_VERTICAL")
)

(define-property model
  (of-object "GtkIconView")
  (prop-type "GParamObject")
  (docs "The model for the icon view")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property columns
  (of-object "GtkIconView")
  (prop-type "GParamInt")
  (docs "Number of columns to display")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property item-width
  (of-object "GtkIconView")
  (prop-type "GParamInt")
  (docs "The width used for each item")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property spacing
  (of-object "GtkIconView")
  (prop-type "GParamInt")
  (docs "Space which is inserted between cells of an item")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property row-spacing
  (of-object "GtkIconView")
  (prop-type "GParamInt")
  (docs "Space which is inserted between grid rows")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "6")
)

(define-property column-spacing
  (of-object "GtkIconView")
  (prop-type "GParamInt")
  (docs "Space which is inserted between grid columns")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "6")
)

(define-property margin
  (of-object "GtkIconView")
  (prop-type "GParamInt")
  (docs "Space which is inserted at the edges of the icon view")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "6")
)

(define-property reorderable
  (of-object "GtkIconView")
  (prop-type "GParamBoolean")
  (docs "View is reorderable")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property tooltip-column
  (of-object "GtkIconView")
  (prop-type "GParamInt")
  (docs "The column in the model containing the tooltip texts for the items")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property item-padding
  (of-object "GtkIconView")
  (prop-type "GParamInt")
  (docs "Padding around icon view items")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "6")
)

(define-property cell-area
  (of-object "GtkIconView")
  (prop-type "GParamObject")
  (docs "The GtkCellArea used to layout cells")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property activate-on-single-click
  (of-object "GtkIconView")
  (prop-type "GParamBoolean")
  (docs "Activate row on a single click")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkKeyvalTrigger

(define-property keyval
  (of-object "GtkKeyvalTrigger")
  (prop-type "GParamUInt")
  (docs "The key value for the trigger")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "0")
)

(define-property modifiers
  (of-object "GtkKeyvalTrigger")
  (prop-type "GParamFlags")
  (docs "The key modifiers for the trigger")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "0")
)

;; From GtkLabel

(define-signal activate-link
  (of-object "GtkLabel")
  (return-type "gboolean")
  (flags "Run Last")
  (parameters
    '("const-gchar*" "p0")
  )
)

(define-signal move-cursor
  (of-object "GtkLabel")
  (return-type "void")
  (flags "Run Last, Action")
  (parameters
    '("GtkMovementStep" "p0")
    '("gint" "p1")
    '("gboolean" "p2")
  )
)

(define-signal copy-clipboard
  (of-object "GtkLabel")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal activate-current-link
  (of-object "GtkLabel")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-property label
  (of-object "GtkLabel")
  (prop-type "GParamString")
  (docs "The text of the label")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property attributes
  (of-object "GtkLabel")
  (prop-type "GParamBoxed")
  (docs "A list of style attributes to apply to the text of the label")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property use-markup
  (of-object "GtkLabel")
  (prop-type "GParamBoolean")
  (docs "The text of the label includes XML markup. See pango_parse_markup()")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property use-underline
  (of-object "GtkLabel")
  (prop-type "GParamBoolean")
  (docs "If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property justify
  (of-object "GtkLabel")
  (prop-type "GParamEnum")
  (docs "The alignment of the lines in the text of the label relative to each other. This does NOT affect the alignment of the label within its allocation. See GtkLabel:xalign for that")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_JUSTIFY_LEFT")
)

(define-property wrap
  (of-object "GtkLabel")
  (prop-type "GParamBoolean")
  (docs "If set, wrap lines if the text becomes too wide")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property wrap-mode
  (of-object "GtkLabel")
  (prop-type "GParamEnum")
  (docs "If wrap is set, controls how linewrapping is done")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "PANGO_WRAP_WORD")
)

(define-property selectable
  (of-object "GtkLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the label text can be selected with the mouse")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property mnemonic-keyval
  (of-object "GtkLabel")
  (prop-type "GParamUInt")
  (docs "The mnemonic accelerator key for this label")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "16777215")
)

(define-property mnemonic-widget
  (of-object "GtkLabel")
  (prop-type "GParamObject")
  (docs "The widget to be activated when the label’s mnemonic key is pressed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ellipsize
  (of-object "GtkLabel")
  (prop-type "GParamEnum")
  (docs "The preferred place to ellipsize the string, if the label does not have enough room to display the entire string")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "PANGO_ELLIPSIZE_NONE")
)

(define-property width-chars
  (of-object "GtkLabel")
  (prop-type "GParamInt")
  (docs "The desired width of the label, in characters")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property single-line-mode
  (of-object "GtkLabel")
  (prop-type "GParamBoolean")
  (docs "Whether the label is in single line mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property max-width-chars
  (of-object "GtkLabel")
  (prop-type "GParamInt")
  (docs "The desired maximum width of the label, in characters")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property lines
  (of-object "GtkLabel")
  (prop-type "GParamInt")
  (docs "The desired number of lines, when ellipsizing a wrapping label")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property xalign
  (of-object "GtkLabel")
  (prop-type "GParamFloat")
  (docs "The horizontal alignment, from 0 (left) to 1 (right). Reversed for RTL layouts.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0.5")
)

(define-property yalign
  (of-object "GtkLabel")
  (prop-type "GParamFloat")
  (docs "The vertical alignment, from 0 (top) to 1 (bottom)")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0.5")
)

(define-property extra-menu
  (of-object "GtkLabel")
  (prop-type "GParamObject")
  (docs "Menu model to append to the context menu")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkLayoutChild

(define-property layout-manager
  (of-object "GtkLayoutChild")
  (prop-type "GParamObject")
  (docs "The layout manager that created this object")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property child-widget
  (of-object "GtkLayoutChild")
  (prop-type "GParamObject")
  (docs "The child widget that is associated to this object")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From GtkLevelBar

(define-signal offset-changed
  (of-object "GtkLevelBar")
  (return-type "void")
  (flags "Run First")
  (detailed #t)
  (parameters
    '("const-gchar*" "p0")
  )
)

(define-property value
  (of-object "GtkLevelBar")
  (prop-type "GParamDouble")
  (docs "Currently filled value level of the level bar")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property min-value
  (of-object "GtkLevelBar")
  (prop-type "GParamDouble")
  (docs "Minimum value level that can be displayed by the bar")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property max-value
  (of-object "GtkLevelBar")
  (prop-type "GParamDouble")
  (docs "Maximum value level that can be displayed by the bar")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "1")
)

(define-property mode
  (of-object "GtkLevelBar")
  (prop-type "GParamEnum")
  (docs "The mode of the value indicator displayed by the bar")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_LEVEL_BAR_MODE_CONTINUOUS")
)

(define-property inverted
  (of-object "GtkLevelBar")
  (prop-type "GParamBoolean")
  (docs "Invert the direction in which the level bar grows")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkLinkButton

(define-signal activate-link
  (of-object "GtkLinkButton")
  (return-type "gboolean")
  (flags "Run Last")
)

(define-property uri
  (of-object "GtkLinkButton")
  (prop-type "GParamString")
  (docs "The URI bound to this button")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property visited
  (of-object "GtkLinkButton")
  (prop-type "GParamBoolean")
  (docs "Whether this link has been visited.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkListBox

(define-signal move-cursor
  (of-object "GtkListBox")
  (return-type "void")
  (flags "Run Last, Action")
  (parameters
    '("GtkMovementStep" "p0")
    '("gint" "p1")
    '("gboolean" "p2")
    '("gboolean" "p3")
  )
)

(define-signal select-all
  (of-object "GtkListBox")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal unselect-all
  (of-object "GtkListBox")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal row-selected
  (of-object "GtkListBox")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkListBoxRow*" "p0")
  )
)

(define-signal selected-rows-changed
  (of-object "GtkListBox")
  (return-type "void")
  (flags "Run First")
)

(define-signal row-activated
  (of-object "GtkListBox")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkListBoxRow*" "p0")
  )
)

(define-signal activate-cursor-row
  (of-object "GtkListBox")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal toggle-cursor-row
  (of-object "GtkListBox")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-property selection-mode
  (of-object "GtkListBox")
  (prop-type "GParamEnum")
  (docs "The selection mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_SELECTION_SINGLE")
)

(define-property activate-on-single-click
  (of-object "GtkListBox")
  (prop-type "GParamBoolean")
  (docs "Activate row on a single click")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property accept-unpaired-release
  (of-object "GtkListBox")
  (prop-type "GParamBoolean")
  (docs "Accept unpaired release")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property show-separators
  (of-object "GtkListBox")
  (prop-type "GParamBoolean")
  (docs "Show separators between rows")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkListBoxRow

(define-signal activate
  (of-object "GtkListBoxRow")
  (return-type "void")
  (flags "Run First, Action")
)

(define-property activatable
  (of-object "GtkListBoxRow")
  (prop-type "GParamBoolean")
  (docs "Whether this row can be activated")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property selectable
  (of-object "GtkListBoxRow")
  (prop-type "GParamBoolean")
  (docs "Whether this row can be selected")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property child
  (of-object "GtkListBoxRow")
  (prop-type "GParamObject")
  (docs "The child widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkListItem

(define-property activatable
  (of-object "GtkListItem")
  (prop-type "GParamBoolean")
  (docs "If the item can be activated by the user")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property child
  (of-object "GtkListItem")
  (prop-type "GParamObject")
  (docs "Widget used for display")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property item
  (of-object "GtkListItem")
  (prop-type "GParamObject")
  (docs "Displayed item")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property position
  (of-object "GtkListItem")
  (prop-type "GParamUInt")
  (docs "Position of the item")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "4294967295")
)

(define-property selectable
  (of-object "GtkListItem")
  (prop-type "GParamBoolean")
  (docs "If the item can be selected by the user")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property selected
  (of-object "GtkListItem")
  (prop-type "GParamBoolean")
  (docs "If the item is currently selected")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkListView

(define-signal activate
  (of-object "GtkListView")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("guint" "p0")
  )
)

(define-property factory
  (of-object "GtkListView")
  (prop-type "GParamObject")
  (docs "Factory for populating list items")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property model
  (of-object "GtkListView")
  (prop-type "GParamObject")
  (docs "Model for the items displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property show-separators
  (of-object "GtkListView")
  (prop-type "GParamBoolean")
  (docs "Show separators between rows")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property single-click-activate
  (of-object "GtkListView")
  (prop-type "GParamBoolean")
  (docs "Activate rows on single click")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property enable-rubberband
  (of-object "GtkListView")
  (prop-type "GParamBoolean")
  (docs "Allow selecting items by dragging with the mouse")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkLockButton

(define-property permission
  (of-object "GtkLockButton")
  (prop-type "GParamObject")
  (docs "The GPermission object controlling this button")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property text-lock
  (of-object "GtkLockButton")
  (prop-type "GParamString")
  (docs "The text to display when prompting the user to lock")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "Lock")
)

(define-property text-unlock
  (of-object "GtkLockButton")
  (prop-type "GParamString")
  (docs "The text to display when prompting the user to unlock")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "Unlock")
)

(define-property tooltip-lock
  (of-object "GtkLockButton")
  (prop-type "GParamString")
  (docs "The tooltip to display when prompting the user to lock")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "Dialog is unlocked.\nClick to prevent further changes")
)

(define-property tooltip-unlock
  (of-object "GtkLockButton")
  (prop-type "GParamString")
  (docs "The tooltip to display when prompting the user to unlock")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "Dialog is locked.\nClick to make changes")
)

(define-property tooltip-not-authorized
  (of-object "GtkLockButton")
  (prop-type "GParamString")
  (docs "The tooltip to display when prompting the user cannot obtain authorization")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "System policy prevents changes.\nContact your system administrator")
)

;; From GtkMediaControls

(define-property media-stream
  (of-object "GtkMediaControls")
  (prop-type "GParamObject")
  (docs "The media stream managed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkMediaFile

(define-property file
  (of-object "GtkMediaFile")
  (prop-type "GParamObject")
  (docs "File being played back")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property input-stream
  (of-object "GtkMediaFile")
  (prop-type "GParamObject")
  (docs "Input stream being played back")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkMediaStream

(define-property prepared
  (of-object "GtkMediaStream")
  (prop-type "GParamBoolean")
  (docs "Whether the stream has finished initializing")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property error
  (of-object "GtkMediaStream")
  (prop-type "GParamBoxed")
  (docs "Error the stream is in")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property has-audio
  (of-object "GtkMediaStream")
  (prop-type "GParamBoolean")
  (docs "Whether the stream contains audio")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property has-video
  (of-object "GtkMediaStream")
  (prop-type "GParamBoolean")
  (docs "Whether the stream contains video")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property playing
  (of-object "GtkMediaStream")
  (prop-type "GParamBoolean")
  (docs "Whether the stream is playing")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property ended
  (of-object "GtkMediaStream")
  (prop-type "GParamBoolean")
  (docs "Set when playback has finished")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property timestamp
  (of-object "GtkMediaStream")
  (prop-type "GParamInt64")
  (docs "Timestamp in microseconds")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "0")
)

(define-property duration
  (of-object "GtkMediaStream")
  (prop-type "GParamInt64")
  (docs "Timestamp in microseconds")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "0")
)

(define-property seekable
  (of-object "GtkMediaStream")
  (prop-type "GParamBoolean")
  (docs "Set unless seeking is not supported")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property seeking
  (of-object "GtkMediaStream")
  (prop-type "GParamBoolean")
  (docs "Set while a seek is in progress")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property loop
  (of-object "GtkMediaStream")
  (prop-type "GParamBoolean")
  (docs "Try to restart the media from the beginning once it ended.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property muted
  (of-object "GtkMediaStream")
  (prop-type "GParamBoolean")
  (docs "Whether the audio stream should be muted.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property volume
  (of-object "GtkMediaStream")
  (prop-type "GParamDouble")
  (docs "Volume of the audio stream.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "1")
)

;; From GtkMenuButton

(define-property menu-model
  (of-object "GtkMenuButton")
  (prop-type "GParamObject")
  (docs "The model from which the popup is made.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property direction
  (of-object "GtkMenuButton")
  (prop-type "GParamEnum")
  (docs "The direction the arrow should point.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_ARROW_DOWN")
)

(define-property popover
  (of-object "GtkMenuButton")
  (prop-type "GParamObject")
  (docs "The popover")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-name
  (of-object "GtkMenuButton")
  (prop-type "GParamString")
  (docs "The name of the icon used to automatically populate the button")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property label
  (of-object "GtkMenuButton")
  (prop-type "GParamString")
  (docs "The label for the button")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property use-underline
  (of-object "GtkMenuButton")
  (prop-type "GParamBoolean")
  (docs "If set, an underline in the text indicates the next character should be used for the mnemonic accelerator key")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property has-frame
  (of-object "GtkMenuButton")
  (prop-type "GParamBoolean")
  (docs "Whether the button has a frame")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

;; From GtkMessageDialog

(define-property message-type
  (of-object "GtkMessageDialog")
  (prop-type "GParamEnum")
  (docs "The type of message")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_MESSAGE_INFO")
)

(define-property buttons
  (of-object "GtkMessageDialog")
  (prop-type "GParamEnum")
  (docs "The buttons shown in the message dialog")
  (readable #f)
  (writable #t)
  (construct-only #t)
  (default-value "GTK_BUTTONS_NONE")
)

(define-property text
  (of-object "GtkMessageDialog")
  (prop-type "GParamString")
  (docs "The primary text of the message dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property use-markup
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "The primary text of the title includes Pango markup.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property secondary-text
  (of-object "GtkMessageDialog")
  (prop-type "GParamString")
  (docs "The secondary text of the message dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property secondary-use-markup
  (of-object "GtkMessageDialog")
  (prop-type "GParamBoolean")
  (docs "The secondary text includes Pango markup.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property message-area
  (of-object "GtkMessageDialog")
  (prop-type "GParamObject")
  (docs "GtkBox that holds the dialog’s primary and secondary labels")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From GtkMnemonicTrigger

(define-property keyval
  (of-object "GtkMnemonicTrigger")
  (prop-type "GParamUInt")
  (docs "The key value for the trigger")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "0")
)

;; From GtkMultiSelection

(define-property model
  (of-object "GtkMultiSelection")
  (prop-type "GParamObject")
  (docs "List managed by this selection")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkNamedAction

(define-property action-name
  (of-object "GtkNamedAction")
  (prop-type "GParamString")
  (docs "The name of the action to activate")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "")
)

;; From GtkNativeDialog

(define-signal response
  (of-object "GtkNativeDialog")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("gint" "p0")
  )
)

(define-property title
  (of-object "GtkNativeDialog")
  (prop-type "GParamString")
  (docs "The title of the file chooser dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property visible
  (of-object "GtkNativeDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the dialog is currently visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property modal
  (of-object "GtkNativeDialog")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the dialog is modal (other windows are not usable while this one is up)")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property transient-for
  (of-object "GtkNativeDialog")
  (prop-type "GParamObject")
  (docs "The transient parent of the dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkNoSelection

(define-property model
  (of-object "GtkNoSelection")
  (prop-type "GParamObject")
  (docs "The model being managed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkNotebook

(define-signal switch-page
  (of-object "GtkNotebook")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkWidget*" "p0")
    '("guint" "p1")
  )
)

(define-signal focus-tab
  (of-object "GtkNotebook")
  (return-type "gboolean")
  (flags "Run Last, Action")
  (parameters
    '("GtkNotebookTab" "p0")
  )
)

(define-signal select-page
  (of-object "GtkNotebook")
  (return-type "gboolean")
  (flags "Run Last, Action")
  (parameters
    '("gboolean" "p0")
  )
)

(define-signal change-current-page
  (of-object "GtkNotebook")
  (return-type "gboolean")
  (flags "Run Last, Action")
  (parameters
    '("gint" "p0")
  )
)

(define-signal move-focus-out
  (of-object "GtkNotebook")
  (return-type "void")
  (flags "Run Last, Action")
  (parameters
    '("GtkDirectionType" "p0")
  )
)

(define-signal reorder-tab
  (of-object "GtkNotebook")
  (return-type "gboolean")
  (flags "Run Last, Action")
  (parameters
    '("GtkDirectionType" "p0")
    '("gboolean" "p1")
  )
)

(define-signal page-reordered
  (of-object "GtkNotebook")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkWidget*" "p0")
    '("guint" "p1")
  )
)

(define-signal page-removed
  (of-object "GtkNotebook")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkWidget*" "p0")
    '("guint" "p1")
  )
)

(define-signal page-added
  (of-object "GtkNotebook")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkWidget*" "p0")
    '("guint" "p1")
  )
)

(define-signal create-window
  (of-object "GtkNotebook")
  (return-type "GtkNotebook*")
  (flags "Run Last")
  (parameters
    '("GtkWidget*" "p0")
  )
)

(define-property tab-pos
  (of-object "GtkNotebook")
  (prop-type "GParamEnum")
  (docs "Which side of the notebook holds the tabs")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_POS_TOP")
)

(define-property show-tabs
  (of-object "GtkNotebook")
  (prop-type "GParamBoolean")
  (docs "Whether tabs should be shown")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property show-border
  (of-object "GtkNotebook")
  (prop-type "GParamBoolean")
  (docs "Whether the border should be shown")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property scrollable
  (of-object "GtkNotebook")
  (prop-type "GParamBoolean")
  (docs "If TRUE, scroll arrows are added if there are too many tabs to fit")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property page
  (of-object "GtkNotebook")
  (prop-type "GParamInt")
  (docs "The index of the current page")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property enable-popup
  (of-object "GtkNotebook")
  (prop-type "GParamBoolean")
  (docs "If TRUE, pressing the right mouse button on the notebook pops up a menu that you can use to go to a page")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property group-name
  (of-object "GtkNotebook")
  (prop-type "GParamString")
  (docs "Group name for tab drag and drop")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property pages
  (of-object "GtkNotebook")
  (prop-type "GParamObject")
  (docs "The pages of the notebook.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From GtkNotebookPage

(define-property tab-label
  (of-object "GtkNotebookPage")
  (prop-type "GParamString")
  (docs "The text of the tab widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property menu-label
  (of-object "GtkNotebookPage")
  (prop-type "GParamString")
  (docs "The text of the menu widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property position
  (of-object "GtkNotebookPage")
  (prop-type "GParamInt")
  (docs "The index of the child in the parent")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property tab-expand
  (of-object "GtkNotebookPage")
  (prop-type "GParamBoolean")
  (docs "Whether to expand the child’s tab")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property tab-fill
  (of-object "GtkNotebookPage")
  (prop-type "GParamBoolean")
  (docs "Whether the child’s tab should fill the allocated area")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property reorderable
  (of-object "GtkNotebookPage")
  (prop-type "GParamBoolean")
  (docs "Whether the tab is reorderable by user action")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property detachable
  (of-object "GtkNotebookPage")
  (prop-type "GParamBoolean")
  (docs "Whether the tab is detachable")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property child
  (of-object "GtkNotebookPage")
  (prop-type "GParamObject")
  (docs "The child for this page")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property tab
  (of-object "GtkNotebookPage")
  (prop-type "GParamObject")
  (docs "The tab widget for this page")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property menu
  (of-object "GtkNotebookPage")
  (prop-type "GParamObject")
  (docs "The label widget displayed in the child’s menu entry")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From GtkNumericSorter

(define-property expression
  (of-object "GtkNumericSorter")
  (prop-type "GtkParamSpecExpression")
  (docs "Expression to compare with")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property sort-order
  (of-object "GtkNumericSorter")
  (prop-type "GParamEnum")
  (docs "Whether to sort smaller numbers first")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_SORT_ASCENDING")
)

;; From GtkOrientable

(define-property orientation
  (of-object "GtkOrientable")
  (prop-type "GParamEnum")
  (docs "The orientation of the orientable")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_ORIENTATION_HORIZONTAL")
)

;; From GtkOverlay

(define-signal get-child-position
  (of-object "GtkOverlay")
  (return-type "gboolean")
  (flags "Run Last")
  (parameters
    '("GtkWidget*" "p0")
    '("GdkRectangle*" "p1")
  )
)

(define-property child
  (of-object "GtkOverlay")
  (prop-type "GParamObject")
  (docs "The child widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkOverlayLayout

;; From GtkPadController

(define-property action-group
  (of-object "GtkPadController")
  (prop-type "GParamObject")
  (docs "Action group to launch actions from")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property pad
  (of-object "GtkPadController")
  (prop-type "GParamObject")
  (docs "Pad device to control")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From GtkPaned

(define-signal cycle-child-focus
  (of-object "GtkPaned")
  (return-type "gboolean")
  (flags "Run Last, Action")
  (parameters
    '("gboolean" "p0")
  )
)

(define-signal toggle-handle-focus
  (of-object "GtkPaned")
  (return-type "gboolean")
  (flags "Run Last, Action")
)

(define-signal move-handle
  (of-object "GtkPaned")
  (return-type "gboolean")
  (flags "Run Last, Action")
  (parameters
    '("GtkScrollType" "p0")
  )
)

(define-signal cycle-handle-focus
  (of-object "GtkPaned")
  (return-type "gboolean")
  (flags "Run Last, Action")
  (parameters
    '("gboolean" "p0")
  )
)

(define-signal accept-position
  (of-object "GtkPaned")
  (return-type "gboolean")
  (flags "Run Last, Action")
)

(define-signal cancel-position
  (of-object "GtkPaned")
  (return-type "gboolean")
  (flags "Run Last, Action")
)

(define-property position
  (of-object "GtkPaned")
  (prop-type "GParamInt")
  (docs "Position of paned separator in pixels (0 means all the way to the left/top)")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property position-set
  (of-object "GtkPaned")
  (prop-type "GParamBoolean")
  (docs "TRUE if the Position property should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property min-position
  (of-object "GtkPaned")
  (prop-type "GParamInt")
  (docs "Smallest possible value for the “position” property")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "0")
)

(define-property max-position
  (of-object "GtkPaned")
  (prop-type "GParamInt")
  (docs "Largest possible value for the “position” property")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "2147483647")
)

(define-property wide-handle
  (of-object "GtkPaned")
  (prop-type "GParamBoolean")
  (docs "Whether the paned should have a prominent handle")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property resize-start-child
  (of-object "GtkPaned")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the first child expands and shrinks along with the paned widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property resize-end-child
  (of-object "GtkPaned")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the second child expands and shrinks along with the paned widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property shrink-start-child
  (of-object "GtkPaned")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the first child can be made smaller than its requisition")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property shrink-end-child
  (of-object "GtkPaned")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the second child can be made smaller than its requisition")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property start-child
  (of-object "GtkPaned")
  (prop-type "GParamObject")
  (docs "The first child")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property end-child
  (of-object "GtkPaned")
  (prop-type "GParamObject")
  (docs "The second child")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkPasswordEntry

(define-signal activate
  (of-object "GtkPasswordEntry")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-property placeholder-text
  (of-object "GtkPasswordEntry")
  (prop-type "GParamString")
  (docs "Show text in the entry when it’s empty and unfocused")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property activates-default
  (of-object "GtkPasswordEntry")
  (prop-type "GParamBoolean")
  (docs "Whether to activate the default widget (such as the default button in a dialog) when Enter is pressed")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property show-peek-icon
  (of-object "GtkPasswordEntry")
  (prop-type "GParamBoolean")
  (docs "Whether to show an icon for revealing the content")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property extra-menu
  (of-object "GtkPasswordEntry")
  (prop-type "GParamObject")
  (docs "Model menu to append to the context menu")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkPicture

(define-property paintable
  (of-object "GtkPicture")
  (prop-type "GParamObject")
  (docs "The GdkPaintable to display")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property file
  (of-object "GtkPicture")
  (prop-type "GParamObject")
  (docs "File to load and display")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property alternative-text
  (of-object "GtkPicture")
  (prop-type "GParamString")
  (docs "The alternative textual description")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property keep-aspect-ratio
  (of-object "GtkPicture")
  (prop-type "GParamBoolean")
  (docs "Render contents respecting the aspect ratio")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property can-shrink
  (of-object "GtkPicture")
  (prop-type "GParamBoolean")
  (docs "Allow self to be smaller than contents")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

;; From GtkPopover

(define-signal closed
  (of-object "GtkPopover")
  (return-type "void")
  (flags "Run Last")
)

(define-signal activate-default
  (of-object "GtkPopover")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-property pointing-to
  (of-object "GtkPopover")
  (prop-type "GParamBoxed")
  (docs "Rectangle the bubble window points to")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property position
  (of-object "GtkPopover")
  (prop-type "GParamEnum")
  (docs "Position to place the bubble window")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_POS_BOTTOM")
)

(define-property autohide
  (of-object "GtkPopover")
  (prop-type "GParamBoolean")
  (docs "Whether to dismiss the popover on outside clicks")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property default-widget
  (of-object "GtkPopover")
  (prop-type "GParamObject")
  (docs "The default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-arrow
  (of-object "GtkPopover")
  (prop-type "GParamBoolean")
  (docs "Whether to draw an arrow")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property mnemonics-visible
  (of-object "GtkPopover")
  (prop-type "GParamBoolean")
  (docs "Whether mnemonics are currently visible in this popover")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property child
  (of-object "GtkPopover")
  (prop-type "GParamObject")
  (docs "The child widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cascade-popdown
  (of-object "GtkPopover")
  (prop-type "GParamBoolean")
  (docs "Whether the popover pops down after a child popover")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkPopoverMenu

(define-property visible-submenu
  (of-object "GtkPopoverMenu")
  (prop-type "GParamString")
  (docs "The name of the visible submenu")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property menu-model
  (of-object "GtkPopoverMenu")
  (prop-type "GParamObject")
  (docs "The model from which the menu is made.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkPopoverMenuBar

(define-property menu-model
  (of-object "GtkPopoverMenuBar")
  (prop-type "GParamObject")
  (docs "The model from which the bar is made.")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkPrinter

(define-signal details-acquired
  (of-object "GtkPrinter")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("gboolean" "p0")
  )
)

(define-property name
  (of-object "GtkPrinter")
  (prop-type "GParamString")
  (docs "Name of the printer")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "")
)

(define-property backend
  (of-object "GtkPrinter")
  (prop-type "GParamObject")
  (docs "Backend for the printer")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property is-virtual
  (of-object "GtkPrinter")
  (prop-type "GParamBoolean")
  (docs "FALSE if this represents a real hardware printer")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "FALSE")
)

(define-property state-message
  (of-object "GtkPrinter")
  (prop-type "GParamString")
  (docs "String giving the current state of the printer")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "")
)

(define-property location
  (of-object "GtkPrinter")
  (prop-type "GParamString")
  (docs "The location of the printer")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "")
)

(define-property icon-name
  (of-object "GtkPrinter")
  (prop-type "GParamString")
  (docs "The icon name to use for the printer")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "printer")
)

(define-property job-count
  (of-object "GtkPrinter")
  (prop-type "GParamInt")
  (docs "Number of jobs queued in the printer")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "0")
)

(define-property accepts-pdf
  (of-object "GtkPrinter")
  (prop-type "GParamBoolean")
  (docs "TRUE if this printer can accept PDF")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "FALSE")
)

(define-property accepts-ps
  (of-object "GtkPrinter")
  (prop-type "GParamBoolean")
  (docs "TRUE if this printer can accept PostScript")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "TRUE")
)

(define-property paused
  (of-object "GtkPrinter")
  (prop-type "GParamBoolean")
  (docs "TRUE if this printer is paused")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property accepting-jobs
  (of-object "GtkPrinter")
  (prop-type "GParamBoolean")
  (docs "TRUE if this printer is accepting new jobs")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "TRUE")
)

;; From GtkPrintJob

(define-signal status-changed
  (of-object "GtkPrintJob")
  (return-type "void")
  (flags "Run Last")
)

(define-property title
  (of-object "GtkPrintJob")
  (prop-type "GParamString")
  (docs "Title of the print job")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "")
)

(define-property printer
  (of-object "GtkPrintJob")
  (prop-type "GParamObject")
  (docs "Printer to print the job to")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property page-setup
  (of-object "GtkPrintJob")
  (prop-type "GParamObject")
  (docs "Page Setup")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property settings
  (of-object "GtkPrintJob")
  (prop-type "GParamObject")
  (docs "Printer settings")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property track-print-status
  (of-object "GtkPrintJob")
  (prop-type "GParamBoolean")
  (docs "TRUE if the print job will continue to emit status-changed signals after the print data has been sent to the printer or print server.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkPrintOperation

(define-signal status-changed
  (of-object "GtkPrintOperation")
  (return-type "void")
  (flags "Run Last")
)

(define-signal done
  (of-object "GtkPrintOperation")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkPrintOperationResult" "p0")
  )
)

(define-signal begin-print
  (of-object "GtkPrintOperation")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkPrintContext*" "p0")
  )
)

(define-signal paginate
  (of-object "GtkPrintOperation")
  (return-type "gboolean")
  (flags "Run Last")
  (parameters
    '("GtkPrintContext*" "p0")
  )
)

(define-signal request-page-setup
  (of-object "GtkPrintOperation")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkPrintContext*" "p0")
    '("gint" "p1")
    '("GtkPageSetup*" "p2")
  )
)

(define-signal draw-page
  (of-object "GtkPrintOperation")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkPrintContext*" "p0")
    '("gint" "p1")
  )
)

(define-signal end-print
  (of-object "GtkPrintOperation")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkPrintContext*" "p0")
  )
)

(define-signal create-custom-widget
  (of-object "GtkPrintOperation")
  (return-type "GtkWidget*")
  (flags "Run Last")
)

(define-signal update-custom-widget
  (of-object "GtkPrintOperation")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkWidget*" "p0")
    '("GtkPageSetup*" "p1")
    '("GtkPrintSettings*" "p2")
  )
)

(define-signal custom-widget-apply
  (of-object "GtkPrintOperation")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkWidget*" "p0")
  )
)

(define-signal preview
  (of-object "GtkPrintOperation")
  (return-type "gboolean")
  (flags "Run Last")
  (parameters
    '("GtkPrintOperationPreview*" "p0")
    '("GtkPrintContext*" "p1")
    '("GtkWindow*" "p2")
  )
)

(define-property default-page-setup
  (of-object "GtkPrintOperation")
  (prop-type "GParamObject")
  (docs "The GtkPageSetup used by default")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property print-settings
  (of-object "GtkPrintOperation")
  (prop-type "GParamObject")
  (docs "The GtkPrintSettings used for initializing the dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property job-name
  (of-object "GtkPrintOperation")
  (prop-type "GParamString")
  (docs "A string used for identifying the print job.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property n-pages
  (of-object "GtkPrintOperation")
  (prop-type "GParamInt")
  (docs "The number of pages in the document.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property current-page
  (of-object "GtkPrintOperation")
  (prop-type "GParamInt")
  (docs "The current page in the document")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property use-full-page
  (of-object "GtkPrintOperation")
  (prop-type "GParamBoolean")
  (docs "TRUE if the origin of the context should be at the corner of the page and not the corner of the imageable area")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property track-print-status
  (of-object "GtkPrintOperation")
  (prop-type "GParamBoolean")
  (docs "TRUE if the print operation will continue to report on the print job status after the print data has been sent to the printer or print server.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property unit
  (of-object "GtkPrintOperation")
  (prop-type "GParamEnum")
  (docs "The unit in which distances can be measured in the context")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_UNIT_NONE")
)

(define-property show-progress
  (of-object "GtkPrintOperation")
  (prop-type "GParamBoolean")
  (docs "TRUE if a progress dialog is shown while printing.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property allow-async
  (of-object "GtkPrintOperation")
  (prop-type "GParamBoolean")
  (docs "TRUE if print process may run asynchronous.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property export-filename
  (of-object "GtkPrintOperation")
  (prop-type "GParamString")
  (docs "Export filename")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property status
  (of-object "GtkPrintOperation")
  (prop-type "GParamEnum")
  (docs "The status of the print operation")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "GTK_PRINT_STATUS_INITIAL")
)

(define-property status-string
  (of-object "GtkPrintOperation")
  (prop-type "GParamString")
  (docs "A human-readable description of the status")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "")
)

(define-property custom-tab-label
  (of-object "GtkPrintOperation")
  (prop-type "GParamString")
  (docs "Label for the tab containing custom widgets.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property embed-page-setup
  (of-object "GtkPrintOperation")
  (prop-type "GParamBoolean")
  (docs "TRUE if page setup combos are embedded in GtkPrintUnixDialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property has-selection
  (of-object "GtkPrintOperation")
  (prop-type "GParamBoolean")
  (docs "TRUE if a selection exists.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property support-selection
  (of-object "GtkPrintOperation")
  (prop-type "GParamBoolean")
  (docs "TRUE if the print operation will support print of selection.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property n-pages-to-print
  (of-object "GtkPrintOperation")
  (prop-type "GParamInt")
  (docs "The number of pages that will be printed.")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "-1")
)

;; From GtkPrintOperationPreview

(define-signal ready
  (of-object "GtkPrintOperationPreview")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkPrintContext*" "p0")
  )
)

(define-signal got-page-size
  (of-object "GtkPrintOperationPreview")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkPrintContext*" "p0")
    '("GtkPageSetup*" "p1")
  )
)

;; From GtkPageSetupUnixDialog

;; From GtkPrintUnixDialog

(define-property page-setup
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamObject")
  (docs "The GtkPageSetup to use")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property current-page
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamInt")
  (docs "The current page in the document")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property print-settings
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamObject")
  (docs "The GtkPrintSettings used for initializing the dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property selected-printer
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamObject")
  (docs "The GtkPrinter which is selected")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property manual-capabilities
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamFlags")
  (docs "Capabilities the application can handle")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property support-selection
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the dialog supports selection")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property has-selection
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "Whether the application has a selection")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property embed-page-setup
  (of-object "GtkPrintUnixDialog")
  (prop-type "GParamBoolean")
  (docs "TRUE if page setup combos are embedded in GtkPrintUnixDialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkPrintSettings

;; From GtkPrintOperationPreview

(define-signal ready
  (of-object "GtkPrintOperationPreview")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkPrintContext*" "p0")
  )
)

(define-signal got-page-size
  (of-object "GtkPrintOperationPreview")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkPrintContext*" "p0")
    '("GtkPageSetup*" "p1")
  )
)

;; From GtkProgressBar

(define-property fraction
  (of-object "GtkProgressBar")
  (prop-type "GParamDouble")
  (docs "The fraction of total work that has been completed")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property pulse-step
  (of-object "GtkProgressBar")
  (prop-type "GParamDouble")
  (docs "The fraction of total progress to move the bouncing block when pulsed")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0.1")
)

(define-property inverted
  (of-object "GtkProgressBar")
  (prop-type "GParamBoolean")
  (docs "Invert the direction in which the progress bar grows")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property text
  (of-object "GtkProgressBar")
  (prop-type "GParamString")
  (docs "Text to be displayed in the progress bar")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property show-text
  (of-object "GtkProgressBar")
  (prop-type "GParamBoolean")
  (docs "Whether the progress is shown as text.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property ellipsize
  (of-object "GtkProgressBar")
  (prop-type "GParamEnum")
  (docs "The preferred place to ellipsize the string, if the progress bar does not have enough room to display the entire string, if at all.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "PANGO_ELLIPSIZE_NONE")
)

;; From GtkRange

(define-signal value-changed
  (of-object "GtkRange")
  (return-type "void")
  (flags "Run Last")
)

(define-signal adjust-bounds
  (of-object "GtkRange")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("gdouble" "p0")
  )
)

(define-signal move-slider
  (of-object "GtkRange")
  (return-type "void")
  (flags "Run Last, Action")
  (parameters
    '("GtkScrollType" "p0")
  )
)

(define-signal change-value
  (of-object "GtkRange")
  (return-type "gboolean")
  (flags "Run Last")
  (parameters
    '("GtkScrollType" "p0")
    '("gdouble" "p1")
  )
)

(define-property adjustment
  (of-object "GtkRange")
  (prop-type "GParamObject")
  (docs "The GtkAdjustment that contains the current value of this range object")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property inverted
  (of-object "GtkRange")
  (prop-type "GParamBoolean")
  (docs "Invert direction slider moves to increase range value")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property show-fill-level
  (of-object "GtkRange")
  (prop-type "GParamBoolean")
  (docs "Whether to display a fill level indicator graphics on trough.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property restrict-to-fill-level
  (of-object "GtkRange")
  (prop-type "GParamBoolean")
  (docs "Whether to restrict the upper boundary to the fill level.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property fill-level
  (of-object "GtkRange")
  (prop-type "GParamDouble")
  (docs "The fill level.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "1.79769e+308")
)

(define-property round-digits
  (of-object "GtkRange")
  (prop-type "GParamInt")
  (docs "The number of digits to round the value to.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

;; From GtkRecentManager

(define-signal changed
  (of-object "GtkRecentManager")
  (return-type "void")
  (flags "Run First")
)

(define-property filename
  (of-object "GtkRecentManager")
  (prop-type "GParamString")
  (docs "The full path to the file to be used to store and read the list")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "")
)

(define-property size
  (of-object "GtkRecentManager")
  (prop-type "GParamInt")
  (docs "The size of the recently used resources list")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "0")
)

;; From GtkRevealer

(define-property transition-type
  (of-object "GtkRevealer")
  (prop-type "GParamEnum")
  (docs "The type of animation used to transition")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN")
)

(define-property transition-duration
  (of-object "GtkRevealer")
  (prop-type "GParamUInt")
  (docs "The animation duration, in milliseconds")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "250")
)

(define-property reveal-child
  (of-object "GtkRevealer")
  (prop-type "GParamBoolean")
  (docs "Whether the container should reveal the child")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property child-revealed
  (of-object "GtkRevealer")
  (prop-type "GParamBoolean")
  (docs "Whether the child is revealed and the animation target reached")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property child
  (of-object "GtkRevealer")
  (prop-type "GParamObject")
  (docs "The child widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkRoot

;; From GtkScale

(define-property digits
  (of-object "GtkScale")
  (prop-type "GParamInt")
  (docs "The number of decimal places that are displayed in the value")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "1")
)

(define-property draw-value
  (of-object "GtkScale")
  (prop-type "GParamBoolean")
  (docs "Whether the current value is displayed as a string next to the slider")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property has-origin
  (of-object "GtkScale")
  (prop-type "GParamBoolean")
  (docs "Whether the scale has an origin")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property value-pos
  (of-object "GtkScale")
  (prop-type "GParamEnum")
  (docs "The position in which the current value is displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_POS_TOP")
)

;; From GtkScaleButton

(define-signal value-changed
  (of-object "GtkScaleButton")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("gdouble" "p0")
  )
)

(define-signal popup
  (of-object "GtkScaleButton")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal popdown
  (of-object "GtkScaleButton")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-property value
  (of-object "GtkScaleButton")
  (prop-type "GParamDouble")
  (docs "The value of the scale")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property adjustment
  (of-object "GtkScaleButton")
  (prop-type "GParamObject")
  (docs "The GtkAdjustment that contains the current value of this scale button object")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icons
  (of-object "GtkScaleButton")
  (prop-type "GParamBoxed")
  (docs "List of icon names")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkScrollable

(define-property hadjustment
  (of-object "GtkScrollable")
  (prop-type "GParamObject")
  (docs "Horizontal adjustment that is shared between the scrollable widget and its controller")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property hscroll-policy
  (of-object "GtkScrollable")
  (prop-type "GParamEnum")
  (docs "How the size of the content should be determined")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_SCROLL_MINIMUM")
)

(define-property vadjustment
  (of-object "GtkScrollable")
  (prop-type "GParamObject")
  (docs "Vertical adjustment that is shared between the scrollable widget and its controller")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property vscroll-policy
  (of-object "GtkScrollable")
  (prop-type "GParamEnum")
  (docs "How the size of the content should be determined")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_SCROLL_MINIMUM")
)

;; From GtkScrollbar

(define-property adjustment
  (of-object "GtkScrollbar")
  (prop-type "GParamObject")
  (docs "The GtkAdjustment that contains the current value of this scrollbar")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkScrolledWindow

(define-signal move-focus-out
  (of-object "GtkScrolledWindow")
  (return-type "void")
  (flags "Run Last, Action")
  (parameters
    '("GtkDirectionType" "p0")
  )
)

(define-signal scroll-child
  (of-object "GtkScrolledWindow")
  (return-type "gboolean")
  (flags "Run Last, Action")
  (parameters
    '("GtkScrollType" "p0")
    '("gboolean" "p1")
  )
)

(define-signal edge-overshot
  (of-object "GtkScrolledWindow")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkPositionType" "p0")
  )
)

(define-signal edge-reached
  (of-object "GtkScrolledWindow")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkPositionType" "p0")
  )
)

(define-property hadjustment
  (of-object "GtkScrolledWindow")
  (prop-type "GParamObject")
  (docs "The GtkAdjustment for the horizontal position")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property vadjustment
  (of-object "GtkScrolledWindow")
  (prop-type "GParamObject")
  (docs "The GtkAdjustment for the vertical position")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property hscrollbar-policy
  (of-object "GtkScrolledWindow")
  (prop-type "GParamEnum")
  (docs "When the horizontal scrollbar is displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_POLICY_AUTOMATIC")
)

(define-property vscrollbar-policy
  (of-object "GtkScrolledWindow")
  (prop-type "GParamEnum")
  (docs "When the vertical scrollbar is displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_POLICY_AUTOMATIC")
)

(define-property window-placement
  (of-object "GtkScrolledWindow")
  (prop-type "GParamEnum")
  (docs "Where the contents are located with respect to the scrollbars.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_CORNER_TOP_LEFT")
)

(define-property has-frame
  (of-object "GtkScrolledWindow")
  (prop-type "GParamBoolean")
  (docs "Whether to draw a frame around the contents")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property min-content-width
  (of-object "GtkScrolledWindow")
  (prop-type "GParamInt")
  (docs "The minimum width that the scrolled window will allocate to its content")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property min-content-height
  (of-object "GtkScrolledWindow")
  (prop-type "GParamInt")
  (docs "The minimum height that the scrolled window will allocate to its content")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property kinetic-scrolling
  (of-object "GtkScrolledWindow")
  (prop-type "GParamBoolean")
  (docs "Kinetic scrolling mode.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property overlay-scrolling
  (of-object "GtkScrolledWindow")
  (prop-type "GParamBoolean")
  (docs "Overlay scrolling mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property max-content-width
  (of-object "GtkScrolledWindow")
  (prop-type "GParamInt")
  (docs "The maximum width that the scrolled window will allocate to its content")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property max-content-height
  (of-object "GtkScrolledWindow")
  (prop-type "GParamInt")
  (docs "The maximum height that the scrolled window will allocate to its content")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property propagate-natural-width
  (of-object "GtkScrolledWindow")
  (prop-type "GParamBoolean")
  (docs "Propagate Natural Width")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property propagate-natural-height
  (of-object "GtkScrolledWindow")
  (prop-type "GParamBoolean")
  (docs "Propagate Natural Height")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property child
  (of-object "GtkScrolledWindow")
  (prop-type "GParamObject")
  (docs "The child widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkSearchBar

(define-property search-mode-enabled
  (of-object "GtkSearchBar")
  (prop-type "GParamBoolean")
  (docs "Whether the search mode is on and the search bar shown")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property show-close-button
  (of-object "GtkSearchBar")
  (prop-type "GParamBoolean")
  (docs "Whether to show the close button in the toolbar")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property child
  (of-object "GtkSearchBar")
  (prop-type "GParamObject")
  (docs "The child widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property key-capture-widget
  (of-object "GtkSearchBar")
  (prop-type "GParamObject")
  (docs "Key Capture Widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkSearchEntry

(define-signal activate
  (of-object "GtkSearchEntry")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal search-changed
  (of-object "GtkSearchEntry")
  (return-type "void")
  (flags "Run Last")
)

(define-signal next-match
  (of-object "GtkSearchEntry")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal previous-match
  (of-object "GtkSearchEntry")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal stop-search
  (of-object "GtkSearchEntry")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal search-started
  (of-object "GtkSearchEntry")
  (return-type "void")
  (flags "Run Last")
)

(define-property placeholder-text
  (of-object "GtkSearchEntry")
  (prop-type "GParamString")
  (docs "Show text in the entry when it’s empty and unfocused")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property activates-default
  (of-object "GtkSearchEntry")
  (prop-type "GParamBoolean")
  (docs "Whether to activate the default widget (such as the default button in a dialog) when Enter is pressed")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkSelectionModel

(define-signal selection-changed
  (of-object "GtkSelectionModel")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("guint" "p0")
    '("guint" "p1")
  )
)

;; From GtkSelectionFilterModel

(define-property model
  (of-object "GtkSelectionFilterModel")
  (prop-type "GParamObject")
  (docs "The model being filtered")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkSeparator

;; From GtkSettings

(define-property gtk-double-click-time
  (of-object "GtkSettings")
  (prop-type "GParamInt")
  (docs "Maximum time allowed between two clicks for them to be considered a double click (in milliseconds)")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "400")
)

(define-property gtk-double-click-distance
  (of-object "GtkSettings")
  (prop-type "GParamInt")
  (docs "Maximum distance allowed between two clicks for them to be considered a double click (in pixels)")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "5")
)

(define-property gtk-cursor-blink
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether the cursor should blink")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property gtk-cursor-blink-time
  (of-object "GtkSettings")
  (prop-type "GParamInt")
  (docs "Length of the cursor blink cycle, in milliseconds")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "1200")
)

(define-property gtk-cursor-blink-timeout
  (of-object "GtkSettings")
  (prop-type "GParamInt")
  (docs "Time after which the cursor stops blinking, in seconds")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "10")
)

(define-property gtk-split-cursor
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether two cursors should be displayed for mixed left-to-right and right-to-left text")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property gtk-cursor-aspect-ratio
  (of-object "GtkSettings")
  (prop-type "GParamDouble")
  (docs "The aspect ratio of the text caret")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0.04")
)

(define-property gtk-theme-name
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "Name of theme to load")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "Adwaita")
)

(define-property gtk-icon-theme-name
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "Name of icon theme to use")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "Adwaita")
)

(define-property gtk-dnd-drag-threshold
  (of-object "GtkSettings")
  (prop-type "GParamInt")
  (docs "Number of pixels the cursor can move before dragging")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "8")
)

(define-property gtk-font-name
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "The default font family and size to use")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "Sans 10")
)

(define-property gtk-xft-antialias
  (of-object "GtkSettings")
  (prop-type "GParamInt")
  (docs "Whether to antialias Xft fonts; 0=no, 1=yes, -1=default")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property gtk-xft-hinting
  (of-object "GtkSettings")
  (prop-type "GParamInt")
  (docs "Whether to hint Xft fonts; 0=no, 1=yes, -1=default")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property gtk-xft-hintstyle
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "What degree of hinting to use; hintnone, hintslight, hintmedium, or hintfull")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property gtk-xft-rgba
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "Type of subpixel antialiasing; none, rgb, bgr, vrgb, vbgr")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property gtk-xft-dpi
  (of-object "GtkSettings")
  (prop-type "GParamInt")
  (docs "Resolution for Xft, in 1024 * dots/inch. -1 to use default value")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property gtk-cursor-theme-name
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "Name of the cursor theme to use, or NULL to use the default theme")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property gtk-cursor-theme-size
  (of-object "GtkSettings")
  (prop-type "GParamInt")
  (docs "Size to use for cursors, or 0 to use the default size")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property gtk-alternative-button-order
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether buttons in dialogs should use the alternative button order")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property gtk-alternative-sort-arrows
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether the direction of the sort indicators in list and tree views is inverted compared to the default (where down means ascending)")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property gtk-enable-animations
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether to enable toolkit-wide animations.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property gtk-error-bell
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "When TRUE, keyboard navigation and other errors will cause a beep")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property gtk-print-backends
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "List of the GtkPrintBackend backends to use by default")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property gtk-print-preview-command
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "Command to run when displaying a print preview")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "evince --unlink-tempfile --preview --print-settings %s %f")
)

(define-property gtk-enable-accels
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether menu items should have accelerators")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property gtk-im-module
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "Which IM module should be used by default")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property gtk-recent-files-max-age
  (of-object "GtkSettings")
  (prop-type "GParamInt")
  (docs "Maximum age of recently used files, in days")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "30")
)

(define-property gtk-fontconfig-timestamp
  (of-object "GtkSettings")
  (prop-type "GParamUInt")
  (docs "Timestamp of current fontconfig configuration")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property gtk-sound-theme-name
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "XDG sound theme name")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "freedesktop")
)

(define-property gtk-enable-input-feedback-sounds
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether to play event sounds as feedback to user input")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property gtk-enable-event-sounds
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether to play any event sounds at all")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property gtk-primary-button-warps-slider
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether a primary click on the trough should warp the slider into position")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property gtk-application-prefer-dark-theme
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether the application prefers to have a dark theme.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property gtk-entry-select-on-focus
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether to select the contents of an entry when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property gtk-entry-password-hint-timeout
  (of-object "GtkSettings")
  (prop-type "GParamUInt")
  (docs "How long to show the last input character in hidden entries")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property gtk-label-select-on-focus
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether to select the contents of a selectable label when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property gtk-shell-shows-app-menu
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Set to TRUE if the desktop environment is displaying the app menu, FALSE if the app should display it itself.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property gtk-shell-shows-menubar
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Set to TRUE if the desktop environment is displaying the menubar, FALSE if the app should display it itself.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property gtk-shell-shows-desktop
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Set to TRUE if the desktop environment is displaying the desktop folder, FALSE if not.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property gtk-decoration-layout
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "The layout for window decorations")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "menu:minimize,maximize,close")
)

(define-property gtk-titlebar-double-click
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "The action to take on titlebar double-click")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "toggle-maximize")
)

(define-property gtk-titlebar-middle-click
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "The action to take on titlebar middle-click")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "none")
)

(define-property gtk-titlebar-right-click
  (of-object "GtkSettings")
  (prop-type "GParamString")
  (docs "The action to take on titlebar right-click")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "menu")
)

(define-property gtk-dialogs-use-header
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether builtin GTK dialogs should use a header bar instead of an action area.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property gtk-enable-primary-paste
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether a middle click on a mouse should paste the “PRIMARY” clipboard content at the cursor location.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property gtk-recent-files-enabled
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether GTK remembers recent files")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property gtk-long-press-time
  (of-object "GtkSettings")
  (prop-type "GParamUInt")
  (docs "Time for a button/touch press to be considered a long press (in milliseconds)")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "500")
)

(define-property gtk-keynav-use-caret
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether to show cursor in text")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property gtk-overlay-scrolling
  (of-object "GtkSettings")
  (prop-type "GParamBoolean")
  (docs "Whether to use overlay scrollbars")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

;; From GtkShortcut

(define-property action
  (of-object "GtkShortcut")
  (prop-type "GParamObject")
  (docs "The action activated by this shortcut")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property arguments
  (of-object "GtkShortcut")
  (prop-type "GParamVariant")
  (docs "Arguments passed to activation")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property trigger
  (of-object "GtkShortcut")
  (prop-type "GParamObject")
  (docs "The trigger for this shortcut")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkShortcutController

(define-property mnemonic-modifiers
  (of-object "GtkShortcutController")
  (prop-type "GParamFlags")
  (docs "The modifiers to be pressed to allow mnemonics activation")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GDK_ALT_MASK")
)

(define-property model
  (of-object "GtkShortcutController")
  (prop-type "GParamObject")
  (docs "A list model to take shortcuts from")
  (readable #f)
  (writable #t)
  (construct-only #t)
)

(define-property scope
  (of-object "GtkShortcutController")
  (prop-type "GParamEnum")
  (docs "What scope the shortcuts will be handled in")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_SHORTCUT_SCOPE_LOCAL")
)

;; From GtkShortcutLabel

(define-property accelerator
  (of-object "GtkShortcutLabel")
  (prop-type "GParamString")
  (docs "Accelerator")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property disabled-text
  (of-object "GtkShortcutLabel")
  (prop-type "GParamString")
  (docs "Disabled text")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

;; From GtkShortcutsGroup

(define-property title
  (of-object "GtkShortcutsGroup")
  (prop-type "GParamString")
  (docs "Title")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property view
  (of-object "GtkShortcutsGroup")
  (prop-type "GParamString")
  (docs "View")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property accel-size-group
  (of-object "GtkShortcutsGroup")
  (prop-type "GParamObject")
  (docs "Accelerator Size Group")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property title-size-group
  (of-object "GtkShortcutsGroup")
  (prop-type "GParamObject")
  (docs "Title Size Group")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property height
  (of-object "GtkShortcutsGroup")
  (prop-type "GParamUInt")
  (docs "Height")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "1")
)

;; From GtkShortcutsSection

(define-signal change-current-page
  (of-object "GtkShortcutsSection")
  (return-type "gboolean")
  (flags "Run Last, Action")
  (parameters
    '("gint" "p0")
  )
)

(define-property title
  (of-object "GtkShortcutsSection")
  (prop-type "GParamString")
  (docs "Title")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property section-name
  (of-object "GtkShortcutsSection")
  (prop-type "GParamString")
  (docs "Section Name")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property view-name
  (of-object "GtkShortcutsSection")
  (prop-type "GParamString")
  (docs "View Name")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property max-height
  (of-object "GtkShortcutsSection")
  (prop-type "GParamUInt")
  (docs "Maximum Height")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "15")
)

;; From GtkShortcutsShortcut

(define-property accelerator
  (of-object "GtkShortcutsShortcut")
  (prop-type "GParamString")
  (docs "The accelerator keys for shortcuts of type “Accelerator”")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property icon
  (of-object "GtkShortcutsShortcut")
  (prop-type "GParamObject")
  (docs "The icon to show for shortcuts of type “Other Gesture”")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property icon-set
  (of-object "GtkShortcutsShortcut")
  (prop-type "GParamBoolean")
  (docs "Whether an icon has been set")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property title
  (of-object "GtkShortcutsShortcut")
  (prop-type "GParamString")
  (docs "A short description for the shortcut")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property subtitle
  (of-object "GtkShortcutsShortcut")
  (prop-type "GParamString")
  (docs "A short description for the gesture")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property subtitle-set
  (of-object "GtkShortcutsShortcut")
  (prop-type "GParamBoolean")
  (docs "Whether a subtitle has been set")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property accel-size-group
  (of-object "GtkShortcutsShortcut")
  (prop-type "GParamObject")
  (docs "Accelerator Size Group")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property title-size-group
  (of-object "GtkShortcutsShortcut")
  (prop-type "GParamObject")
  (docs "Title Size Group")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

(define-property direction
  (of-object "GtkShortcutsShortcut")
  (prop-type "GParamEnum")
  (docs "Text direction for which this shortcut is active")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_TEXT_DIR_NONE")
)

(define-property shortcut-type
  (of-object "GtkShortcutsShortcut")
  (prop-type "GParamEnum")
  (docs "The type of shortcut that is represented")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_SHORTCUT_ACCELERATOR")
)

(define-property action-name
  (of-object "GtkShortcutsShortcut")
  (prop-type "GParamString")
  (docs "The name of the action")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

;; From GtkShortcutsWindow

(define-signal close
  (of-object "GtkShortcutsWindow")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal search
  (of-object "GtkShortcutsWindow")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-property section-name
  (of-object "GtkShortcutsWindow")
  (prop-type "GParamString")
  (docs "Section Name")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "internal-search")
)

(define-property view-name
  (of-object "GtkShortcutsWindow")
  (prop-type "GParamString")
  (docs "View Name")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

;; From GtkSignalAction

(define-property signal-name
  (of-object "GtkSignalAction")
  (prop-type "GParamString")
  (docs "The name of the signal to emit")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "")
)

;; From GtkSignalListItemFactory

(define-signal setup
  (of-object "GtkSignalListItemFactory")
  (return-type "void")
  (flags "Run First")
  (parameters
    '("GtkListItem*" "p0")
  )
)

(define-signal bind
  (of-object "GtkSignalListItemFactory")
  (return-type "void")
  (flags "Run First")
  (parameters
    '("GtkListItem*" "p0")
  )
)

(define-signal unbind
  (of-object "GtkSignalListItemFactory")
  (return-type "void")
  (flags "Run First")
  (parameters
    '("GtkListItem*" "p0")
  )
)

(define-signal teardown
  (of-object "GtkSignalListItemFactory")
  (return-type "void")
  (flags "Run First")
  (parameters
    '("GtkListItem*" "p0")
  )
)

;; From GtkSingleSelection

(define-property autoselect
  (of-object "GtkSingleSelection")
  (prop-type "GParamBoolean")
  (docs "If the selection will always select an item")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property can-unselect
  (of-object "GtkSingleSelection")
  (prop-type "GParamBoolean")
  (docs "If unselecting the selected item is allowed")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property selected
  (of-object "GtkSingleSelection")
  (prop-type "GParamUInt")
  (docs "Position of the selected item")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "4294967295")
)

(define-property selected-item
  (of-object "GtkSingleSelection")
  (prop-type "GParamObject")
  (docs "The selected item")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property model
  (of-object "GtkSingleSelection")
  (prop-type "GParamObject")
  (docs "The model being managed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkSizeGroup

(define-property mode
  (of-object "GtkSizeGroup")
  (prop-type "GParamEnum")
  (docs "The directions in which the size group affects the requested sizes of its component widgets")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_SIZE_GROUP_HORIZONTAL")
)

;; From GtkSliceListModel

(define-property model
  (of-object "GtkSliceListModel")
  (prop-type "GParamObject")
  (docs "Child model to take slice from")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property offset
  (of-object "GtkSliceListModel")
  (prop-type "GParamUInt")
  (docs "Offset of slice")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property size
  (of-object "GtkSliceListModel")
  (prop-type "GParamUInt")
  (docs "Maximum size of slice")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "10")
)

;; From GtkSorter

(define-signal changed
  (of-object "GtkSorter")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkSorterChange" "p0")
  )
)

;; From GtkSortListModel

(define-property incremental
  (of-object "GtkSortListModel")
  (prop-type "GParamBoolean")
  (docs "Sort items incrementally")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property model
  (of-object "GtkSortListModel")
  (prop-type "GParamObject")
  (docs "The model being sorted")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property pending
  (of-object "GtkSortListModel")
  (prop-type "GParamUInt")
  (docs "Estimate of unsorted items remaining")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "0")
)

(define-property sorter
  (of-object "GtkSortListModel")
  (prop-type "GParamObject")
  (docs "The sorter for this model")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkSpinner

(define-property spinning
  (of-object "GtkSpinner")
  (prop-type "GParamBoolean")
  (docs "Whether the spinner is spinning")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkSpinButton

(define-signal value-changed
  (of-object "GtkSpinButton")
  (return-type "void")
  (flags "Run Last")
)

(define-signal change-value
  (of-object "GtkSpinButton")
  (return-type "void")
  (flags "Run Last, Action")
  (parameters
    '("GtkScrollType" "p0")
  )
)

(define-signal input
  (of-object "GtkSpinButton")
  (return-type "gint")
  (flags "Run Last")
  (parameters
    '("double*" "p0")
  )
)

(define-signal output
  (of-object "GtkSpinButton")
  (return-type "gboolean")
  (flags "Run Last")
)

(define-signal wrapped
  (of-object "GtkSpinButton")
  (return-type "void")
  (flags "Run Last")
)

(define-property adjustment
  (of-object "GtkSpinButton")
  (prop-type "GParamObject")
  (docs "The adjustment that holds the value of the spin button")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property climb-rate
  (of-object "GtkSpinButton")
  (prop-type "GParamDouble")
  (docs "The acceleration rate when you hold down a button or key")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property digits
  (of-object "GtkSpinButton")
  (prop-type "GParamUInt")
  (docs "The number of decimal places to display")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property snap-to-ticks
  (of-object "GtkSpinButton")
  (prop-type "GParamBoolean")
  (docs "Whether erroneous values are automatically changed to a spin button’s nearest step increment")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property numeric
  (of-object "GtkSpinButton")
  (prop-type "GParamBoolean")
  (docs "Whether non-numeric characters should be ignored")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property wrap
  (of-object "GtkSpinButton")
  (prop-type "GParamBoolean")
  (docs "Whether a spin button should wrap upon reaching its limits")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property update-policy
  (of-object "GtkSpinButton")
  (prop-type "GParamEnum")
  (docs "Whether the spin button should update always, or only when the value is legal")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_UPDATE_ALWAYS")
)

(define-property value
  (of-object "GtkSpinButton")
  (prop-type "GParamDouble")
  (docs "Reads the current value, or sets a new value")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

;; From GtkStack

(define-property hhomogeneous
  (of-object "GtkStack")
  (prop-type "GParamBoolean")
  (docs "Horizontally homogeneous sizing")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property vhomogeneous
  (of-object "GtkStack")
  (prop-type "GParamBoolean")
  (docs "Vertically homogeneous sizing")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property visible-child
  (of-object "GtkStack")
  (prop-type "GParamObject")
  (docs "The widget currently visible in the stack")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property visible-child-name
  (of-object "GtkStack")
  (prop-type "GParamString")
  (docs "The name of the widget currently visible in the stack")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property transition-duration
  (of-object "GtkStack")
  (prop-type "GParamUInt")
  (docs "The animation duration, in milliseconds")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "200")
)

(define-property transition-type
  (of-object "GtkStack")
  (prop-type "GParamEnum")
  (docs "The type of animation used to transition")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_STACK_TRANSITION_TYPE_NONE")
)

(define-property transition-running
  (of-object "GtkStack")
  (prop-type "GParamBoolean")
  (docs "Whether or not the transition is currently running")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property interpolate-size
  (of-object "GtkStack")
  (prop-type "GParamBoolean")
  (docs "Whether or not the size should smoothly change when changing between differently sized children")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property pages
  (of-object "GtkStack")
  (prop-type "GParamObject")
  (docs "A selection model with the stacks pages")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From GtkStackPage

(define-property child
  (of-object "GtkStackPage")
  (prop-type "GParamObject")
  (docs "The child of the page")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property name
  (of-object "GtkStackPage")
  (prop-type "GParamString")
  (docs "The name of the child page")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "")
)

(define-property title
  (of-object "GtkStackPage")
  (prop-type "GParamString")
  (docs "The title of the child page")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property icon-name
  (of-object "GtkStackPage")
  (prop-type "GParamString")
  (docs "The icon name of the child page")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property needs-attention
  (of-object "GtkStackPage")
  (prop-type "GParamBoolean")
  (docs "Whether this page needs attention")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property visible
  (of-object "GtkStackPage")
  (prop-type "GParamBoolean")
  (docs "Whether this page is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property use-underline
  (of-object "GtkStackPage")
  (prop-type "GParamBoolean")
  (docs "If set, an underline in the title indicates the next character should be used for the mnemonic accelerator key")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkStackSidebar

(define-property stack
  (of-object "GtkStackSidebar")
  (prop-type "GParamObject")
  (docs "Associated stack for this GtkStackSidebar")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkStackSwitcher

(define-property stack
  (of-object "GtkStackSwitcher")
  (prop-type "GParamObject")
  (docs "Stack")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkStatusbar

(define-signal text-pushed
  (of-object "GtkStatusbar")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("guint" "p0")
    '("const-gchar*" "p1")
  )
)

(define-signal text-popped
  (of-object "GtkStatusbar")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("guint" "p0")
    '("const-gchar*" "p1")
  )
)

;; From GtkStringFilter

(define-property expression
  (of-object "GtkStringFilter")
  (prop-type "GtkParamSpecExpression")
  (docs "Expression to compare with")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ignore-case
  (of-object "GtkStringFilter")
  (prop-type "GParamBoolean")
  (docs "If matching is case sensitive")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property match-mode
  (of-object "GtkStringFilter")
  (prop-type "GParamEnum")
  (docs "If exact matches are necessary or if substrings are allowed")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_STRING_FILTER_MATCH_MODE_SUBSTRING")
)

(define-property search
  (of-object "GtkStringFilter")
  (prop-type "GParamString")
  (docs "The search term")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

;; From GtkStringObject

(define-property string
  (of-object "GtkStringObject")
  (prop-type "GParamString")
  (docs "String")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "")
)

;; From GtkStringSorter

(define-property expression
  (of-object "GtkStringSorter")
  (prop-type "GtkParamSpecExpression")
  (docs "Expression to compare with")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property ignore-case
  (of-object "GtkStringSorter")
  (prop-type "GParamBoolean")
  (docs "If matching is case sensitive")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

;; From GtkStyleContext

(define-property display
  (of-object "GtkStyleContext")
  (prop-type "GParamObject")
  (docs "The associated GdkDisplay")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkStyleProvider

(define-signal gtk-private-changed
  (of-object "GtkStyleProvider")
  (return-type "void")
  (flags "Run Last")
)

;; From GtkSwitch

(define-signal activate
  (of-object "GtkSwitch")
  (return-type "void")
  (flags "Run First, Action")
)

(define-signal state-set
  (of-object "GtkSwitch")
  (return-type "gboolean")
  (flags "Run Last")
  (parameters
    '("gboolean" "p0")
  )
)

(define-property active
  (of-object "GtkSwitch")
  (prop-type "GParamBoolean")
  (docs "Whether the switch is on or off")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property state
  (of-object "GtkSwitch")
  (prop-type "GParamBoolean")
  (docs "The backend state")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkText

(define-signal activate
  (of-object "GtkText")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal move-cursor
  (of-object "GtkText")
  (return-type "void")
  (flags "Run Last, Action")
  (parameters
    '("GtkMovementStep" "p0")
    '("gint" "p1")
    '("gboolean" "p2")
  )
)

(define-signal copy-clipboard
  (of-object "GtkText")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal insert-at-cursor
  (of-object "GtkText")
  (return-type "void")
  (flags "Run Last, Action")
  (parameters
    '("const-gchar*" "p0")
  )
)

(define-signal delete-from-cursor
  (of-object "GtkText")
  (return-type "void")
  (flags "Run Last, Action")
  (parameters
    '("GtkDeleteType" "p0")
    '("gint" "p1")
  )
)

(define-signal backspace
  (of-object "GtkText")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal cut-clipboard
  (of-object "GtkText")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal paste-clipboard
  (of-object "GtkText")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal toggle-overwrite
  (of-object "GtkText")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal preedit-changed
  (of-object "GtkText")
  (return-type "void")
  (flags "Run Last, Action")
  (parameters
    '("const-gchar*" "p0")
  )
)

(define-signal insert-emoji
  (of-object "GtkText")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-property buffer
  (of-object "GtkText")
  (prop-type "GParamObject")
  (docs "Text buffer object which actually stores self text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property max-length
  (of-object "GtkText")
  (prop-type "GParamInt")
  (docs "Maximum number of characters for this self. Zero if no maximum")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property visibility
  (of-object "GtkText")
  (prop-type "GParamBoolean")
  (docs "FALSE displays the “invisible char” instead of the actual text (password mode)")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property invisible-char
  (of-object "GtkText")
  (prop-type "GParamUnichar")
  (docs "The character to use when masking self contents (in “password mode”)")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "42")
)

(define-property invisible-char-set
  (of-object "GtkText")
  (prop-type "GParamBoolean")
  (docs "Whether the invisible character has been set")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property activates-default
  (of-object "GtkText")
  (prop-type "GParamBoolean")
  (docs "Whether to activate the default widget (such as the default button in a dialog) when Enter is pressed")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property scroll-offset
  (of-object "GtkText")
  (prop-type "GParamInt")
  (docs "Number of pixels of the self scrolled off the screen to the left")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "0")
)

(define-property truncate-multiline
  (of-object "GtkText")
  (prop-type "GParamBoolean")
  (docs "Whether to truncate multiline pastes to one line.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property overwrite-mode
  (of-object "GtkText")
  (prop-type "GParamBoolean")
  (docs "Whether new text overwrites existing text")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property im-module
  (of-object "GtkText")
  (prop-type "GParamString")
  (docs "Which IM module should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property placeholder-text
  (of-object "GtkText")
  (prop-type "GParamString")
  (docs "Show text in the self when it’s empty and unfocused")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property input-purpose
  (of-object "GtkText")
  (prop-type "GParamEnum")
  (docs "Purpose of the text field")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_INPUT_PURPOSE_FREE_FORM")
)

(define-property input-hints
  (of-object "GtkText")
  (prop-type "GParamFlags")
  (docs "Hints for the text field behaviour")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_INPUT_HINT_NONE")
)

(define-property attributes
  (of-object "GtkText")
  (prop-type "GParamBoxed")
  (docs "A list of style attributes to apply to the text of the self")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property tabs
  (of-object "GtkText")
  (prop-type "GParamBoxed")
  (docs "A list of tabstop locations to apply to the text of the self")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property enable-emoji-completion
  (of-object "GtkText")
  (prop-type "GParamBoolean")
  (docs "Whether to suggest Emoji replacements")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property propagate-text-width
  (of-object "GtkText")
  (prop-type "GParamBoolean")
  (docs "Whether the entry should grow and shrink with the content")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property extra-menu
  (of-object "GtkText")
  (prop-type "GParamObject")
  (docs "Menu model to append to the context menu")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkTextBuffer

(define-signal changed
  (of-object "GtkTextBuffer")
  (return-type "void")
  (flags "Run Last")
)

(define-signal insert-text
  (of-object "GtkTextBuffer")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkTextIter*" "p0")
    '("const-gchar*" "p1")
    '("gint" "p2")
  )
)

(define-signal insert-paintable
  (of-object "GtkTextBuffer")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkTextIter*" "p0")
    '("GdkPaintable*" "p1")
  )
)

(define-signal insert-child-anchor
  (of-object "GtkTextBuffer")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkTextIter*" "p0")
    '("GtkTextChildAnchor*" "p1")
  )
)

(define-signal delete-range
  (of-object "GtkTextBuffer")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkTextIter*" "p0")
    '("GtkTextIter*" "p1")
  )
)

(define-signal modified-changed
  (of-object "GtkTextBuffer")
  (return-type "void")
  (flags "Run Last")
)

(define-signal mark-set
  (of-object "GtkTextBuffer")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("const-GtkTextIter*" "p0")
    '("GtkTextMark*" "p1")
  )
)

(define-signal mark-deleted
  (of-object "GtkTextBuffer")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkTextMark*" "p0")
  )
)

(define-signal apply-tag
  (of-object "GtkTextBuffer")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkTextTag*" "p0")
    '("const-GtkTextIter*" "p1")
    '("const-GtkTextIter*" "p2")
  )
)

(define-signal remove-tag
  (of-object "GtkTextBuffer")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkTextTag*" "p0")
    '("const-GtkTextIter*" "p1")
    '("const-GtkTextIter*" "p2")
  )
)

(define-signal begin-user-action
  (of-object "GtkTextBuffer")
  (return-type "void")
  (flags "Run Last")
)

(define-signal end-user-action
  (of-object "GtkTextBuffer")
  (return-type "void")
  (flags "Run Last")
)

(define-signal paste-done
  (of-object "GtkTextBuffer")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GdkClipboard*" "p0")
  )
)

(define-signal redo
  (of-object "GtkTextBuffer")
  (return-type "void")
  (flags "Run Last")
)

(define-signal undo
  (of-object "GtkTextBuffer")
  (return-type "void")
  (flags "Run Last")
)

(define-property tag-table
  (of-object "GtkTextBuffer")
  (prop-type "GParamObject")
  (docs "Text Tag Table")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property text
  (of-object "GtkTextBuffer")
  (prop-type "GParamString")
  (docs "Current text of the buffer")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property has-selection
  (of-object "GtkTextBuffer")
  (prop-type "GParamBoolean")
  (docs "Whether the buffer has some text currently selected")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property cursor-position
  (of-object "GtkTextBuffer")
  (prop-type "GParamInt")
  (docs "The position of the insert mark (as offset from the beginning of the buffer)")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "0")
)

(define-property can-undo
  (of-object "GtkTextBuffer")
  (prop-type "GParamBoolean")
  (docs "If the buffer can have the last action undone")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property can-redo
  (of-object "GtkTextBuffer")
  (prop-type "GParamBoolean")
  (docs "If the buffer can have the last undone action reapplied")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property enable-undo
  (of-object "GtkTextBuffer")
  (prop-type "GParamBoolean")
  (docs "Enable support for undo and redo in the text view")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

;; From GtkTextMark

(define-property name
  (of-object "GtkTextMark")
  (prop-type "GParamString")
  (docs "Mark name")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "")
)

(define-property left-gravity
  (of-object "GtkTextMark")
  (prop-type "GParamBoolean")
  (docs "Whether the mark has left gravity")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "FALSE")
)

;; From GtkTextTag

(define-property name
  (of-object "GtkTextTag")
  (prop-type "GParamString")
  (docs "Name used to refer to the text tag. NULL for anonymous tags")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "")
)

(define-property background
  (of-object "GtkTextTag")
  (prop-type "GParamString")
  (docs "Background color as a string")
  (readable #f)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property foreground
  (of-object "GtkTextTag")
  (prop-type "GParamString")
  (docs "Foreground color as a string")
  (readable #f)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property background-rgba
  (of-object "GtkTextTag")
  (prop-type "GParamBoxed")
  (docs "Background color as a GdkRGBA")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property foreground-rgba
  (of-object "GtkTextTag")
  (prop-type "GParamBoxed")
  (docs "Foreground color as a GdkRGBA")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property font
  (of-object "GtkTextTag")
  (prop-type "GParamString")
  (docs "Font description as a string, e.g. “Sans Italic 12”")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property font-desc
  (of-object "GtkTextTag")
  (prop-type "GParamBoxed")
  (docs "Font description as a PangoFontDescription struct")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property family
  (of-object "GtkTextTag")
  (prop-type "GParamString")
  (docs "Name of the font family, e.g. Sans, Helvetica, Times, Monospace")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property style
  (of-object "GtkTextTag")
  (prop-type "GParamEnum")
  (docs "Font style as a PangoStyle, e.g. PANGO_STYLE_ITALIC")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "PANGO_STYLE_NORMAL")
)

(define-property variant
  (of-object "GtkTextTag")
  (prop-type "GParamEnum")
  (docs "Font variant as a PangoVariant, e.g. PANGO_VARIANT_SMALL_CAPS")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "PANGO_VARIANT_NORMAL")
)

(define-property weight
  (of-object "GtkTextTag")
  (prop-type "GParamInt")
  (docs "Font weight as an integer, see predefined values in PangoWeight; for example, PANGO_WEIGHT_BOLD")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "400")
)

(define-property stretch
  (of-object "GtkTextTag")
  (prop-type "GParamEnum")
  (docs "Font stretch as a PangoStretch, e.g. PANGO_STRETCH_CONDENSED")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "PANGO_STRETCH_NORMAL")
)

(define-property size
  (of-object "GtkTextTag")
  (prop-type "GParamInt")
  (docs "Font size in Pango units")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property size-points
  (of-object "GtkTextTag")
  (prop-type "GParamDouble")
  (docs "Font size in points")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property scale
  (of-object "GtkTextTag")
  (prop-type "GParamDouble")
  (docs "Font size as a scale factor relative to the default font size. This properly adapts to theme changes etc. so is recommended. Pango predefines some scales such as PANGO_SCALE_X_LARGE")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "1")
)

(define-property pixels-above-lines
  (of-object "GtkTextTag")
  (prop-type "GParamInt")
  (docs "Pixels of blank space above paragraphs")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property pixels-below-lines
  (of-object "GtkTextTag")
  (prop-type "GParamInt")
  (docs "Pixels of blank space below paragraphs")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property pixels-inside-wrap
  (of-object "GtkTextTag")
  (prop-type "GParamInt")
  (docs "Pixels of blank space between wrapped lines in a paragraph")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property editable
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether the text can be modified by the user")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property wrap-mode
  (of-object "GtkTextTag")
  (prop-type "GParamEnum")
  (docs "Whether to wrap lines never, at word boundaries, or at character boundaries")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_WRAP_NONE")
)

(define-property justification
  (of-object "GtkTextTag")
  (prop-type "GParamEnum")
  (docs "Left, right, or center justification")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_JUSTIFY_LEFT")
)

(define-property direction
  (of-object "GtkTextTag")
  (prop-type "GParamEnum")
  (docs "Text direction, e.g. right-to-left or left-to-right")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_TEXT_DIR_NONE")
)

(define-property left-margin
  (of-object "GtkTextTag")
  (prop-type "GParamInt")
  (docs "Width of the left margin in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property indent
  (of-object "GtkTextTag")
  (prop-type "GParamInt")
  (docs "Amount to indent the paragraph, in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property strikethrough
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether to strike through the text")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property strikethrough-rgba
  (of-object "GtkTextTag")
  (prop-type "GParamBoxed")
  (docs "Color of strikethrough for this text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property right-margin
  (of-object "GtkTextTag")
  (prop-type "GParamInt")
  (docs "Width of the right margin in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property underline
  (of-object "GtkTextTag")
  (prop-type "GParamEnum")
  (docs "Style of underline for this text")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "PANGO_UNDERLINE_NONE")
)

(define-property underline-rgba
  (of-object "GtkTextTag")
  (prop-type "GParamBoxed")
  (docs "Color of underline for this text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property overline
  (of-object "GtkTextTag")
  (prop-type "GParamEnum")
  (docs "Style of overline for this text")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "PANGO_OVERLINE_NONE")
)

(define-property overline-rgba
  (of-object "GtkTextTag")
  (prop-type "GParamBoxed")
  (docs "Color of overline for this text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property rise
  (of-object "GtkTextTag")
  (prop-type "GParamInt")
  (docs "Offset of text above the baseline (below the baseline if rise is negative) in Pango units")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property background-full-height
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether the background color fills the entire line height or only the height of the tagged characters")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property language
  (of-object "GtkTextTag")
  (prop-type "GParamString")
  (docs "The language this text is in, as an ISO code. Pango can use this as a hint when rendering the text. If not set, an appropriate default will be used.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property tabs
  (of-object "GtkTextTag")
  (prop-type "GParamBoxed")
  (docs "Custom tabs for this text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property invisible
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this text is hidden.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property paragraph-background
  (of-object "GtkTextTag")
  (prop-type "GParamString")
  (docs "Paragraph background color as a string")
  (readable #f)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property paragraph-background-rgba
  (of-object "GtkTextTag")
  (prop-type "GParamBoxed")
  (docs "Paragraph background RGBA as a GdkRGBA")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property fallback
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether font fallback is enabled.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property letter-spacing
  (of-object "GtkTextTag")
  (prop-type "GParamInt")
  (docs "Extra spacing between graphemes")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property font-features
  (of-object "GtkTextTag")
  (prop-type "GParamString")
  (docs "OpenType Font Features to use")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property allow-breaks
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether breaks are allowed.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property show-spaces
  (of-object "GtkTextTag")
  (prop-type "GParamFlags")
  (docs "How to render invisible characters.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "PANGO_SHOW_NONE")
)

(define-property insert-hyphens
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether to insert hyphens at breaks.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property accumulative-margin
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether left and right margins accumulate.")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property background-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the background color")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property foreground-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the foreground color")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property family-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font family")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property style-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font style")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property variant-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font variant")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property weight-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font weight")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property stretch-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font stretch")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property size-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the font size")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property scale-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag scales the font size by a factor")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property pixels-above-lines-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the number of pixels above lines")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property pixels-below-lines-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the number of pixels above lines")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property pixels-inside-wrap-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the number of pixels between wrapped lines")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property editable-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects text editability")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property wrap-mode-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects line wrap mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property justification-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects paragraph justification")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property left-margin-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the left margin")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property indent-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects indentation")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property strikethrough-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects strikethrough")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property strikethrough-rgba-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects strikethrough color")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property right-margin-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the right margin")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property underline-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects underlining")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property underline-rgba-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects underlining color")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property overline-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects overlining")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property overline-rgba-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects overlining color")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property rise-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the rise")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property background-full-height-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects background height")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property language-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the language the text is rendered as")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property tabs-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects tabs")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property invisible-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects text visibility")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property paragraph-background-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects the paragraph background color")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property fallback-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects font fallback")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property letter-spacing-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects letter spacing")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property font-features-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects font features")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property allow-breaks-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects line breaks")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property show-spaces-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects rendering of invisible characters")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property insert-hyphens-set
  (of-object "GtkTextTag")
  (prop-type "GParamBoolean")
  (docs "Whether this tag affects insertion of hyphens")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkTextTagTable

(define-signal tag-changed
  (of-object "GtkTextTagTable")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkTextTag*" "p0")
    '("gboolean" "p1")
  )
)

(define-signal tag-added
  (of-object "GtkTextTagTable")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkTextTag*" "p0")
  )
)

(define-signal tag-removed
  (of-object "GtkTextTagTable")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkTextTag*" "p0")
  )
)

;; From GtkTextView

(define-signal move-cursor
  (of-object "GtkTextView")
  (return-type "void")
  (flags "Run Last, Action")
  (parameters
    '("GtkMovementStep" "p0")
    '("gint" "p1")
    '("gboolean" "p2")
  )
)

(define-signal select-all
  (of-object "GtkTextView")
  (return-type "void")
  (flags "Run Last, Action")
  (parameters
    '("gboolean" "p0")
  )
)

(define-signal copy-clipboard
  (of-object "GtkTextView")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal insert-at-cursor
  (of-object "GtkTextView")
  (return-type "void")
  (flags "Run Last, Action")
  (parameters
    '("const-gchar*" "p0")
  )
)

(define-signal delete-from-cursor
  (of-object "GtkTextView")
  (return-type "void")
  (flags "Run Last, Action")
  (parameters
    '("GtkDeleteType" "p0")
    '("gint" "p1")
  )
)

(define-signal backspace
  (of-object "GtkTextView")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal cut-clipboard
  (of-object "GtkTextView")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal paste-clipboard
  (of-object "GtkTextView")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal toggle-overwrite
  (of-object "GtkTextView")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal preedit-changed
  (of-object "GtkTextView")
  (return-type "void")
  (flags "Run Last, Action")
  (parameters
    '("const-gchar*" "p0")
  )
)

(define-signal insert-emoji
  (of-object "GtkTextView")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal move-viewport
  (of-object "GtkTextView")
  (return-type "void")
  (flags "Run Last, Action")
  (parameters
    '("GtkScrollStep" "p0")
    '("gint" "p1")
  )
)

(define-signal set-anchor
  (of-object "GtkTextView")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal toggle-cursor-visible
  (of-object "GtkTextView")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal extend-selection
  (of-object "GtkTextView")
  (return-type "gboolean")
  (flags "Run Last")
  (parameters
    '("GtkTextExtendSelection" "p0")
    '("GtkTextIter*" "p1")
    '("GtkTextIter*" "p2")
    '("GtkTextIter*" "p3")
  )
)

(define-property pixels-above-lines
  (of-object "GtkTextView")
  (prop-type "GParamInt")
  (docs "Pixels of blank space above paragraphs")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property pixels-below-lines
  (of-object "GtkTextView")
  (prop-type "GParamInt")
  (docs "Pixels of blank space below paragraphs")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property pixels-inside-wrap
  (of-object "GtkTextView")
  (prop-type "GParamInt")
  (docs "Pixels of blank space between wrapped lines in a paragraph")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property editable
  (of-object "GtkTextView")
  (prop-type "GParamBoolean")
  (docs "Whether the text can be modified by the user")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property wrap-mode
  (of-object "GtkTextView")
  (prop-type "GParamEnum")
  (docs "Whether to wrap lines never, at word boundaries, or at character boundaries")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_WRAP_NONE")
)

(define-property justification
  (of-object "GtkTextView")
  (prop-type "GParamEnum")
  (docs "Left, right, or center justification")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_JUSTIFY_LEFT")
)

(define-property left-margin
  (of-object "GtkTextView")
  (prop-type "GParamInt")
  (docs "Width of the left margin in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property right-margin
  (of-object "GtkTextView")
  (prop-type "GParamInt")
  (docs "Width of the right margin in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property top-margin
  (of-object "GtkTextView")
  (prop-type "GParamInt")
  (docs "Height of the top margin in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property bottom-margin
  (of-object "GtkTextView")
  (prop-type "GParamInt")
  (docs "Height of the bottom margin in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property indent
  (of-object "GtkTextView")
  (prop-type "GParamInt")
  (docs "Amount to indent the paragraph, in pixels")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property tabs
  (of-object "GtkTextView")
  (prop-type "GParamBoxed")
  (docs "Custom tabs for this text")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property cursor-visible
  (of-object "GtkTextView")
  (prop-type "GParamBoolean")
  (docs "If the insertion cursor is shown")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property buffer
  (of-object "GtkTextView")
  (prop-type "GParamObject")
  (docs "The buffer which is displayed")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property overwrite
  (of-object "GtkTextView")
  (prop-type "GParamBoolean")
  (docs "Whether entered text overwrites existing contents")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property accepts-tab
  (of-object "GtkTextView")
  (prop-type "GParamBoolean")
  (docs "Whether Tab will result in a tab character being entered")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property im-module
  (of-object "GtkTextView")
  (prop-type "GParamString")
  (docs "Which IM module should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property input-purpose
  (of-object "GtkTextView")
  (prop-type "GParamEnum")
  (docs "Purpose of the text field")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_INPUT_PURPOSE_FREE_FORM")
)

(define-property input-hints
  (of-object "GtkTextView")
  (prop-type "GParamFlags")
  (docs "Hints for the text field behaviour")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_INPUT_HINT_NONE")
)

(define-property monospace
  (of-object "GtkTextView")
  (prop-type "GParamBoolean")
  (docs "Whether to use a monospace font")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property extra-menu
  (of-object "GtkTextView")
  (prop-type "GParamObject")
  (docs "Menu model to append to the context menu")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkToggleButton

(define-signal toggled
  (of-object "GtkToggleButton")
  (return-type "void")
  (flags "Run First")
)

(define-property active
  (of-object "GtkToggleButton")
  (prop-type "GParamBoolean")
  (docs "If the toggle button should be pressed in")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property group
  (of-object "GtkToggleButton")
  (prop-type "GParamObject")
  (docs "The toggle button whose group this widget belongs to.")
  (readable #f)
  (writable #t)
  (construct-only #f)
)

;; From GtkTooltip

;; From GtkTreeExpander

(define-property child
  (of-object "GtkTreeExpander")
  (prop-type "GParamObject")
  (docs "The child widget with the actual contents")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property item
  (of-object "GtkTreeExpander")
  (prop-type "GParamObject")
  (docs "The item held by this expander's row")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property list-row
  (of-object "GtkTreeExpander")
  (prop-type "GParamObject")
  (docs "The list row to track for expander state")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkTreeModel

(define-signal row-changed
  (of-object "GtkTreeModel")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkTreePath*" "p0")
    '("GtkTreeIter*" "p1")
  )
)

(define-signal row-inserted
  (of-object "GtkTreeModel")
  (return-type "void")
  (flags "Run First")
  (parameters
    '("GtkTreePath*" "p0")
    '("GtkTreeIter*" "p1")
  )
)

(define-signal row-has-child-toggled
  (of-object "GtkTreeModel")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkTreePath*" "p0")
    '("GtkTreeIter*" "p1")
  )
)

(define-signal row-deleted
  (of-object "GtkTreeModel")
  (return-type "void")
  (flags "Run First")
  (parameters
    '("GtkTreePath*" "p0")
  )
)

(define-signal rows-reordered
  (of-object "GtkTreeModel")
  (return-type "void")
  (flags "Run First")
  (parameters
    '("GtkTreePath*" "p0")
    '("GtkTreeIter*" "p1")
    '("gint*" "p2")
  )
)

;; From GtkTreeListModel

(define-property autoexpand
  (of-object "GtkTreeListModel")
  (prop-type "GParamBoolean")
  (docs "If all rows should be expanded by default")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property model
  (of-object "GtkTreeListModel")
  (prop-type "GParamObject")
  (docs "The root model displayed")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property passthrough
  (of-object "GtkTreeListModel")
  (prop-type "GParamBoolean")
  (docs "If child model values are passed through")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "FALSE")
)

;; From GtkTreeListRow

(define-property children
  (of-object "GtkTreeListRow")
  (prop-type "GParamObject")
  (docs "Model holding the row’s children")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property depth
  (of-object "GtkTreeListRow")
  (prop-type "GParamUInt")
  (docs "Depth in the tree")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "0")
)

(define-property expandable
  (of-object "GtkTreeListRow")
  (prop-type "GParamBoolean")
  (docs "If this row can ever be expanded")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property expanded
  (of-object "GtkTreeListRow")
  (prop-type "GParamBoolean")
  (docs "If this row is currently expanded")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property item
  (of-object "GtkTreeListRow")
  (prop-type "GParamObject")
  (docs "The item held in this row")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

;; From GtkTreeSelection

(define-signal changed
  (of-object "GtkTreeSelection")
  (return-type "void")
  (flags "Run First")
)

(define-property mode
  (of-object "GtkTreeSelection")
  (prop-type "GParamEnum")
  (docs "Selection mode")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_SELECTION_SINGLE")
)

;; From GtkTreeSortable

(define-signal sort-column-changed
  (of-object "GtkTreeSortable")
  (return-type "void")
  (flags "Run Last")
)

;; From GtkTreeModelFilter

(define-property child-model
  (of-object "GtkTreeModelFilter")
  (prop-type "GParamObject")
  (docs "The model for the filtermodel to filter")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

(define-property virtual-root
  (of-object "GtkTreeModelFilter")
  (prop-type "GParamBoxed")
  (docs "The virtual root (relative to the child model) for this filtermodel")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From GtkTreeModelSort

(define-property model
  (of-object "GtkTreeModelSort")
  (prop-type "GParamObject")
  (docs "The model for the TreeModelSort to sort")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From GtkTreeStore

;; From GtkTreeView

(define-signal move-cursor
  (of-object "GtkTreeView")
  (return-type "gboolean")
  (flags "Run Last, Action")
  (parameters
    '("GtkMovementStep" "p0")
    '("gint" "p1")
    '("gboolean" "p2")
    '("gboolean" "p3")
  )
)

(define-signal select-all
  (of-object "GtkTreeView")
  (return-type "gboolean")
  (flags "Run Last, Action")
)

(define-signal unselect-all
  (of-object "GtkTreeView")
  (return-type "gboolean")
  (flags "Run Last, Action")
)

(define-signal row-activated
  (of-object "GtkTreeView")
  (return-type "void")
  (flags "Run Last, Action")
  (parameters
    '("GtkTreePath*" "p0")
    '("GtkTreeViewColumn*" "p1")
  )
)

(define-signal toggle-cursor-row
  (of-object "GtkTreeView")
  (return-type "gboolean")
  (flags "Run Last, Action")
)

(define-signal test-expand-row
  (of-object "GtkTreeView")
  (return-type "gboolean")
  (flags "Run Last")
  (parameters
    '("GtkTreeIter*" "p0")
    '("GtkTreePath*" "p1")
  )
)

(define-signal test-collapse-row
  (of-object "GtkTreeView")
  (return-type "gboolean")
  (flags "Run Last")
  (parameters
    '("GtkTreeIter*" "p0")
    '("GtkTreePath*" "p1")
  )
)

(define-signal row-expanded
  (of-object "GtkTreeView")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkTreeIter*" "p0")
    '("GtkTreePath*" "p1")
  )
)

(define-signal row-collapsed
  (of-object "GtkTreeView")
  (return-type "void")
  (flags "Run Last")
  (parameters
    '("GtkTreeIter*" "p0")
    '("GtkTreePath*" "p1")
  )
)

(define-signal columns-changed
  (of-object "GtkTreeView")
  (return-type "void")
  (flags "Run Last")
)

(define-signal cursor-changed
  (of-object "GtkTreeView")
  (return-type "void")
  (flags "Run Last")
)

(define-signal select-cursor-row
  (of-object "GtkTreeView")
  (return-type "gboolean")
  (flags "Run Last, Action")
  (parameters
    '("gboolean" "p0")
  )
)

(define-signal expand-collapse-cursor-row
  (of-object "GtkTreeView")
  (return-type "gboolean")
  (flags "Run Last, Action")
  (parameters
    '("gboolean" "p0")
    '("gboolean" "p1")
    '("gboolean" "p2")
  )
)

(define-signal select-cursor-parent
  (of-object "GtkTreeView")
  (return-type "gboolean")
  (flags "Run Last, Action")
)

(define-signal start-interactive-search
  (of-object "GtkTreeView")
  (return-type "gboolean")
  (flags "Run Last, Action")
)

(define-property model
  (of-object "GtkTreeView")
  (prop-type "GParamObject")
  (docs "The model for the tree view")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property headers-visible
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "Show the column header buttons")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property headers-clickable
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "Column headers respond to click events")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property expander-column
  (of-object "GtkTreeView")
  (prop-type "GParamObject")
  (docs "Set the column for the expander column")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property reorderable
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "View is reorderable")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property enable-search
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "View allows user to search through columns interactively")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property search-column
  (of-object "GtkTreeView")
  (prop-type "GParamInt")
  (docs "Model column to search through during interactive search")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property fixed-height-mode
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "Speeds up GtkTreeView by assuming that all rows have the same height")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property hover-selection
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "Whether the selection should follow the pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property hover-expand
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "Whether rows should be expanded/collapsed when the pointer moves over them")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property show-expanders
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "View has expanders")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property level-indentation
  (of-object "GtkTreeView")
  (prop-type "GParamInt")
  (docs "Extra indentation for each level")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property rubber-banding
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "Whether to enable selection of multiple items by dragging the mouse pointer")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property enable-grid-lines
  (of-object "GtkTreeView")
  (prop-type "GParamEnum")
  (docs "Whether grid lines should be drawn in the tree view")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_TREE_VIEW_GRID_LINES_NONE")
)

(define-property enable-tree-lines
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "Whether tree lines should be drawn in the tree view")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property tooltip-column
  (of-object "GtkTreeView")
  (prop-type "GParamInt")
  (docs "The column in the model containing the tooltip texts for the rows")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property activate-on-single-click
  (of-object "GtkTreeView")
  (prop-type "GParamBoolean")
  (docs "Activate row on a single click")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkTreeViewColumn

(define-signal clicked
  (of-object "GtkTreeViewColumn")
  (return-type "void")
  (flags "Run Last")
)

(define-property visible
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamBoolean")
  (docs "Whether to display the column")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property resizable
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamBoolean")
  (docs "Column is user-resizable")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property x-offset
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamInt")
  (docs "Current X position of the column")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "0")
)

(define-property width
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamInt")
  (docs "Current width of the column")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "0")
)

(define-property spacing
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamInt")
  (docs "Space which is inserted between cells")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property sizing
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamEnum")
  (docs "Resize mode of the column")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_TREE_VIEW_COLUMN_GROW_ONLY")
)

(define-property fixed-width
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamInt")
  (docs "Current fixed width of the column")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property min-width
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamInt")
  (docs "Minimum allowed width of the column")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property max-width
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamInt")
  (docs "Maximum allowed width of the column")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property title
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamString")
  (docs "Title to appear in column header")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property expand
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamBoolean")
  (docs "Column gets share of extra width allocated to the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property clickable
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamBoolean")
  (docs "Whether the header can be clicked")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property widget
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamObject")
  (docs "Widget to put in column header button instead of column title")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property alignment
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamFloat")
  (docs "X Alignment of the column header text or widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property reorderable
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamBoolean")
  (docs "Whether the column can be reordered around the headers")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property sort-indicator
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamBoolean")
  (docs "Whether to show a sort indicator")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property sort-order
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamEnum")
  (docs "Sort direction the sort indicator should indicate")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_SORT_ASCENDING")
)

(define-property sort-column-id
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamInt")
  (docs "Logical sort column ID this column sorts on when selected for sorting")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property cell-area
  (of-object "GtkTreeViewColumn")
  (prop-type "GParamObject")
  (docs "The GtkCellArea used to layout cells")
  (readable #t)
  (writable #t)
  (construct-only #t)
)

;; From GtkVideo

(define-property autoplay
  (of-object "GtkVideo")
  (prop-type "GParamBoolean")
  (docs "If playback should begin automatically")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property file
  (of-object "GtkVideo")
  (prop-type "GParamObject")
  (docs "The video file played back")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property loop
  (of-object "GtkVideo")
  (prop-type "GParamBoolean")
  (docs "If new media streams should be set to loop")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property media-stream
  (of-object "GtkVideo")
  (prop-type "GParamObject")
  (docs "The media stream played")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkViewport

(define-property scroll-to-focus
  (of-object "GtkViewport")
  (prop-type "GParamBoolean")
  (docs "Whether to scroll when the focus changes")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property child
  (of-object "GtkViewport")
  (prop-type "GParamObject")
  (docs "The child widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkVolumeButton

(define-property use-symbolic
  (of-object "GtkVolumeButton")
  (prop-type "GParamBoolean")
  (docs "Whether to use symbolic icons")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

;; From GtkWidget

(define-signal destroy
  (of-object "GtkWidget")
  (return-type "void")
  (flags "Run Cleanup, No Recurse, No Hooks")
)

(define-signal show
  (of-object "GtkWidget")
  (return-type "void")
  (flags "Run First")
)

(define-signal hide
  (of-object "GtkWidget")
  (return-type "void")
  (flags "Run First")
)

(define-signal map
  (of-object "GtkWidget")
  (return-type "void")
  (flags "Run First")
)

(define-signal unmap
  (of-object "GtkWidget")
  (return-type "void")
  (flags "Run First")
)

(define-signal realize
  (of-object "GtkWidget")
  (return-type "void")
  (flags "Run First")
)

(define-signal unrealize
  (of-object "GtkWidget")
  (return-type "void")
  (flags "Run Last")
)

(define-signal state-flags-changed
  (of-object "GtkWidget")
  (return-type "void")
  (flags "Run First")
  (parameters
    '("GtkStateFlags" "p0")
  )
)

(define-signal direction-changed
  (of-object "GtkWidget")
  (return-type "void")
  (flags "Run First")
  (parameters
    '("GtkTextDirection" "p0")
  )
)

(define-signal mnemonic-activate
  (of-object "GtkWidget")
  (return-type "gboolean")
  (flags "Run Last")
  (parameters
    '("gboolean" "p0")
  )
)

(define-signal move-focus
  (of-object "GtkWidget")
  (return-type "void")
  (flags "Run Last, Action")
  (parameters
    '("GtkDirectionType" "p0")
  )
)

(define-signal keynav-failed
  (of-object "GtkWidget")
  (return-type "gboolean")
  (flags "Run Last")
  (parameters
    '("GtkDirectionType" "p0")
  )
)

(define-signal query-tooltip
  (of-object "GtkWidget")
  (return-type "gboolean")
  (flags "Run Last")
  (parameters
    '("gint" "p0")
    '("gint" "p1")
    '("gboolean" "p2")
    '("GtkTooltip*" "p3")
  )
)

(define-property name
  (of-object "GtkWidget")
  (prop-type "GParamString")
  (docs "The name of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property parent
  (of-object "GtkWidget")
  (prop-type "GParamObject")
  (docs "The parent widget of this widget.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property root
  (of-object "GtkWidget")
  (prop-type "GParamObject")
  (docs "The root widget in the widget tree.")
  (readable #t)
  (writable #f)
  (construct-only #f)
)

(define-property width-request
  (of-object "GtkWidget")
  (prop-type "GParamInt")
  (docs "Override for width request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property height-request
  (of-object "GtkWidget")
  (prop-type "GParamInt")
  (docs "Override for height request of the widget, or -1 if natural request should be used")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "-1")
)

(define-property visible
  (of-object "GtkWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is visible")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property sensitive
  (of-object "GtkWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget responds to input")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property can-focus
  (of-object "GtkWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property has-focus
  (of-object "GtkWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has the input focus")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property can-target
  (of-object "GtkWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can receive pointer events")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property focus-on-click
  (of-object "GtkWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget should grab focus when it is clicked with the mouse")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property focusable
  (of-object "GtkWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget can accept the input focus")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property has-default
  (of-object "GtkWidget")
  (prop-type "GParamBoolean")
  (docs "Whether the widget is the default widget")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property receives-default
  (of-object "GtkWidget")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the widget will receive the default action when it is focused")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property cursor
  (of-object "GtkWidget")
  (prop-type "GParamObject")
  (docs "The cursor to show when hovering above widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property has-tooltip
  (of-object "GtkWidget")
  (prop-type "GParamBoolean")
  (docs "Whether this widget has a tooltip")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property tooltip-markup
  (of-object "GtkWidget")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property tooltip-text
  (of-object "GtkWidget")
  (prop-type "GParamString")
  (docs "The contents of the tooltip for this widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property opacity
  (of-object "GtkWidget")
  (prop-type "GParamDouble")
  (docs "The opacity of the widget, from 0 to 1")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "1")
)

(define-property overflow
  (of-object "GtkWidget")
  (prop-type "GParamEnum")
  (docs "How content outside the widget’s content area is treated")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_OVERFLOW_VISIBLE")
)

(define-property halign
  (of-object "GtkWidget")
  (prop-type "GParamEnum")
  (docs "How to position in extra horizontal space")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_ALIGN_FILL")
)

(define-property valign
  (of-object "GtkWidget")
  (prop-type "GParamEnum")
  (docs "How to position in extra vertical space")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_ALIGN_FILL")
)

(define-property margin-start
  (of-object "GtkWidget")
  (prop-type "GParamInt")
  (docs "Pixels of extra space on the start")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property margin-end
  (of-object "GtkWidget")
  (prop-type "GParamInt")
  (docs "Pixels of extra space on the end")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property margin-top
  (of-object "GtkWidget")
  (prop-type "GParamInt")
  (docs "Pixels of extra space on the top side")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property margin-bottom
  (of-object "GtkWidget")
  (prop-type "GParamInt")
  (docs "Pixels of extra space on the bottom side")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property hexpand
  (of-object "GtkWidget")
  (prop-type "GParamBoolean")
  (docs "Whether widget wants more horizontal space")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property vexpand
  (of-object "GtkWidget")
  (prop-type "GParamBoolean")
  (docs "Whether widget wants more vertical space")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property hexpand-set
  (of-object "GtkWidget")
  (prop-type "GParamBoolean")
  (docs "Whether to use the hexpand property")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property vexpand-set
  (of-object "GtkWidget")
  (prop-type "GParamBoolean")
  (docs "Whether to use the vexpand property")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property scale-factor
  (of-object "GtkWidget")
  (prop-type "GParamInt")
  (docs "The scaling factor of the window")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "1")
)

(define-property css-name
  (of-object "GtkWidget")
  (prop-type "GParamString")
  (docs "The name of this widget in the CSS tree")
  (readable #t)
  (writable #t)
  (construct-only #t)
  (default-value "")
)

(define-property css-classes
  (of-object "GtkWidget")
  (prop-type "GParamBoxed")
  (docs "List of CSS classes")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property layout-manager
  (of-object "GtkWidget")
  (prop-type "GParamObject")
  (docs "The layout manager used to layout children of the widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkWidgetPaintable

(define-property widget
  (of-object "GtkWidgetPaintable")
  (prop-type "GParamObject")
  (docs "Observed widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

;; From GtkWindow

(define-signal activate-focus
  (of-object "GtkWindow")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal activate-default
  (of-object "GtkWindow")
  (return-type "void")
  (flags "Run Last, Action")
)

(define-signal keys-changed
  (of-object "GtkWindow")
  (return-type "void")
  (flags "Run First")
)

(define-signal enable-debugging
  (of-object "GtkWindow")
  (return-type "gboolean")
  (flags "Run Last, Action")
  (parameters
    '("gboolean" "p0")
  )
)

(define-signal close-request
  (of-object "GtkWindow")
  (return-type "gboolean")
  (flags "Run Last")
)

(define-property title
  (of-object "GtkWindow")
  (prop-type "GParamString")
  (docs "The title of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property resizable
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "If TRUE, users can resize the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property modal
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "If TRUE, the window is modal (other windows are not usable while this one is up)")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property default-width
  (of-object "GtkWindow")
  (prop-type "GParamInt")
  (docs "The default width of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property default-height
  (of-object "GtkWindow")
  (prop-type "GParamInt")
  (docs "The default height of the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "0")
)

(define-property destroy-with-parent
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "If this window should be destroyed when the parent is destroyed")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property hide-on-close
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "If this window should be hidden when the user clicks the close button")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property icon-name
  (of-object "GtkWindow")
  (prop-type "GParamString")
  (docs "Name of the themed icon for this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property display
  (of-object "GtkWindow")
  (prop-type "GParamObject")
  (docs "The display that will display this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property decorated
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "Whether the window should be decorated by the window manager")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property deletable
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "Whether the window frame should have a close button")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property transient-for
  (of-object "GtkWindow")
  (prop-type "GParamObject")
  (docs "The transient parent of the dialog")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property application
  (of-object "GtkWindow")
  (prop-type "GParamObject")
  (docs "The GtkApplication for the window")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property default-widget
  (of-object "GtkWindow")
  (prop-type "GParamObject")
  (docs "The default widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property focus-widget
  (of-object "GtkWindow")
  (prop-type "GParamObject")
  (docs "The focus widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property child
  (of-object "GtkWindow")
  (prop-type "GParamObject")
  (docs "The child widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

(define-property is-active
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "Whether the toplevel is the current active window")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property startup-id
  (of-object "GtkWindow")
  (prop-type "GParamString")
  (docs "Unique startup identifier for the window used by startup-notification")
  (readable #f)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property mnemonics-visible
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "Whether mnemonics are currently visible in this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property focus-visible
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "Whether focus rectangles are currently visible in this window")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "TRUE")
)

(define-property maximized
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "Whether the window is maximized")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

(define-property fullscreened
  (of-object "GtkWindow")
  (prop-type "GParamBoolean")
  (docs "Whether the window is fullscreen")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "FALSE")
)

;; From GtkWindowControls

(define-property side
  (of-object "GtkWindowControls")
  (prop-type "GParamEnum")
  (docs "Whether the widget shows start or end portion of the decoration layout")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "GTK_PACK_START")
)

(define-property decoration-layout
  (of-object "GtkWindowControls")
  (prop-type "GParamString")
  (docs "The layout for window decorations")
  (readable #t)
  (writable #t)
  (construct-only #f)
  (default-value "")
)

(define-property empty
  (of-object "GtkWindowControls")
  (prop-type "GParamBoolean")
  (docs "Whether the widget has any window buttons")
  (readable #t)
  (writable #f)
  (construct-only #f)
  (default-value "TRUE")
)

;; From GtkWindowHandle

(define-property child
  (of-object "GtkWindowHandle")
  (prop-type "GParamObject")
  (docs "The child widget")
  (readable #t)
  (writable #t)
  (construct-only #f)
)

