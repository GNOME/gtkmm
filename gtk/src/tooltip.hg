/* Copyright (C) 2007 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <glibmm/object.h>
#include <giomm/icon.h>
#include <gdkmm/paintable.h>
#include <gtkmm/enums.h>
#include <gtkmm/widget.h>

_DEFS(gtkmm,gtk)
_PINCLUDE(glibmm/private/object_p.h)

namespace Gtk
{

/** Add tips to your widgets
 *
 * Basic tooltips can be realized simply by using set_tooltip_text()
 * or set_tooltip_markup() without any explicit tooltip object.
 *
 * When you need a tooltip with a little more fancy contents, like
 * adding an image, or you want the tooltip to have different contents
 * per Gtk::TreeView row or cell, you will have to do a little more work:
 *
 * - Call Gtk::Widget:set_has_tooltip(); this will
 * make GTK+ monitor the widget for motion and related events
 * which are needed to determine when and where to show a tooltip.
 *
 * - Connect to Gtk::Widget::signal_query_tooltip(). This signal
 * will be emitted when a tooltip is supposed to be shown. One
 * of the arguments passed to the signal handler is a Gtk::Tooltip
 * object. This is the object that we are about to display as a
 * tooltip, and can be manipulated in your callback using functions
 * like Gtk::Tooltip::set_icon(). There are functions for setting
 * the tooltip's markup, setting an image from a named icon, or
 * even putting in a custom widget.
 *
 * - Return true from your query-tooltip handler. This causes
 * the tooltip to be show. If you return false, it will not be shown.
 *
 * @newin{2,12}
 */
class GTKMM_API Tooltip : public Glib::Object
{
protected:
  _CLASS_GOBJECT(Tooltip, GtkTooltip, GTK_TOOLTIP, Glib::Object, GObject, , , GTKMM_API)

public:
  _WRAP_METHOD(void set_markup(const Glib::ustring& markup), gtk_tooltip_set_markup)

  /** Hide the label.
   * @newin{3,2}
   */
  void unset_markup();

  _WRAP_METHOD(void set_text(const Glib::ustring& text), gtk_tooltip_set_text)

  /** Hide the label.
   * @newin{3,2}
   */
  void unset_text();

  _WRAP_METHOD(void set_icon(const Glib::RefPtr<Gdk::Paintable>& paintable), gtk_tooltip_set_icon)
  _WRAP_METHOD(void set_icon(const Glib::RefPtr<Gio::Icon>& gicon), gtk_tooltip_set_icon_from_gicon)
  _WRAP_METHOD(void set_icon(const Glib::ustring& icon_name{NULL}), gtk_tooltip_set_icon_from_icon_name)

  /** Hide the image.
   * @newin{3,2}
   */
  void unset_icon();

  _WRAP_METHOD(void set_custom(Widget& custom_widget), gtk_tooltip_set_custom)

  /** Remove the custom widget.
   * @newin{3,2}
   */
  void unset_custom();

  _WRAP_METHOD(void set_tip_area(const Gdk::Rectangle& rect), gtk_tooltip_set_tip_area)
};

} // namespace Gtk
