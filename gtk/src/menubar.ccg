/* Copyright (C) 1998-2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see <https://www.gnu.org/licenses/>.
 */

#include <gtk/gtk.h>

namespace Gtk
{

MenuBar::MenuBar()
:
  _CONSTRUCT()
{
  // Connect to the signal instead of overriding the on_hierarchy_changed()
  // method because invocation of C++ default signal handlers is skipped
  // for gtkmmproc-generated classes (a gtkmm-wide optimization).

  signal_realize().connect(sigc::mem_fun(*this, &MenuBar::init_accels_handler_));
}

MenuBar::MenuBar(const Glib::RefPtr<Gio::MenuModel>& model)
:
  _CONSTRUCT()
{
  //g_return_val_if_fail (G_IS_MENU_MODEL (model), NULL);

  bind_model(model, false);


  // Connect to the signal instead of overriding the on_hierarchy_changed()
  // method because invocation of C++ default signal handlers is skipped
  // for gtkmmproc-generated classes (a gtkmm-wide optimization).

  signal_realize().connect(sigc::mem_fun(*this, &MenuBar::init_accels_handler_));
}

void MenuBar::init_accels_handler_()
{
  if(gobj())
  {
    if(Window *const toplevel = dynamic_cast<Window*>(get_toplevel()))
    {
      accelerate(*toplevel);
    }
  }
}

} // namespace Gtk
