/* Copyright (C) 2002-2004 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <vector>

//#include <gdkmm/window.h>
#include <gdkmm/cursor.h>
#include <gdkmm/event.h>
#include <gdkmm/timecoord.h>
#include <gdk/gdk.h>


_DEFS(gdkmm,gdk)
_PINCLUDE(glibmm/private/object_p.h)


namespace Gdk
{

_WRAP_ENUM(EventMask, GdkEventMask, decl_prefix GDKMM_API)
_WRAP_ENUM(InputMode, GdkInputMode, decl_prefix GDKMM_API)
_WRAP_ENUM(InputSource, GdkInputSource, decl_prefix GDKMM_API)
_WRAP_ENUM(DeviceType, GdkDeviceType, decl_prefix GDKMM_API)
_WRAP_ENUM(GrabOwnership, GdkGrabOwnership, decl_prefix GDKMM_API)
_WRAP_ENUM(GrabStatus, GdkGrabStatus, decl_prefix GDKMM_API)

class GDKMM_API Display;
class GDKMM_API Seat;
class GDKMM_API Window;

/** A Gdk::Device instance contains a detailed description of an extended input device.
 *
 * Key values are the codes which are sent whenever a key is pressed or released.
 * The complete list of key values can be found in the
 * <a href="https://gitlab.gnome.org/GNOME/gtk/tree/gtk-3-24/gdk/gdkkeysyms.h">gdk/gdkkeysyms.h</a>
 * header file. They are prefixed with <tt>GDK_KEY_</tt>.
 */
class GDKMM_API Device : public Glib::Object
{
  _CLASS_GOBJECT(Device,GdkDevice,GDK_DEVICE,Glib::Object,GObject, , , GDKMM_API)

protected:
  _CTOR_DEFAULT()

public:

  _WRAP_METHOD(Glib::ustring get_name() const, gdk_device_get_name)
  _WRAP_METHOD(bool get_has_cursor() const, gdk_device_get_has_cursor)

  _WRAP_METHOD(InputSource get_source() const, gdk_device_get_source)
  _WRAP_METHOD(InputMode get_mode() const, gdk_device_get_mode)
  _WRAP_METHOD(bool set_mode(InputMode mode), gdk_device_set_mode)
  _WRAP_METHOD(int get_n_keys() const, gdk_device_get_n_keys)
  _WRAP_METHOD(bool get_key(guint index_, guint& keyval, ModifierType& modifiers) const, gdk_device_get_key)
  _WRAP_METHOD(void set_key(guint index_, guint keyval, ModifierType modifiers), gdk_device_set_key)
  _WRAP_METHOD(AxisUse get_axis_use(guint index_) const, gdk_device_get_axis_use)
  _WRAP_METHOD(void set_axis_use(guint index_, AxisUse use), gdk_device_set_axis_use)
  _WRAP_METHOD(void get_state(const Glib::RefPtr<Window>& window, double& axes, ModifierType& mask), gdk_device_get_state)

  /** Obtains the motion history for a device.
   * Given a starting and ending timestamp, this will return all events
   * in the motion history for the device in the given range of time.
   * Some windowing systems do not support motion history, in which case, false will be returned.
   * (This is not distinguishable from the case where motion history is supported and no events were found.)
   *
   * @param window The window with respect to which which the event coordinates will be reported.
   * @param start Starting timestamp for range of events to return.
   * @param stop Ending timestamp for the range of events to return.
   * @result A vector of TimeCoord.
   */
  std::vector<TimeCoord> get_history(const Glib::RefPtr<Window>& window, guint32 start, guint32 stop) const;
  _IGNORE(gdk_device_get_history)

#m4 _CONVERSION(`GList*',`std::vector<Glib::RefPtr<Gdk::Device> >',`Glib::ListHandler<Glib::RefPtr<Gdk::Device> >::list_to_vector($3, Glib::OWNERSHIP_SHALLOW)')
  _WRAP_METHOD(std::vector<Glib::RefPtr<Gdk::Device> > list_slave_devices(), gdk_device_list_slave_devices)
  //TODO:_WRAP_METHOD(std::vector<Glib::RefPtr<const Gdk::Device> > list_slave_devices() const, gdk_device_list_slave_devices, constversion)

  _WRAP_METHOD(int get_n_axes() const, gdk_device_get_n_axes)

  /** Returns the labels for the axes that the device currently has.
   * @newin{3,4}
   */
  std::vector<std::string> list_axes() const;
  _IGNORE(gdk_device_list_axes)

  //TODO: Use a string instead of a GdkAtom:
  _WRAP_METHOD(bool get_axis_value(double& axes, GdkAtom axis_label, double& value) const, gdk_device_get_axis_value )

  _WRAP_METHOD(bool get_axis(double& axes, AxisUse use, double& value) const, gdk_device_get_axis)

  _WRAP_METHOD(Glib::RefPtr<Display> get_display(), gdk_device_get_display, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Display> get_display() const, gdk_device_get_display, refreturn, constversion)

  _WRAP_METHOD(Glib::RefPtr<Device> get_associated_device(), gdk_device_get_associated_device, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Device> get_associated_device() const, gdk_device_get_associated_device, refreturn, constversion)

  _WRAP_METHOD(DeviceType get_device_type() const, gdk_device_get_device_type)

  _WRAP_METHOD(GrabStatus grab(const Glib::RefPtr<Window>& window, GrabOwnership grab_ownership,
    bool owner_events, EventMask event_mask, const Glib::RefPtr<Cursor>& cursor, guint32 time_),
    gdk_device_grab, deprecated "Use Gdk::Seat::grab() instead.")

_DEPRECATE_IFDEF_START
  /** See the grab() method which takes more parameters.
   *
   * @deprecated Use Gdk::Seat::grab() instead.
   */
  GrabStatus grab(const Glib::RefPtr<Window>& window, GrabOwnership grab_ownership, bool owner_events, EventMask event_mask, guint32 time_);
_DEPRECATE_IFDEF_END

  _WRAP_METHOD(void ungrab(guint32 time_), gdk_device_ungrab,
    deprecated "Use Gdk::Seat::ungrab() instead.")
  _WRAP_METHOD(void warp(const Glib::RefPtr<Screen>& screen, int x, int y), gdk_device_warp)

  /** Gets the current location of the device.
   * As a slave device coordinates are those of its master pointer,
   * this function may not be called on devices of type GDK_DEVICE_TYPE_SLAVE,
   * unless there is an ongoing grab on them. See grab().
   *
   * @param x This will contain the root window X coordinate of the device.
   * @param y This will contain the root window X coordinate of the device.
   */
  void get_position(int& x, int& y) const;

  /** Gets the current location of device.
   * As a slave device coordinates are those of its master pointer,
   * this function may not be called on devices of type GDK_DEVICE_TYPE_SLAVE,
   * unless there is an ongoing grab on them. See grab().
   *
   * @param screen This will contain the screen that the device is on.
   * @param x This will contain the root window X coordinate of the device.
   * @param y This will contain the root window X coordinate of the device.
   */
  void get_position(Glib::RefPtr<Screen>& screen, int& x, int& y) const;
  _IGNORE(gdk_device_get_position)


  /** Gets the current location of the device in double precision.
   * As a slave device coordinates are those of its master pointer,
   * this function may not be called on devices of type GDK_DEVICE_TYPE_SLAVE,
   * unless there is an ongoing grab on them. See grab().
   *
   * @param x This will contain the root window X coordinate of the device.
   * @param y This will contain the root window X coordinate of the device.
   *
   * @newin{3,10}
   */
  void get_position(double& x, double& y) const;

   /** Gets the current location of the device in double precision.
   * As a slave device coordinates are those of its master pointer,
   * this function may not be called on devices of type GDK_DEVICE_TYPE_SLAVE,
   * unless there is an ongoing grab on them. See grab().
   *
   * @param screen This will contain the screen that the device is on.
   * @param x This will contain the root window X coordinate of the device.
   * @param y This will contain the root window X coordinate of the device.
   *
   * @newin{3,10}
   */
  void get_position(Glib::RefPtr<Screen>& screen, double& x, double& y) const;
  _IGNORE(gdk_device_get_position_double)

  _WRAP_METHOD(Glib::RefPtr<Window> get_window_at_position(int& win_x, int& win_y), gdk_device_get_window_at_position, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Window> get_window_at_position(int& win_x, int& win_y) const, gdk_device_get_window_at_position, refreturn, constversion)

  //TODO: Would this be ambiguous? Test it.
  //_WRAP_METHOD(Glib::RefPtr<Window> get_window_at_position(double& win_x, double& win_y), gdk_device_get_window_at_position_double, refreturn)
  //_WRAP_METHOD(Glib::RefPtr<const Window> get_window_at_position(double& win_x, double& win_y) const, gdk_device_get_window_at_position_double, refreturn, constversion)

  /** Obtains the window underneath the device.
   * Returns an empty RefPtr if the window tree under the device is not known to GDK (for example, belongs to another application).
   *
   * As a slave device coordinates are those of its master pointer, This
   * function may not be called on devices of type Gdk::DEVICE_TYPE_SLAVE,
   * unless there is an ongoing grab on them. See grab().
   *
   * @newin{3,0}
   *
   * @return The Gdk::Window under the device position.
   */
  Glib::RefPtr<Window> get_window_at_position();

  /** Obtains the window underneath the device.
   * Returns an empty RefPtr if the window tree under the device is not known to GDK (for example, belongs to another application).
   *
   * As a slave device coordinates are those of its master pointer, This
   * function may not be called on devices of type Gdk::DEVICE_TYPE_SLAVE,
   * unless there is an ongoing grab on them. See grab().
   *
   * @newin{3,0}
   *
   * @return The Gdk::Window under the device position.
   */
  Glib::RefPtr<const Window> get_window_at_position() const;

  _WRAP_METHOD(Glib::RefPtr<Window> get_last_event_window(), gdk_device_get_last_event_window, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Window> get_last_event_window() const, gdk_device_get_last_event_window, refreturn, constversion)

  _WRAP_METHOD(Glib::ustring get_vendor_id() const, gdk_device_get_vendor_id)
  _WRAP_METHOD(Glib::ustring get_product_id(), gdk_device_get_product_id)

  _WRAP_METHOD(Glib::RefPtr<Seat> get_seat(), gdk_device_get_seat, refreturn)
  _WRAP_METHOD(Glib::RefPtr<const Seat> get_seat() const, gdk_device_get_seat, refreturn, constversion)

  _WRAP_METHOD(AxisFlags get_axes() const, gdk_device_get_axes)

  // We use no_default_handler because _GdkDeviceClass is private.
  _WRAP_SIGNAL(void changed(), "changed", no_default_handler, newin "3,22")

  //TODO: Wrap or ignore the "device-manager" and "tool" properties and the
  // "tool-changed" signal. GdkDeviceManager is not recommended for use in new code.
  // GdkDeviceTool is not fully documented. It's not clear if it's meant to
  // be used outside gtk+.
  _WRAP_PROPERTY("display", Glib::RefPtr<Display>, newin "3,22")
  _WRAP_PROPERTY("name", Glib::ustring, newin "3,22")
  _WRAP_PROPERTY("type", DeviceType, newin "3,22")
  _WRAP_PROPERTY("associated-device", Glib::RefPtr<Device>, newin "3,22")
  _WRAP_PROPERTY("input-source", InputSource, newin "3,22")
  _WRAP_PROPERTY("input-mode", InputMode, newin "3,22")
  _WRAP_PROPERTY("has-cursor", bool, newin "3,22")
  _WRAP_PROPERTY("n-axes", guint, newin "3,22")
  _WRAP_PROPERTY("vendor-id", Glib::ustring, newin "3,22")
  _WRAP_PROPERTY("product-id", Glib::ustring, newin "3,22")
  _WRAP_PROPERTY("seat", Glib::RefPtr<Seat>, newin "3,22")
  _WRAP_PROPERTY("num-touches", guint, newin "3,22")
  _WRAP_PROPERTY("axes", AxisFlags)
};

} // namespace Gdk
