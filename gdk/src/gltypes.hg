/* Copyright (C) 2002 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <glibmm/value.h>
#include <gdk/gdk.h>
#include <gdkmmconfig.h>
#include <gdkmm/display.h>
#include <gdkmm/window.h>

_DEFS(gdkmm,gdk)
_PINCLUDE(glibmm/private/object_p.h)

namespace Gdk
{

_WRAP_ENUM(GLError, GdkGLError)

class GLContext : public Glib::Object
{
    _CLASS_GOBJECT(GLContext,GdkGLContext,GDK_GL_CONTEXT,Glib::Object,GObject)

    _WRAP_METHOD(Glib::RefPtr<Display> get_display(), gdk_gl_context_get_display, refreturn)
    _WRAP_METHOD(Glib::RefPtr<Window> get_window(), gdk_gl_context_get_window, refreturn)
    _WRAP_METHOD(Glib::RefPtr<GLContext> get_shared_context(), gdk_gl_context_get_shared_context, refreturn)
    _WRAP_METHOD(void get_version(int& major, int& minor), gdk_gl_context_get_version)
    _WRAP_METHOD(void set_required_version(int major, int minor), gdk_gl_context_set_required_version)
    _WRAP_METHOD(void get_required_version(int& major, int& minor), gdk_gl_context_get_required_version)
    _WRAP_METHOD(void set_debug_enabled(bool enabled), gdk_gl_context_set_debug_enabled)
    _WRAP_METHOD(bool get_debug_enabled(), gdk_gl_context_get_debug_enabled)
    _WRAP_METHOD(void set_forward_compatible(bool compatible), gdk_gl_context_set_forward_compatible)
    _WRAP_METHOD(bool get_forward_compatible(), gdk_gl_context_get_forward_compatible)
    _WRAP_METHOD(bool realize(), gdk_gl_context_realize, errthrow)
    _WRAP_METHOD(void make_current(), gdk_gl_context_make_current)
    _WRAP_METHOD(static Glib::RefPtr<GLContext> get_current(), gdk_gl_context_get_current, refreturn)
    _WRAP_METHOD(static void clear_current(), gdk_gl_context_clear_current)

    _WRAP_PROPERTY("display", Glib::RefPtr<Display>)
    _WRAP_PROPERTY("shared-context", Glib::RefPtr<GLContext>)
    _WRAP_PROPERTY("window", Glib::RefPtr<Window>)

protected:
    _CTOR_DEFAULT

public:

};

} // namespace Gdk
