/* Copyright (C) 2023 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 */

#include <gdkmm/cairoutils.h>
#include <gdkmm/value_cairo.h>
#include <gdkmm/colorstate.h>
#include <gdkmm/display.h>
#include <gdkmm/texture.h>
#include <gdk/gdk.h>

namespace
{
extern "C"
{
static void DmabufTextureBuilder_destroy_callback(void* data)
{
  auto the_slot = static_cast<Gdk::DmabufTextureBuilder::SlotDmabufTextureReleased*>(data);
  try
  {
    (*the_slot)();
  }
  catch (...)
  {
    Glib::exception_handlers_invoke();
  }
  delete the_slot;
}
} // extern "C"
} // anonymous namespace

namespace Gdk
{
Glib::RefPtr<Texture> DmabufTextureBuilder::build(const SlotDmabufTextureReleased& slot)
{
  // Create a copy of the slot.
  auto slot_copy = new SlotDmabufTextureReleased(slot); 

  GError* gerror = nullptr;
  auto retvalue = Glib::wrap(gdk_dmabuf_texture_builder_build(gobj(),
    &DmabufTextureBuilder_destroy_callback, slot_copy, &gerror));
  if (gerror)
    ::Glib::Error::throw_exception(gerror);
  return retvalue;
}
} // namespace Gdk
