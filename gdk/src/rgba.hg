/*
 * Copyright (C) 2010 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */

_CONFIGINCLUDE(gdkmmconfig.h)

#include <glibmm/value.h>
#include <gdk/gdk.h> //Needed for our RGBATraits here.

_DEFS(gdkmm,gdk)

namespace Gdk
{

/** An %RGBA color.
 * The %RGBA class is a convenient way to pass colors around.
 * It's based on cairo's way to deal with (possibly translucent) colors and mirrors its behavior.
 * All values are in the range from 0.0 to 1.0 inclusive.
 * So the color (0.0, 0.0, 0.0, 0.0) represents transparent black and (1.0, 1.0, 1.0, 1.0) is opaque white.
 * Other values will be clamped to this range when drawing.
 */
class GDKMM_API RGBA
{
  _CLASS_BOXEDTYPE(RGBA, GdkRGBA, NONE, gdk_rgba_copy, gdk_rgba_free, GDKMM_API)
  _IGNORE(gdk_rgba_copy, gdk_rgba_free)
public:

  _CUSTOM_DEFAULT_CTOR

  /** Instantiate a new Gdk::RGBA.
   */
  RGBA();

  /** Parses a textual representation of a color and creates a new Gdk::RGBA
   * with the corresponding values in its <tt>red</tt>, <tt>green</tt>,
   * <tt>blue</tt> and <tt>alpha</tt> fields.
   *
   * The string can be one of:
   *
   * <ul>
   *   <li>A standard name (taken from the X11 rgb.txt file)</li>
   *   <li>A hexadecimal value in the form <tt>#rgb</tt>, <tt>#rrggbb</tt>,
   *     <tt>#rrrgggbbb</tt> or </tt>#rrrrggggbbbb</tt></li>
   *   <li>An RGB color in the form <tt>rgb(r,g,b)</tt> (In this case the color will have full opacity)</li>
   *   <li>An RGBA color in the form <tt>rgba(r,g,b,a)</tt></li>
   * </ul>
   *
   * Where <tt>r</tt>, <tt>g</tt>, <tt>b</tt> and <tt>a</tt> are respectively
   * the red, green, blue and alpha color values. In the last two cases,
   * <tt>r</tt> <tt>g</tt> and <tt>b</tt> are either integers in the range 0 to
   * 255 or percentage values in the range 0% to 100%, and <tt>a</tt> is a
   * floating point value in the range 0 to 1.
   *
   * @param value the string specifying the color.
   */
  explicit RGBA(const Glib::ustring& value);
  _IGNORE(gdk_rgba_parse)

  /** Construct a Gdk::RGBA, by specifying red, green, and blue color component values, as fractions.
   * @param red_ The red component of the color, as a fraction.
   * @param green_ The green component of the color, as a fraction.
   * @param blue_ The blue component of the color, as a fraction.
   * @param alpha_ The alpha component of the color, as a fraction.
   */
  RGBA(float red_, float green_, float blue_, float alpha_ = 1.0);

  /** Set a grey color, by using the same value for all color components.
   * @param value The value to be used for the red, green, and blue components, in the range 0..65535.
   * @param alpha The alpha component of the color, in the range 0..65535.
   */
  void set_grey_u(gushort value, gushort alpha = 65535);

  /** Set a grey color, by using the same value for all color components.
   * @param g The value to be used for the red, green, and blue components, as a fraction.
   * @param alpha The alpha component of the color, as a fraction.
   */
  void set_grey(float g, float alpha = 1.0);

  /** Set the color, by specifying red, green, and blue color component values.
   * @param red_ The red component of the color, in the range 0..65535.
   * @param green_ The green component of the color, in the range 0..65535.
   * @param blue_ The blue component of the color, in the range 0..65535.
   * @param alpha_ The alpha component of the color, in the range 0..65535.
   */
  void set_rgba_u(gushort red_, gushort green_, gushort blue_, gushort alpha_ = 65535);

  /** Set the color, by specifying red, green, and blue color component values, as fractions.
   * @param red_ The red component of the color, as a fraction.
   * @param green_ The green component of the color, as a fraction.
   * @param blue_ The blue component of the color, as a fraction.
   * @param alpha_ The alpha component of the color, as a fraction.
   */
  void set_rgba(float red_, float green_, float blue_, float alpha_ = 1.0);

  /** Set the color, by specifying hue, saturation, and value (brightness).
   * @param h Hue, in the range 0..360 degrees.
   * @param s Saturation, in the range 0..1.
   * @param v Value (a.k.a. brightness), in the range 0..1.
   * @param alpha The alpha component of the color, in the range 0..1.
   */
  void set_hsv(float h, float s, float v, float alpha = 1.0);

  /** Set the color, by specifying hue, saturation, and lightness.
   * @param h Hue, in the range 0..360 degrees.
   * @param s Saturation, in the range 0..1.
   * @param l Lightness, in the range 0..1.
   * @param alpha The alpha component of the color, in the range 0..1.
   */
  void set_hsl(float h, float s, float l, float alpha = 1.0);

  _WRAP_METHOD(bool set(const Glib::ustring& spec), gdk_rgba_parse)

  /** Get the red component of the color.
   * @result The red component of the color, in the range 0..65535.
   */
  gushort get_red_u() const;

  /** Get the green component of the color.
   * @result The green component of the color, in the range 0..65535.
   */
  gushort get_green_u() const;

  /** Get the blue component of the color.
   * @result The blue component of the color, in the range 0..65535.
   */
  gushort get_blue_u() const;

  /** Get the alpha component of the color.
   * @result The alpha component of the color, in the range 0..65535.
   */
  gushort get_alpha_u() const;

  /** Set the red component of the color.
   * @param value The red component of the color, in the range 0..65535.
   */
  void set_red_u(gushort value);

  /** Set the green component of the color.
   * @param value The green component of the color, in the range 0..65535.
   */
  void set_green_u(gushort value);

  /** Set the blue component of the color.
   * @param value The blue component of the color, in the range 0..65535.
   */
  void set_blue_u(gushort value);

  /** Set the alpha component of the color.
   * @param value The alpha component of the color, in the range 0..65535.
   */
  void set_alpha_u(gushort value);


  /** Get the red component of the color, as a fraction.
   * @result The red component of the color, as a fraction.
   */
  float get_red() const;

  /** Get the green component of the color, as a fraction.
   * @result The green component of the color, as a fraction.
   */
  float get_green() const;

  /** Get the blue component of the color, as a fraction.
   * @result The blue component of the color, as a fraction.
   */
  float get_blue() const;

  /** Get the alpha component of the color, as a fraction.
   * @result The alpha component of the color, as a fraction.
   */
  float get_alpha() const;

  /** Set the red component of the color, as a fraction.
   * @param value The red component of the color, as a fraction.
   */
  void set_red(float value);

  /** Set the green component of the color, as a fraction.
   * @param value The green component of the color, as a fraction.
   */
  void set_green(float value);

  /** Set the blue component of the color, as a fraction.
   * @param value The blue component of the color, as a fraction.
   */
  void set_blue(float value);

  /** Set the alpha component of the color, as a fraction.
   * @param value The alpha component of the color, as a fraction.
   */
  void set_alpha(float value);

  _WRAP_METHOD(Glib::ustring to_string() const, gdk_rgba_to_string)

  _WRAP_METHOD(bool is_clear() const, gdk_rgba_is_clear)
  _WRAP_METHOD(bool is_opaque() const, gdk_rgba_is_opaque)

#m4begin
  _WRAP_EQUAL(gdk_rgba_equal,,GDKMM_API)
#m4end
};


#ifndef DOXYGEN_SHOULD_SKIP_THIS
/* These traits are for arrays of GdkRGBA structs -- not pointer arrays.
 */
struct RGBATraits
{
  typedef Gdk::RGBA  CppType;
  typedef GdkRGBA    CType;
  typedef GdkRGBA    CTypeNonConst;

  static CType   to_c_type      (const CppType& obj) { return *obj.gobj(); }
  static CType   to_c_type      (const CType&   obj) { return obj; }
  static CppType to_cpp_type    (const CType&   obj) { return CppType(const_cast<CType*>(&obj), true); }
  static void    release_c_type (const CType&)       {}
};
#endif //DOXYGEN_SHOULD_SKIP_THIS

} // namespace Gdk
