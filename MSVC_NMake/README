Building gtkmm-4.0 with Visual Studio 2017

* You will need Visual Studio 2017 (MSVC 15.0). Earlier versions of the compiler, including 14.0 and
  earlier will not work.  The build can be carried out using the NMake Makefiles supplied in this
  directory, or via using Meson.  Meson is only supported if libsigc++, glibmm, cairomm and pangomm
  are built with Meson as well.
* Install the latest Win32 GTK+ 4.x Development files.
* Build libsigc++, glibmm, cairomm and pangomm from source, with the same compiler version, even if
  on Visual Studio 2017 or 2019.  If there are strange linker errors, they are likely caused by mixing
  different compiler versions.
* Use the Visual Studio command prompt that is appropriate for your build and navigate to this directory.
* Run nmake /f Makefile.vc CFG=[debug|release].  Also pass in PREFIX=<path> to this command line if
  GTK+, libsigc++, glibmm, cairomm and pangomm are not in $(srcroot)\..\vs15\$(platform).  You
  may also need to pass in VULKAN_SDK_DIR=<path_to_base_installation_directory_to_the_LunarG_Vulkan_SDK>
  if the GTK+-4.x build that is being used is built with Vulkan support, so that Vulkan's headers and
  libraries can be found.  Pass in DISABLE_DEPRECATED to disable building deprecated gtkmm APIs into the
  final DLL.
* If you have built libsigc++, glibmm, cairomm and pangomm on Visual Studio using the Meson build
  system instead   of using NMake, you can pass in `USE_MESON_LIBS=1` to the NMake command line to link to
  these libraries.  Note that mixing dependent -mm libraries built from NMake Makefiles and Meson is not
  recommended nor supported directly, and one is responsible to ensure gtkmm and the dependent -mm libraries
  link to the same DLL
* Build the tests by appending 'test' to the NMake command line in the previous step.

Timothy M. Shead & Cedric Gustin
11/04/2004

Armin Burgmeier
10/02/2010

Chun-wei Fan
09/10/2015
